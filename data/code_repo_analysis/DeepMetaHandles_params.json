{
    "src/datasets.py": {
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "src_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "src_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(src_pc).cuda()",
                            "Call"
                        ],
                        [
                            "self.pc[src_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_35": {
                "variable": {
                    "value": "tar_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tar_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tar_pc).cuda()",
                            "Call"
                        ],
                        [
                            "self.pc[tar_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_36": {
                "variable": {
                    "value": "key_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "key_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(key_pts).cuda()",
                            "Call"
                        ],
                        [
                            "self.key_pts[src_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_37": {
                "variable": {
                    "value": "w_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "w_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(w_pc).cuda()",
                            "Call"
                        ],
                        [
                            "self.w_pc[src_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "data['src_pc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "data['tar_pc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_23": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "data['key_pts']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "data['w_pc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_27": {
                "ndarray": {
                    "value": "data['src_ver']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "ndarray": {
                    "value": "data['src_face']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "data['tar_ver']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "data['tar_face']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "ndarray": {
                    "value": "data['real_ver']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "data['real_face']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "data['w_mesh']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/demo_meta_handle.py": {
        "torch": {
            "DataParallel_19": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.model(opt.num_basis).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "w_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('%s/w_pc_4096.npy' % opt.src_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "w_mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('%s/w_mesh.npy' % opt.src_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_21": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "variable": {
                    "value": "def_ver",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mesh.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "def_key_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_pts[0] + off",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/demo_target_driven_deform.py": {
        "torch": {
            "DataParallel_19": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.model(opt.num_basis).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "w_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('%s/w_pc_4096.npy' % opt.src_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "w_mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('%s/w_mesh.npy' % opt.src_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "def_ver",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mesh.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "def_key_pts[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_21": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/laplacian.py": {
        "torch": {
            "stack_86": {
                "variable": {
                    "value": "cot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cota, cotb, cotc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ii, jj]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "inv_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "verts_packed.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "meshes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[area] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_5": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "meshes.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_26": {
                "variable": {
                    "value": "norm_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meshes.laplacian_packed()",
                            "Call"
                        ],
                        [
                            "laplacian_cot(meshes)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(idx, cot.view(-1), (V, V))",
                            "Call"
                        ],
                        [
                            "L + L.t()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/losses.py": {
        "torch": {
            "gather_9": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "f[:, 0].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_10": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "f[:, 1].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_11": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "f[:, 2].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_12": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B - A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "C - A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_26": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-18",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_27": {
                "variable": {
                    "value": "src_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_meshes.verts_packed()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "src_f[:, 0].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_28": {
                "variable": {
                    "value": "src_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_meshes.verts_packed()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "src_f[:, 1].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_29": {
                "variable": {
                    "value": "src_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_meshes.verts_packed()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "src_f[:, 2].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_30": {
                "variable": {
                    "value": "def_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "def_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "def_meshes.verts_packed()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "src_f[:, 0].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_31": {
                "variable": {
                    "value": "def_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "def_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "def_meshes.verts_packed()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "src_f[:, 1].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_32": {
                "variable": {
                    "value": "def_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "def_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "def_meshes.verts_packed()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "src_f[:, 2].unsqueeze(-1).expand(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_33": {
                "variable": {
                    "value": "src_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_B - src_A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "src_C - src_A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_34": {
                "variable": {
                    "value": "def_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "def_B - def_A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "def_C - def_A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_76": {
                "obj": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_86": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(X.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_156": {
                "start": {
                    "value": "P1",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_159": {
                "start": {
                    "value": "P2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_201": {
                "input": {
                    "value": "F.cosine_similarity(x_normals, x_normals_near, dim=2, eps=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_204": {
                "input": {
                    "value": "F.cosine_similarity(y_normals, y_normals_near, dim=2, eps=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/network.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_12": {
                "variable": {
                    "value": "self.leakyrelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_16": {
                "variable": {
                    "value": "self.leakyrelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_20": {
                "variable": {
                    "value": "self.leakyrelu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_23": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.leakyrelu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.leakyrelu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.leakyrelu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.fc(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_41": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2883",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_42": {
                "variable": {
                    "value": "self.conv12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_43": {
                "variable": {
                    "value": "self.conv13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_45": {
                "variable": {
                    "value": "self.bn12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_46": {
                "variable": {
                    "value": "self.bn13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_49": {
                "variable": {
                    "value": "self.conv21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "68",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_50": {
                "variable": {
                    "value": "self.conv22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_51": {
                "variable": {
                    "value": "self.bn21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_52": {
                "variable": {
                    "value": "self.bn22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_55": {
                "variable": {
                    "value": "self.conv31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_56": {
                "variable": {
                    "value": "self.conv32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_57": {
                "variable": {
                    "value": "self.conv33",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_basis * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "variable": {
                    "value": "self.bn31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "self.bn32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_62": {
                "variable": {
                    "value": "self.conv41",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048 + 64 + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "variable": {
                    "value": "self.conv42",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_64": {
                "variable": {
                    "value": "self.conv43",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "variable": {
                    "value": "self.bn41",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.bn42",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_67": {
                "variable": {
                    "value": "self.bn43",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_70": {
                "variable": {
                    "value": "self.conv51",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 + 3 + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "variable": {
                    "value": "self.conv52",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_72": {
                "variable": {
                    "value": "self.conv53",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "variable": {
                    "value": "self.bn51",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "self.bn52",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_75": {
                "variable": {
                    "value": "self.bn53",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "variable": {
                    "value": "self.conv61",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_79": {
                "variable": {
                    "value": "self.conv62",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_80": {
                "variable": {
                    "value": "self.conv63",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_81": {
                "variable": {
                    "value": "self.bn61",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_82": {
                "variable": {
                    "value": "self.bn62",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_84": {
                "variable": {
                    "value": "self.conv71",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 + 3 + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_85": {
                "variable": {
                    "value": "self.conv72",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_86": {
                "variable": {
                    "value": "self.conv73",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_87": {
                "variable": {
                    "value": "self.bn71",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_88": {
                "variable": {
                    "value": "self.bn72",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_90": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "src_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn11(self.conv11(src_out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "src_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn12(self.conv12(src_out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "src_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn13(self.conv13(src_out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_out, w_pc1, key_pts1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn21(self.conv21(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_fea, key_pts.view(B * K, 3, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn31(self.conv31(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn32(self.conv32(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "coef_range",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_fea_range, key_pts_range, basis_range]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "coef_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn71(self.conv71(coef_range))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "coef_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn72(self.conv72(coef_range))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "src_tar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_global, tar_global]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "variable": {
                    "value": "src_tar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "src_tar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B * K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "key_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_fea, src_tar, key_pts.view(B * K, 3, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "key_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn41(self.conv41(key_fea))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "key_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn42(self.conv42(key_fea))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "key_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn43(self.conv43(key_fea))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_fea, basis1, key_pts2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn51(self.conv51(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn52(self.conv52(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, coef_range.view(B * self.num_basis, 2, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_159": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn61(self.conv61(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn62(self.conv62(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_167": {
                "variable": {
                    "value": "def_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_pc",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "def_key_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_pts + torch.bmm(coef, basis).view(B, K, 3)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_171": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, self.num_basis)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_176": {
                "variable": {
                    "value": "sample_def_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_pc",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sample_def_key_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_pts + torch.bmm(sample_coef, basis).view(B, K, 3)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_110": {
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([src_out, w_pc1, key_pts1], 2).view(B * K, 68, N)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn21(self.conv21(net)))",
                            "Call"
                        ],
                        [
                            "self.bn22(self.conv22(net))",
                            "Call"
                        ],
                        [
                            "torch.max(net, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([key_fea, key_pts.view(B * K, 3, 1)], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn31(self.conv31(net)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn32(self.conv32(net)))",
                            "Call"
                        ],
                        [
                            "torch.cat([key_fea, basis1, key_pts2], 2).view(B * self.num_basis, 3 + 128 + 3, K)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn51(self.conv51(net)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn52(self.conv52(net)))",
                            "Call"
                        ],
                        [
                            "self.bn53(self.conv53(net))",
                            "Call"
                        ],
                        [
                            "torch.max(net, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "net.view(B * self.num_basis, 128, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([net, coef_range.view(B * self.num_basis, 2, 1)], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn61(self.conv61(net)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn62(self.conv62(net)))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_130": {
                "input": {
                    "value": "coef_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([key_fea_range, key_pts_range, basis_range], 2).view(B * self.num_basis, 70, K)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn71(self.conv71(coef_range)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn72(self.conv72(coef_range)))",
                            "Call"
                        ],
                        [
                            "self.conv73(coef_range)",
                            "Call"
                        ],
                        [
                            "torch.max(coef_range, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "coef_range.view(B, self.num_basis, 2) * 0.01",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_155": {
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([src_out, w_pc1, key_pts1], 2).view(B * K, 68, N)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn21(self.conv21(net)))",
                            "Call"
                        ],
                        [
                            "self.bn22(self.conv22(net))",
                            "Call"
                        ],
                        [
                            "torch.max(net, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([key_fea, key_pts.view(B * K, 3, 1)], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn31(self.conv31(net)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn32(self.conv32(net)))",
                            "Call"
                        ],
                        [
                            "torch.cat([key_fea, basis1, key_pts2], 2).view(B * self.num_basis, 3 + 128 + 3, K)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn51(self.conv51(net)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn52(self.conv52(net)))",
                            "Call"
                        ],
                        [
                            "self.bn53(self.conv53(net))",
                            "Call"
                        ],
                        [
                            "torch.max(net, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "net.view(B * self.num_basis, 128, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([net, coef_range.view(B * self.num_basis, 2, 1)], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn61(self.conv61(net)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn62(self.conv62(net)))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_166": {
                "input": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sigmoid(self.conv63(net)).view(B, self.num_basis)",
                            "Call"
                        ],
                        [
                            "(coef * coef_range[:, :, 0] + (1 - coef) * coef_range[:, :, 1]).view(B, 1, self.num_basis)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv33(net).view(B, K * 3, self.num_basis).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "basis / basis.norm(p=2, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_175": {
                "input": {
                    "value": "sample_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ratio * coef_range[:, :, 0] + (1 - ratio) * coef_range[:, :, 1]).view(B, 1, self.num_basis)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv33(net).view(B, K * 3, self.num_basis).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "basis / basis.norm(p=2, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_178": {
                "data": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/pointnet_utils.py": {
        "torch": {
            "Conv1d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_12": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_47": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_49": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_57": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_88": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_89": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_90": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_91": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_92": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_93": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_94": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_95": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_96": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(point_cloud))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(out2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "out4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(net_transformed))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point_cloud, expand, out1, out2, out3, out4, out5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_121": {
                "input": {
                    "value": "out5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn5(self.conv5(out4))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "ndarray": {
                    "value": "np.array([1, 0, 0, 0, 1, 0, 0, 0, 1]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "ndarray": {
                    "value": "np.eye(self.k).flatten().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/render.py": {
        "torch": {
            "ones_21": {
                "variable": {
                    "value": "verts_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, np.max(num_verts_per_mesh), 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "verts[0].get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_30": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(verts)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_31": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(verts)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "DataLoader_93": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ChairDataset('train')",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "datasets.my_collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda id: np.random.seed(np.random.get_state()[1][0] + id)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_98": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.model(opt.num_basis).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.apply(weights_init)",
                            "Call"
                        ],
                        [
                            "net.apply(lambda x: bn_momentum_adjust(x, momentum))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.Discriminator().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netD)",
                            "Call"
                        ],
                        [
                            "netD.apply(weights_init1)",
                            "Call"
                        ],
                        [
                            "netD.apply(lambda x: bn_momentum_adjust(x, momentum))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.decay_rate * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCELoss_150": {
                "variable": {
                    "value": "adversarial_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(experiment_dir) + '/checkpoints/last_model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_253": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basis.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "basis.transpose(1, 2).abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_261": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basis.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(src_pc, tar_pc, key_pts, w_pc)",
                            "Call"
                        ],
                        [
                            "basis.reshape(opt.batch_size * opt.num_basis, 50, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_267": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coef.view(opt.batch_size, opt.num_basis, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "coef.view(opt.batch_size, 1, opt.num_basis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_370": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'modelD_state_dict': netD.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict(), 'cd_curve': cd_curve, 'sym_curve': sym_curve, 'lap_curve': lap_curve, 'nor_curve': nor_curve}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(checkpoints_dir) + '/last_model.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_230": {
                "*size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "input": {
                    "value": "data['w_mesh'][j].cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sample_def_key_pts[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_212": {
                "*size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_210": {
                "*size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {}
    }
}