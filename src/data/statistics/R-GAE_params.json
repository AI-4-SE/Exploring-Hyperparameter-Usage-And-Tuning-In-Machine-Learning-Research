{
    "DGAE/metrics.py": {
        "sklearn": {},
        "torch": {
            "cat_21": {
                "variable": {
                    "value": "grad1_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad1_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "grad2_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad2_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dot_23": {
                "input": {
                    "value": "grad1_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad1_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "grad2_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad2_list, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_23": {
                "input": {
                    "value": "grad2_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad2_list, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DGAE/model.py": {
        "sklearn": {},
        "torch": {}
    },
    "DGAE/preprocessing.py": {
        "sklearn": {
            "MinMaxScaler_173": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_174": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((degreeNode.size, degreeNode.max() + 1))",
                            "Call"
                        ],
                        [
                            "sp.csr_matrix(features)",
                            "Call"
                        ],
                        [
                            "sp.vstack((allx, tx)).tolil()",
                            "Call"
                        ],
                        [
                            "sp.csr_matrix((fea, (fea_idx[:, 0], fea_idx[:, 1])), shape=(len(label), 4973))",
                            "Call"
                        ],
                        [
                            "preprocess.normalize(features, norm='l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "GMM-VGAE/metrics.py": {
        "sklearn": {},
        "torch": {
            "cat_21": {
                "variable": {
                    "value": "grad1_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad1_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "grad2_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad2_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dot_23": {
                "input": {
                    "value": "grad1_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad1_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "grad2_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad2_list, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_23": {
                "input": {
                    "value": "grad2_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad2_list, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GMM-VGAE/model.py": {
        "sklearn": {},
        "torch": {}
    },
    "GMM-VGAE/preprocessing.py": {
        "sklearn": {},
        "torch": {}
    },
    "R-DGAE/main_eu_air.py": {
        "sklearn": {},
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/metrics.py": {
        "sklearn": {},
        "torch": {
            "cat_21": {
                "variable": {
                    "value": "grad1_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad1_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "grad2_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad2_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dot_23": {
                "input": {
                    "value": "grad1_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad1_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "grad2_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad2_list, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_23": {
                "input": {
                    "value": "grad2_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad2_list, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "R-DGAE/model_brazil_air.py": {
        "sklearn": {
            "accuracy_score_130": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_132": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_133": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_134": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_135": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_136": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_137": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_141": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_142": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_223": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_255": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_370": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "one_hot_72": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.argmax(q, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "q.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_180": {
                "variable": {
                    "value": "self.cluster_centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_cluster_centers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(self.cluster_number, self.embedding_dimension, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "cluster_centers",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_183": {
                "variable": {
                    "value": "norm_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(inputs.unsqueeze(1) - self.cluster_centers) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_209": {
                "variable": {
                    "value": "self.kl_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_236": {
                "variable": {
                    "value": "loss_recons",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_252": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.089)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9, weight_decay=0.01)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_338": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_391": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "initial_cluster_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.cluster_number",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_213": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_228": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_247": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.089",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "numerator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + norm_squared / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "numerator ** power",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_215": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_237": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_245": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_249": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_338": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encode(features, adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_72": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_217": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_251": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/model_citeseer.py": {
        "sklearn": {
            "accuracy_score_99": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_101": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_102": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_103": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_104": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_105": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_106": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_110": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_111": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_188": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_274": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "one_hot_58": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.argmax(q, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "q.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_134": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_149": {
                "variable": {
                    "value": "self.cluster_centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_cluster_centers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(self.cluster_number, self.embedding_dimension, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "cluster_centers",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_152": {
                "variable": {
                    "value": "norm_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(inputs.unsqueeze(1) - self.cluster_centers) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_178": {
                "variable": {
                    "value": "self.kl_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_201": {
                "variable": {
                    "value": "loss_recons",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_214": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9, weight_decay=0.01)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_270": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_295": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "initial_cluster_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.cluster_number",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_182": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_193": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_209": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_156": {
                "input": {
                    "value": "numerator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + norm_squared / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "numerator ** power",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_184": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_202": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_207": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_211": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_270": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encode(features, adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_58": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_186": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_213": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/model_cora.py": {
        "sklearn": {
            "accuracy_score_101": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_103": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_104": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_105": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_106": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_107": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_108": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_112": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_113": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_191": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_278": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "one_hot_59": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.argmax(q, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "q.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_136": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.cluster_centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_cluster_centers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(self.cluster_number, self.embedding_dimension, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "cluster_centers",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_155": {
                "variable": {
                    "value": "norm_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(inputs.unsqueeze(1) - self.cluster_centers) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_181": {
                "variable": {
                    "value": "self.kl_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_204": {
                "variable": {
                    "value": "loss_recons",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_217": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9, weight_decay=0.01)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_274": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_299": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "initial_cluster_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.cluster_number",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_185": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_196": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_212": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_159": {
                "input": {
                    "value": "numerator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + norm_squared / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "numerator ** power",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_187": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_205": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_210": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_214": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_274": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encode(features, adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_28": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_189": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_216": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/model_eu_air.py": {
        "sklearn": {
            "accuracy_score_131": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_133": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_134": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_135": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_136": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_137": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_138": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_142": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_143": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_225": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_259": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_369": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "one_hot_72": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.argmax(q, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "q.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_166": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_181": {
                "variable": {
                    "value": "self.cluster_centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_cluster_centers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(self.cluster_number, self.embedding_dimension, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "cluster_centers",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_184": {
                "variable": {
                    "value": "norm_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(inputs.unsqueeze(1) - self.cluster_centers) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_210": {
                "variable": {
                    "value": "self.kl_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_239": {
                "variable": {
                    "value": "loss_recons",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_255": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9, weight_decay=0.01)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_337": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_390": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "initial_cluster_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.cluster_number",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_214": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_230": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_250": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "numerator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + norm_squared / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "numerator ** power",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_216": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_240": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_248": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_252": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_337": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encode(features, adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_72": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_218": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_254": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/model_pubmed.py": {
        "sklearn": {
            "accuracy_score_100": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_102": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_103": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_104": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_105": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_106": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_107": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_111": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_112": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_189": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_276": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "one_hot_58": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.argmax(q, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "q.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_134": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.cluster_centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_cluster_centers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(self.cluster_number, self.embedding_dimension, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "cluster_centers",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_153": {
                "variable": {
                    "value": "norm_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(inputs.unsqueeze(1) - self.cluster_centers) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_179": {
                "variable": {
                    "value": "self.kl_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_202": {
                "variable": {
                    "value": "loss_recons",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_215": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.001)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ],
                        [
                            "SGD(self.parameters(), lr=lr, momentum=0.9, weight_decay=0.01)",
                            "Call"
                        ],
                        [
                            "RMSprop(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_272": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_297": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "initial_cluster_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.cluster_number",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_183": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_194": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_210": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_157": {
                "input": {
                    "value": "numerator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + norm_squared / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "numerator ** power",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_185": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_203": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_208": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_212": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_272": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encode(features, adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_58": {
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + np.sum(np.square(np.expand_dims(X, 1) - centers), axis=2) / alpha)",
                            "BinOp"
                        ],
                        [
                            "q ** ((alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.transpose(q) / np.sum(q, axis=1))",
                            "Call"
                        ],
                        [
                            "q_mat(emb, centers_emb, alpha=1.0)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ],
                        [
                            "self.assignment(emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_187": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_214": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/model_us_air.py": {
        "sklearn": {},
        "torch": {}
    },
    "R-DGAE/preprocessing.py": {
        "sklearn": {},
        "torch": {}
    },
    "R-GMM-VGAE/metrics.py": {
        "sklearn": {},
        "torch": {
            "cat_21": {
                "variable": {
                    "value": "grad1_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad1_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "grad2_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad2_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dot_23": {
                "input": {
                    "value": "grad1_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad1_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "grad2_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad2_list, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_23": {
                "input": {
                    "value": "grad2_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(grad2_list, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "R-GMM-VGAE/model_brazil_air.py": {
        "sklearn": {
            "accuracy_score_97": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_99": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_100": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_101": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_102": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_103": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_104": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_108": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_109": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GaussianMixture_158": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_191": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_25": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.nClusters) / self.nClusters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.mu_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.log_sigma2_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_156": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "self.pi.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.weights_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "self.mu_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.means_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_169": {
                "variable": {
                    "value": "self.log_sigma2_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(gmm.covariances_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_215": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_222": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.089",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_223": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.089)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_289": {
                "variable": {
                    "value": "gaussian_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_295": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_153": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "gmm.covariances_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_177": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj + sp.eye(adj.shape[0])",
                            "BinOp"
                        ],
                        [
                            "sparse_to_tuple(adj_label)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(adj_label[0].T), torch.FloatTensor(adj_label[1]), torch.Size(adj_label[2]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_179": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(emb, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_181": {
                "input": {
                    "value": "torch.sum(yita_c * torch.sum(log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0)), 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_185": {
                "input": {
                    "value": "torch.sum(1 + z_sigma2_log, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_221": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "np.log(np.pi * 2) + log_sigma2 + (x - mu).pow(2) / torch.exp(log_sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_281": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(z, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_295": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_24": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_163": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_181": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "1 + z_sigma2_log",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_290": {
                "input": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_179": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_281": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_185": {
                "input": {
                    "value": "pi.unsqueeze(0) / yita_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_273": {
                "input": {
                    "value": "log_sigma2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_182": {
                "input": {
                    "value": "z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_183": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/model_citeseer.py": {
        "sklearn": {
            "accuracy_score_96": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_98": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_99": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_100": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_101": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_102": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_103": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_107": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_108": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GaussianMixture_156": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_189": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_24": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_149": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.nClusters) / self.nClusters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.mu_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.log_sigma2_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_154": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "self.pi.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.weights_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "self.mu_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.means_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_167": {
                "variable": {
                    "value": "self.log_sigma2_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(gmm.covariances_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_213": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.089",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_221": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.089)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_286": {
                "variable": {
                    "value": "gaussian_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_292": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_267": {
                "tensors": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_150": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "gmm.covariances_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_175": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj + sp.eye(adj.shape[0])",
                            "BinOp"
                        ],
                        [
                            "sparse_to_tuple(adj_label)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(adj_label[0].T), torch.FloatTensor(adj_label[1]), torch.Size(adj_label[2]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_177": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(emb, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_179": {
                "input": {
                    "value": "torch.sum(yita_c * torch.sum(log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0)), 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_183": {
                "input": {
                    "value": "torch.sum(1 + z_sigma2_log, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_219": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_270": {
                "input": {
                    "value": "np.log(np.pi * 2) + log_sigma2 + (x - mu).pow(2) / torch.exp(log_sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_278": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(z, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_292": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_23": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_149": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_161": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_179": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "1 + z_sigma2_log",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_287": {
                "input": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_278": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_183": {
                "input": {
                    "value": "pi.unsqueeze(0) / yita_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_270": {
                "input": {
                    "value": "log_sigma2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_180": {
                "input": {
                    "value": "z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_181": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/model_cora.py": {
        "sklearn": {
            "accuracy_score_105": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_107": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_108": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_109": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_110": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_111": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_112": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_116": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_117": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GaussianMixture_152": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_185": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_24": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.nClusters) / self.nClusters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.mu_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.log_sigma2_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "self.pi.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.weights_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "self.mu_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.means_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_163": {
                "variable": {
                    "value": "self.log_sigma2_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(gmm.covariances_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_209": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_216": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_217": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_282": {
                "variable": {
                    "value": "gaussian_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_288": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_146": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_147": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "gmm.covariances_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_171": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj + sp.eye(adj.shape[0])",
                            "BinOp"
                        ],
                        [
                            "sparse_to_tuple(adj_label)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(adj_label[0].T), torch.FloatTensor(adj_label[1]), torch.Size(adj_label[2]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_173": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(emb, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_175": {
                "input": {
                    "value": "torch.sum(yita_c * torch.sum(log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0)), 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_179": {
                "input": {
                    "value": "torch.sum(1 + z_sigma2_log, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_215": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "np.log(np.pi * 2) + log_sigma2 + (x - mu).pow(2) / torch.exp(log_sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_274": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(z, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_288": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_23": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_145": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_157": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_175": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_179": {
                "input": {
                    "value": "1 + z_sigma2_log",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_283": {
                "input": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_173": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_274": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_179": {
                "input": {
                    "value": "pi.unsqueeze(0) / yita_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_266": {
                "input": {
                    "value": "log_sigma2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_176": {
                "input": {
                    "value": "z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_177": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/model_europe_air.py": {
        "sklearn": {
            "accuracy_score_97": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_99": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_100": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_101": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_102": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_103": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_104": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_108": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_109": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GaussianMixture_158": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_191": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_25": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.nClusters) / self.nClusters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.mu_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.log_sigma2_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_156": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "self.pi.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.weights_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "self.mu_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.means_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_169": {
                "variable": {
                    "value": "self.log_sigma2_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(gmm.covariances_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_215": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_222": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_223": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_291": {
                "variable": {
                    "value": "gaussian_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_297": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_272": {
                "tensors": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_153": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "gmm.covariances_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_177": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj + sp.eye(adj.shape[0])",
                            "BinOp"
                        ],
                        [
                            "sparse_to_tuple(adj_label)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(adj_label[0].T), torch.FloatTensor(adj_label[1]), torch.Size(adj_label[2]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_179": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(emb, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_181": {
                "input": {
                    "value": "torch.sum(yita_c * torch.sum(log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0)), 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_185": {
                "input": {
                    "value": "torch.sum(1 + z_sigma2_log, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_221": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_275": {
                "input": {
                    "value": "np.log(np.pi * 2) + log_sigma2 + (x - mu).pow(2) / torch.exp(log_sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_283": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(z, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_297": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_24": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_163": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_181": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "1 + z_sigma2_log",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_292": {
                "input": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_179": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_283": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_185": {
                "input": {
                    "value": "pi.unsqueeze(0) / yita_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_275": {
                "input": {
                    "value": "log_sigma2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_182": {
                "input": {
                    "value": "z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_183": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/model_pubmed.py": {
        "sklearn": {
            "accuracy_score_92": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_94": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_95": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_96": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_97": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_98": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_99": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_103": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_104": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GaussianMixture_152": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_184": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_24": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.nClusters) / self.nClusters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.mu_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.log_sigma2_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "self.pi.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.weights_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "self.mu_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.means_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_163": {
                "variable": {
                    "value": "self.log_sigma2_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(gmm.covariances_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_208": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_215": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_216": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_282": {
                "variable": {
                    "value": "gaussian_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_288": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_146": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_147": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "gmm.covariances_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_171": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj + sp.eye(adj.shape[0])",
                            "BinOp"
                        ],
                        [
                            "sparse_to_tuple(adj_label)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(adj_label[0].T), torch.FloatTensor(adj_label[1]), torch.Size(adj_label[2]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_172": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(emb, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_174": {
                "input": {
                    "value": "torch.sum(yita_c * torch.sum(log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0)), 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_177": {
                "input": {
                    "value": "torch.sum(1 + z_sigma2_log, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_214": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "np.log(np.pi * 2) + log_sigma2 + (x - mu).pow(2) / torch.exp(log_sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_274": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(z, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_288": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_23": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_145": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_157": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_174": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_177": {
                "input": {
                    "value": "1 + z_sigma2_log",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_283": {
                "input": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_172": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_274": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "pi.unsqueeze(0) / yita_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_266": {
                "input": {
                    "value": "log_sigma2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_175": {
                "input": {
                    "value": "z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_176": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/model_us_air.py": {
        "sklearn": {
            "accuracy_score_97": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_99": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_100": {
                "variable": {
                    "value": "precision_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_101": {
                "variable": {
                    "value": "recall_macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_102": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_103": {
                "variable": {
                    "value": "precision_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_104": {
                "variable": {
                    "value": "recall_micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_108": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_109": {
                "variable": {
                    "value": "adjscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GaussianMixture_158": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NearestNeighbors_191": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_25": {
                "data": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(input_dim, output_dim) * 2 * init_range - init_range",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tolil()",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.mm(adj, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.nClusters) / self.nClusters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.mu_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.log_sigma2_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nClusters, self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_156": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "self.pi.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.weights_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "self.mu_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.means_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_169": {
                "variable": {
                    "value": "self.log_sigma2_c.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(gmm.covariances_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_215": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_222": {
                "variable": {
                    "value": "opti",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_223": {
                "variable": {
                    "value": "lr_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opti",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(self.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "Adam(self.parameters(), lr=lr, weight_decay=0.01)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_292": {
                "variable": {
                    "value": "gaussian_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_298": {
                "variable": {
                    "value": "A_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_273": {
                "tensors": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_153": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "gmm.covariances_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_177": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj + sp.eye(adj.shape[0])",
                            "BinOp"
                        ],
                        [
                            "sparse_to_tuple(adj_label)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(adj_label[0].T), torch.FloatTensor(adj_label[1]), torch.Size(adj_label[2]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_179": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(emb, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_181": {
                "input": {
                    "value": "torch.sum(yita_c * torch.sum(log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0)), 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_185": {
                "input": {
                    "value": "torch.sum(1 + z_sigma2_log, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_221": {
                "f": {
                    "value": "save_path + dataset + '/pretrain/model.pk'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_276": {
                "input": {
                    "value": "np.log(np.pi * 2) + log_sigma2 + (x - mu).pow(2) / torch.exp(log_sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_284": {
                "input": {
                    "value": "torch.log(pi.unsqueeze(0)) + self.gaussian_pdfs_log(z, mu_c, log_sigma2_c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_298": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_24": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "self.nClusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_163": {
                "input": {
                    "value": "x_.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj_label.to_dense().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(weight_mask.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_181": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0) + torch.exp(z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)) + (z_mu.unsqueeze(1) - mu_c.unsqueeze(0)).pow(2) / torch.exp(log_sigma2_c.unsqueeze(0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "1 + z_sigma2_log",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_293": {
                "input": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_179": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_284": {
                "input": {
                    "value": "pi.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_185": {
                "input": {
                    "value": "pi.unsqueeze(0) / yita_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_276": {
                "input": {
                    "value": "log_sigma2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_182": {
                "input": {
                    "value": "z_sigma2_log.unsqueeze(1) - log_sigma2_c.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_183": {
                "input": {
                    "value": "log_sigma2_c.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/preprocessing.py": {
        "sklearn": {},
        "torch": {}
    },
    "DGAE/datasets.py": {
        "torch": {
            "from_numpy_284": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DGAE/main_brazil_air.py": {
        "torch": {
            "ones_55": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DGAE/main_citeseer.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DGAE/main_cora.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DGAE/main_eu_air.py": {
        "torch": {
            "ones_56": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DGAE/main_pubmed.py": {
        "torch": {
            "ones_52": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DGAE/main_us_air.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GMM-VGAE/datasets.py": {
        "torch": {
            "from_numpy_285": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_286": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "GMM-VGAE/main_brazil_air.py": {
        "torch": {
            "ones_51": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GMM-VGAE/main_citeseer.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GMM-VGAE/main_cora.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GMM-VGAE/main_eu_air.py": {
        "torch": {
            "ones_52": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GMM-VGAE/main_pubmed.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GMM-VGAE/main_us_air.py": {
        "torch": {
            "ones_55": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/main_brazil_air.py": {
        "torch": {
            "ones_52": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/main_citeseer.py": {
        "torch": {
            "ones_55": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/main_cora.py": {
        "torch": {
            "ones_55": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/main_pubmed.py": {
        "torch": {
            "ones_55": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-DGAE/main_us_air.py": {
        "torch": {
            "ones_52": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/datasets.py": {
        "torch": {
            "from_numpy_283": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_284": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/main_brazil_air.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/main_citeseer.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/main_cora.py": {
        "torch": {
            "ones_52": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/main_eu_air.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/main_pubmed.py": {
        "torch": {
            "ones_52": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "R-GMM-VGAE/main_us_air.py": {
        "torch": {
            "ones_52": {
                "variable": {
                    "value": "weight_tensor_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight_mask_orig.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}