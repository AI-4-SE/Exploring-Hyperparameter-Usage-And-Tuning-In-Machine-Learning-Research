{
    "dataset/keypoints_dataset.py": {
        "torch": {
            "stack_161": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bx - ctx_ * bw - x, x - (bx + bw * (1 + ctx_)), by - ctx_ * bh - y, y - (by + bh * (1 + ctx_))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_165": {
                "input": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([bx - ctx_ * bw - x, x - (bx + bw * (1 + ctx_)), by - ctx_ * bh - y, y - (by + bh * (1 + ctx_))])",
                            "Call"
                        ],
                        [
                            "torch.relu(err) * vis[None].float()",
                            "BinOp"
                        ],
                        [
                            "torch.stack((torch.max(err[0], err[1]), torch.max(err[2], err[3]))).max(dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_166": {
                "tensors": {
                    "value": "(torch.max(err[0], err[1]), torch.max(err[2], err[3]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_166": {
                "input": {
                    "value": "err[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_167": {
                "input": {
                    "value": "err[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {}
    },
    "evaluate.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_zoo(dataset_name=dataset_name, sets_to_load=('val',), force_download=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiment.py": {
        "torch": {
            "DataLoader_191": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_zoo(**cfg.DATASET)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "p_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model._get_param_groups(lr, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "[{'params': allprm, 'lr': lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_144": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(p_groups, lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adagrad(p_groups, lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(p_groups, lr=lr, betas=betas, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "init_optimizer(model, optimizer_state=optimizer_state, **cfg.SOLVER)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[30",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_177": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_198": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_zoo(**cfg.DATASET)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_zoo(**cfg.DATASET)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "p_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model._get_param_groups(lr, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "[{'params': allprm, 'lr': lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "p_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model._get_param_groups(lr, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "[{'params': allprm, 'lr': lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv2d_581": {
                "variable": {
                    "value": "cnv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.make_trunk(dim_in=self.n_keypoints * 3, n_fully_connected=self.n_fully_connected, n_layers=self.n_layers)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_251": {
                "variable": {
                    "value": "focal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(K[:, 0, 0], K[:, 1, 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_257": {
                "variable": {
                    "value": "kp_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "kp_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kp_loc - K[:, 0:2, 2:3]",
                            "BinOp"
                        ],
                        [
                            "kp_loc / focal[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(K, kp_loc)",
                            "Call"
                        ],
                        [
                            "kp_loc_norm * (1.0 / rescale)",
                            "BinOp"
                        ],
                        [
                            "kp_loc + kp_mean[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_338": {
                "variable": {
                    "value": "l1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kp_loc_flatten, kp_vis_in)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_445": {
                "variable": {
                    "value": "rotated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_rand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rand_rot(ba, dtype=dtype, max_rot_angle=float(self.z_augment_rot_angle), axes=(0, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.eye(3).type(dtype)[None].repeat((ba, 1, 1))",
                            "Call"
                        ],
                        [
                            "rand_rot(ba * n_sample, dtype=dtype, max_rot_angle=self.canonicalization['rot_angle'], axes=(1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "unrotated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_canonical.repeat(n_sample, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_499": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses_weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[preds[k] * float(w) for (k, w) in self.loss_weights.items() if k in preds]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sum_499": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_602": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_620": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_624": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_628": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_631": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.scale_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.n_fully_connected, 3, std=weight_init_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.make_trunk(dim_in=self.n_keypoints * 3, n_fully_connected=self.canonicalization['n_fully_connected'], n_layers=self.canonicalization['n_layers'])",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kp_loc * depth, depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_311": {
                "variable": {
                    "value": "kp_loc_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_rand[:, 0:2, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kp_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kp_loc - K[:, 0:2, 2:3]",
                            "BinOp"
                        ],
                        [
                            "kp_loc / focal[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(K, kp_loc)",
                            "Call"
                        ],
                        [
                            "kp_loc_norm * (1.0 / rescale)",
                            "BinOp"
                        ],
                        [
                            "kp_loc + kp_mean[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ],
                        [
                            "kp_loc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_323": {
                "variable": {
                    "value": "kp_loc_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kp_loc_in, torch.bmm(R_rand_eq[:, 0:2, 0:2], kp_loc_in))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.phi(l1_[:, :, None, None]) for l1_ in l1_input.split(ba, dim=0)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_398": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_rand_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R_rand.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "so3_exponential_map(R_log)",
                            "Call"
                        ],
                        [
                            "torch.bmm(R_rand_inv, R)",
                            "Call"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_400": {
                "variable": {
                    "value": "shape_camera_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_rand_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R_rand.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shape_camera_coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_similarity_t(shape_canonical, R, T, scale)",
                            "Call"
                        ],
                        [
                            "torch.bmm(R_rand_inv, shape_camera_coord)",
                            "Call"
                        ],
                        [
                            "shape_camera_coord + T_amin[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "shape_camera_coord * class_mask[:, None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_407": {
                "variable": {
                    "value": "T_amin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_amin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "argmin_translation(projection, kp_loc_orig, v=kp_vis)",
                            "Call"
                        ],
                        [
                            "Fu.pad(T_amin, (0, 1), 'constant', float(0))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "float(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_599": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_225": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.camera_projection(preds['phi']['shape_camera_coord'])",
                            "Call"
                        ],
                        [
                            "shape[:, 2:3, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(depth, self.perspective_depth_threshold)",
                            "Call"
                        ],
                        [
                            "depth / rescale",
                            "BinOp"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "self.perspective_depth_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kp_loc, depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_426": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "so3_exponential_map(R_log)",
                            "Call"
                        ],
                        [
                            "torch.bmm(R_rand_inv, R)",
                            "Call"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "s[:, None, None] * S",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softplus_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_399": {
                "input": {
                    "value": "R_rand_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R_rand.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "T[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_325": {
                "input": {
                    "value": "R_rand_eq[:, 0:2, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kp_loc_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(R_rand[:, 0:2, 0:2], kp_loc)",
                            "Call"
                        ],
                        [
                            "kp_loc_orig",
                            "variable"
                        ],
                        [
                            "torch.cat((kp_loc_in, torch.bmm(R_rand_eq[:, 0:2, 0:2], kp_loc_in)), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_313": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_377": {
                "data": {
                    "value": "[1.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_556": {
                "ndarray": {
                    "value": "pcl['pred'][None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_557": {
                "ndarray": {
                    "value": "pcl['gt'][None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tools/cache_preds.py": {
        "torch": {
            "cat_109": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch in enumerate(loader)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch in enumerate(loader)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch in enumerate(loader)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/functions.py": {
        "torch": {
            "clamp_12": {
                "variable": {
                    "value": "visibility_mass",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp_vis.sum(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_56": {
                "variable": {
                    "value": "vmass",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_71": {
                "input": {
                    "value": "xtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x * x).sum(1).sum(1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_29": {
                "input": {
                    "value": "mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "input": {
                    "value": "mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_80": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "float(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_io.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "flmodel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s.pth' % fl",
                            "BinOp"
                        ],
                        [
                            "get_model_path(fl)",
                            "Call"
                        ],
                        [
                            "get_model_path(fl)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "flmodel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s.pth' % fl",
                            "BinOp"
                        ],
                        [
                            "get_model_path(fl)",
                            "Call"
                        ],
                        [
                            "get_model_path(fl)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "flopt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_opt.pth' % fl",
                            "BinOp"
                        ],
                        [
                            "get_optimizer_path(fl)",
                            "Call"
                        ],
                        [
                            "get_optimizer_path(fl)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "flopt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_opt.pth' % fl",
                            "BinOp"
                        ],
                        [
                            "get_optimizer_path(fl)",
                            "Call"
                        ],
                        [
                            "get_optimizer_path(fl)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/so3.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "rand_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_22": {
                "variable": {
                    "value": "rand_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((N, 3)).type(dtype).normal_()",
                            "Call"
                        ],
                        [
                            "axes[None, :] * rand_axis",
                            "BinOp"
                        ],
                        [
                            "Fu.normalize(rand_axis, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "rand_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_56": {
                "variable": {
                    "value": "phis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nrms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(log_rot * log_rot).sum(1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_56": {
                "variable": {
                    "value": "phis",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "log_rot.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "log_rot.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_63": {
                "input": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hat(log_rot)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hat(log_rot)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/utils.py": {
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "visuals/rotating_shape_video.py": {
        "torch": {
            "linspace_37": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "np.pi * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "fps * vlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_40": {
                "variable": {
                    "value": "shape_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "so3_exponential_map(log_rots)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shape[None].repeat(len(Rs), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_34": {
                "input": {
                    "value": "shape.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(0.95 * shape.numel())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}