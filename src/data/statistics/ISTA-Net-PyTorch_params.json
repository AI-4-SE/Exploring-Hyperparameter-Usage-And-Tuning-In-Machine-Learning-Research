{
    "TEST_CS_ISTA_Net.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_167": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ISTANet(layer_num)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Phi_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Phi_data['phi']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_273": {
                "variable": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Qinit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qinit_data['Qinit']",
                            "Subscript"
                        ],
                        [
                            "np.dot(X_YT, np.linalg.inv(Y_YT))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(1, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 33, 33)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_118": {
                "variable": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(x_forward)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.relu(torch.abs(x_forward) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "x_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_146": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "onelayer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_150": {
                "variable": {
                    "value": "PhiTPhi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_151": {
                "variable": {
                    "value": "PhiTb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Qinit, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_176": {
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (model_dir, epoch_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_298": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Img_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Icol",
                            "Name"
                        ]
                    ]
                }
            },
            "mm_302": {
                "variable": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Img_output)",
                            "Call"
                        ],
                        [
                            "batch_x.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_120": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_120": {
                "input": {
                    "value": "torch.abs(x_forward) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_150": {
                "input": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "input": {
                    "value": "Qinit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qinit_data['Qinit']",
                            "Subscript"
                        ],
                        [
                            "np.dot(X_YT, np.linalg.inv(Y_YT))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_302": {
                "input": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_112": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "PhiTPhi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.transpose(Phi, 0, 1), Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_120": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TEST_CS_ISTA_Net_plus.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_177": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ISTANetplus(layer_num)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_281": {
                "variable": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Phi_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Phi_data['phi']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Qinit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qinit_data['Qinit']",
                            "Subscript"
                        ],
                        [
                            "np.dot(X_YT, np.linalg.inv(Y_YT))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(1, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "x_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 33, 33)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x_input, self.conv_D, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(x_forward)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.relu(torch.abs(x_forward) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "variable": {
                    "value": "x_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_backward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_backward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_138": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_140": {
                "variable": {
                    "value": "x_D_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_156": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "onelayer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_160": {
                "variable": {
                    "value": "PhiTPhi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_161": {
                "variable": {
                    "value": "PhiTb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_163": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Qinit, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_188": {
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (model_dir, epoch_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_310": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Img_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Icol",
                            "Name"
                        ]
                    ]
                }
            },
            "mm_314": {
                "variable": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Img_output)",
                            "Call"
                        ],
                        [
                            "batch_x.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_126": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_126": {
                "input": {
                    "value": "torch.abs(x_forward) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "input": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "input": {
                    "value": "Qinit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qinit_data['Qinit']",
                            "Subscript"
                        ],
                        [
                            "np.dot(X_YT, np.linalg.inv(Y_YT))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_314": {
                "input": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_116": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, row - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "range(0, row_new - block_size + 1, block_size)",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "PhiTPhi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.transpose(Phi, 0, 1), Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_126": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TEST_MRI_CS_ISTA_Net_plus.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Phi_data['mask_matrix']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask_matrix).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Phi_data['mask_matrix']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask_matrix).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_189": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ISTANetplus(layer_num)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(1, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_136": {
                "variable": {
                    "value": "x_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_138": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x_input, self.conv_D, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_140": {
                "variable": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_142": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(x_forward)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.relu(torch.abs(x_forward) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_148": {
                "variable": {
                    "value": "x_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_backward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_backward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_152": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_154": {
                "variable": {
                    "value": "x_D_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "onelayer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_198": {
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (model_dir, epoch_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_243": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Img_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Icol",
                            "Name"
                        ]
                    ]
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fft2_89": {
                "variable": {
                    "value": "x_in_k_space",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "real_91": {
                "variable": {
                    "value": "masked_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.ifft2(masked_x_in_k_space)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_104": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_105": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fft_106": {
                "variable": {
                    "value": "fftz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifft_107": {
                "variable": {
                    "value": "z_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fftz * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sign_142": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_142": {
                "input": {
                    "value": "torch.abs(x_forward) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ifft2_91": {
                "input": {
                    "value": "masked_x_in_k_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_in_k_space * full_mask.view(1, 1, *full_mask.shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_142": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Train_CS_ISTA_Net.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_159": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ISTANet(layer_num)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Phi_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Phi_data['phi']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "variable": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Qinit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qinit_data['Qinit']",
                            "Subscript"
                        ],
                        [
                            "np.dot(X_YT, np.linalg.inv(Y_YT))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "rand_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "RandomDataset(Training_labels, nrtrain)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "rand_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "RandomDataset(Training_labels, nrtrain)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(1, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 33, 33)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_110": {
                "variable": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(x_forward)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.relu(torch.abs(x_forward) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_116": {
                "variable": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "x_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "onelayer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_142": {
                "variable": {
                    "value": "PhiTPhi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_143": {
                "variable": {
                    "value": "PhiTb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_145": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Qinit, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_223": {
                "variable": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_228": {
                "variable": {
                    "value": "loss_discrepancy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x_output - batch_x, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_230": {
                "variable": {
                    "value": "loss_constraint",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(loss_layers_sym[0], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_206": {
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (pre_model_dir, start_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_252": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (model_dir, epoch_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_112": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_112": {
                "input": {
                    "value": "torch.abs(x_forward) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "input": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "input": {
                    "value": "Qinit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qinit_data['Qinit']",
                            "Subscript"
                        ],
                        [
                            "np.dot(X_YT, np.linalg.inv(Y_YT))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_223": {
                "input": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_228": {
                "input": {
                    "value": "x_output - batch_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_230": {
                "input": {
                    "value": "loss_layers_sym[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_232": {
                "input": {
                    "value": "torch.pow(loss_layers_sym[k + 1], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_237": {
                "input": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor([0.01]).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "loss_constraint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(torch.pow(loss_layers_sym[0], 2))",
                            "Call"
                        ],
                        [
                            "loss_constraint + torch.mean(torch.pow(loss_layers_sym[k + 1], 2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_101": {},
            "mm_104": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "PhiTPhi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.transpose(Phi, 0, 1), Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_232": {
                "input": {
                    "value": "loss_layers_sym[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_112": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Train_CS_ISTA_Net_plus.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_169": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ISTANetplus(layer_num)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_204": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Phi_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Phi_data['phi']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_222": {
                "variable": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Qinit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qinit_data['Qinit']",
                            "Subscript"
                        ],
                        [
                            "np.dot(X_YT, np.linalg.inv(Y_YT))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_198": {
                "variable": {
                    "value": "rand_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "RandomDataset(Training_labels, nrtrain)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "rand_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "RandomDataset(Training_labels, nrtrain)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(1, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "x_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 33, 33)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x_input, self.conv_D, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_116": {
                "variable": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(x_forward)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.relu(torch.abs(x_forward) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "x_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_backward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_backward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_132": {
                "variable": {
                    "value": "x_D_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "onelayer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_152": {
                "variable": {
                    "value": "PhiTPhi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_153": {
                "variable": {
                    "value": "PhiTb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_155": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Qinit, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_233": {
                "variable": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_238": {
                "variable": {
                    "value": "loss_discrepancy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x_output - batch_x, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_240": {
                "variable": {
                    "value": "loss_constraint",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(loss_layers_sym[0], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_216": {
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (pre_model_dir, start_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (model_dir, epoch_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_118": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_118": {
                "input": {
                    "value": "torch.abs(x_forward) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_152": {
                "input": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_155": {
                "input": {
                    "value": "Qinit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qinit_data['Qinit']",
                            "Subscript"
                        ],
                        [
                            "np.dot(X_YT, np.linalg.inv(Y_YT))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "input": {
                    "value": "Phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_238": {
                "input": {
                    "value": "x_output - batch_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_240": {
                "input": {
                    "value": "loss_layers_sym[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_242": {
                "input": {
                    "value": "torch.pow(loss_layers_sym[k + 1], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_247": {
                "input": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor([0.01]).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "loss_constraint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(torch.pow(loss_layers_sym[0], 2))",
                            "Call"
                        ],
                        [
                            "loss_constraint + torch.mean(torch.pow(loss_layers_sym[k + 1], 2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_105": {},
            "mm_108": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "PhiTPhi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.transpose(Phi, 0, 1), Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_242": {
                "input": {
                    "value": "loss_layers_sym[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_118": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Train_MRI_CS_ISTA_Net_plus.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Phi_data['mask_matrix']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask_matrix).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Phi_data['mask_matrix']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask_matrix).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_182": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ISTANetplus(layer_num)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_216": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_210": {
                "variable": {
                    "value": "rand_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "RandomDataset(Training_labels, nrtrain)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_213": {
                "variable": {
                    "value": "rand_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "RandomDataset(Training_labels, nrtrain)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(1, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_129": {
                "variable": {
                    "value": "x_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x_input, self.conv_D, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_133": {
                "variable": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(x_forward)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.relu(torch.abs(x_forward) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_139": {
                "variable": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_141": {
                "variable": {
                    "value": "x_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_backward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_backward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_147": {
                "variable": {
                    "value": "x_D_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "onelayer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_247": {
                "variable": {
                    "value": "loss_discrepancy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x_output - batch_x, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_249": {
                "variable": {
                    "value": "loss_constraint",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(loss_layers_sym[0], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fft2_82": {
                "variable": {
                    "value": "x_in_k_space",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "real_84": {
                "variable": {
                    "value": "masked_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.ifft2(masked_x_in_k_space)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x - self.lambda_step * fft_forback(x, mask)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "PhiTb",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_98": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fft_99": {
                "variable": {
                    "value": "fftz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifft_100": {
                "variable": {
                    "value": "z_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fftz * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_228": {
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (pre_model_dir, start_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./%s/net_params_%d.pkl' % (model_dir, epoch_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_135": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_135": {
                "input": {
                    "value": "torch.abs(x_forward) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_247": {
                "input": {
                    "value": "x_output - batch_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_249": {
                "input": {
                    "value": "loss_layers_sym[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_251": {
                "input": {
                    "value": "torch.pow(loss_layers_sym[k + 1], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_256": {
                "input": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor([0.01]).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "loss_constraint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(torch.pow(loss_layers_sym[0], 2))",
                            "Call"
                        ],
                        [
                            "loss_constraint + torch.mean(torch.pow(loss_layers_sym[k + 1], 2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ifft2_84": {
                "input": {
                    "value": "masked_x_in_k_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_in_k_space * full_mask.view(1, 1, *full_mask.shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_122": {},
            "pow_251": {
                "input": {
                    "value": "loss_layers_sym[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_135": {
                "input": {
                    "value": "x_forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}