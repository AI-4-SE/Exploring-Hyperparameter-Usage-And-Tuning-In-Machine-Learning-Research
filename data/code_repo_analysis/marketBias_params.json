{
    "src/main.py": {
        "tensorflow": {}
    },
    "src/model.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "user_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "user_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_user, HIDDEN_DIM]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-0.01, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "item_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "item_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_item, HIDDEN_DIM]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-0.01, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_28": {
                "variable": {
                    "value": "u_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "user_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('user_emb', [n_user, HIDDEN_DIM], initializer=tf.random_uniform_initializer(-0.01, 0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_29": {
                "variable": {
                    "value": "i_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "item_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb', [n_item, HIDDEN_DIM], initializer=tf.random_uniform_initializer(-0.01, 0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ],
                        [
                            "i in range(0, N_BATCH * BATCH_SIZE, BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "i in range(0, dataInput.shape[0], BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_30": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensordot_31": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb, u)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "item_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb', [n_item, HIDDEN_DIM], initializer=tf.random_uniform_initializer(-0.01, 0.01))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_33": {
                "variable": {
                    "value": "l2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_mean(tf.multiply(u_emb, u_emb)), tf.reduce_mean(tf.multiply(i_emb, i_emb))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "user_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "user_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_user]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "item_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "item_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_item]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_41": {
                "variable": {
                    "value": "i_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "item_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('item_bias', [n_item], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ],
                        [
                            "i in range(0, N_BATCH * BATCH_SIZE, BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "i in range(0, dataInput.shape[0], BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_42": {
                "variable": {
                    "value": "u_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "user_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('user_bias', [n_user], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "ai",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "au",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "aui",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_101": {
                "variable": {
                    "value": "x_ai",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_item_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.item_attr_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_102": {
                "variable": {
                    "value": "x_au",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "au",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_user_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.user_attr_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_103": {
                "variable": {
                    "value": "x_aui",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "aui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_user_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.user_attr_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_108": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-15",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_109": {
                "variable": {
                    "value": "fstats",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "item_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('item_bias', [n_item], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n_item]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_48": {
                "inputs": {
                    "value": "[tf.reduce_mean(tf.multiply(u_b, u_b)), tf.reduce_mean(tf.multiply(i_b, i_b))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_112": {
                "variable": {
                    "value": "zi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(diff, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_ai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ai, n_item_group)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "sum_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.expand_dims(diff, -1), x_ai)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "count_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x_ai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ai, n_item_group)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "variable": {
                    "value": "var_within_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(x_ai, diff_group_i * diff_group_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_135": {
                "variable": {
                    "value": "zu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(diff, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_au",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(au, n_user_group)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_137": {
                "variable": {
                    "value": "sum_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.expand_dims(diff, -1), x_au)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "variable": {
                    "value": "count_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x_au",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(au, n_user_group)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_148": {
                "variable": {
                    "value": "var_within_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(x_au, diff_group_u * diff_group_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_157": {
                "variable": {
                    "value": "zui",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(diff, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_aui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(aui, n_user_group)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_159": {
                "variable": {
                    "value": "sum_ui",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.expand_dims(diff, -1), x_aui)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "count_ui",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x_aui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(aui, n_user_group)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_170": {
                "variable": {
                    "value": "var_within_ui",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(x_aui, diff_group_ui * diff_group_ui)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_30": {
                "x": {
                    "value": "u_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb, u)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(item_emb, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "tf.multiply(diff, diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_25": {
                "minval": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_27": {
                "minval": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, u_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "tf.multiply(i_emb, i_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_37": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_39": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_44": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "input_tensor": {
                    "value": "tf.multiply(u_b, u_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "input_tensor": {
                    "value": "tf.multiply(i_b, i_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_53": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - y",
                            "BinOp"
                        ],
                        [
                            "self.mf_block()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - y",
                            "BinOp"
                        ],
                        [
                            "self.mf_block()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_112": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - y",
                            "BinOp"
                        ],
                        [
                            "self.mf_block()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "count_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_ai, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "tf.multiply(count_i, mean_diff_i * mean_diff_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "input": {
                    "value": "mean_group_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum_i / (count_i + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_126": {
                "x": {
                    "value": "x_ai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ai, n_item_group)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diff_group_i * diff_group_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_135": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - y",
                            "BinOp"
                        ],
                        [
                            "self.mf_block()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "count_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_au, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "tf.multiply(count_u, mean_diff_u * mean_diff_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_147": {
                "input": {
                    "value": "mean_group_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum_u / (count_u + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_149": {
                "x": {
                    "value": "x_au",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(au, n_user_group)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diff_group_u * diff_group_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - y",
                            "BinOp"
                        ],
                        [
                            "self.mf_block()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "count_ui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_aui, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_166": {
                "input_tensor": {
                    "value": "tf.multiply(count_ui, mean_diff_ui * mean_diff_ui)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "mean_group_ui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum_ui / (count_ui + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_171": {
                "x": {
                    "value": "x_aui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(aui, n_user_group)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diff_group_ui * diff_group_ui",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_33": {
                "x": {
                    "value": "u_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb, u)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb, u)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_34": {
                "x": {
                    "value": "i_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(item_emb, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(item_emb, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_48": {
                "x": {
                    "value": "u_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_bias, u)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_bias, u)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_49": {
                "x": {
                    "value": "i_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(item_bias, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(item_bias, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_121": {
                "x": {
                    "value": "count_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_ai, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_diff_i * mean_diff_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_129": {
                "features": {
                    "value": "tf.reduce_sum(count_i) - n_item_group",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_144": {
                "x": {
                    "value": "count_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_au, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_diff_u * mean_diff_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_152": {
                "features": {
                    "value": "tf.reduce_sum(count_u) - n_user_group",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_166": {
                "x": {
                    "value": "count_ui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_aui, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_diff_ui * mean_diff_ui",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_174": {
                "features": {
                    "value": "tf.reduce_sum(count_ui) - n_user_group * n_item_group",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_129": {
                "input_tensor": {
                    "value": "count_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_ai, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_152": {
                "input_tensor": {
                    "value": "count_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_au, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_174": {
                "input_tensor": {
                    "value": "count_ui",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_aui, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils.py": {
        "tensorflow": {
            "ConfigProto_80": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_85": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_181": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_253": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_81": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}