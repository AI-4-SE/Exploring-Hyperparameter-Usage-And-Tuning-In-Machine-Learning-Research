{
    "batch_gen.py": {
        "torch": {
            "zeros_54": {
                "variable": {
                    "value": "batch_input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(batch_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "np.shape(batch_input[0])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(batch_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "batch_input_tensor[i, :, :np.shape(batch_input[i])[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "batch_target_tensor[i, :np.shape(batch_target[i])[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_60": {
                "variable": {
                    "value": "mask[i, :, :np.shape(batch_target[i])[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "np.shape(batch_target[i])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "len(batch_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(length_of_sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "centroid.py": {
        "torch": {
            "zeros_22": {
                "variable": {
                    "value": "centroid_source",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feat_s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "centroid_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feat_t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_31": {
                "input": {
                    "value": "feat_s[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "input": {
                    "value": "feat_t[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_19": {
                "input": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "Softmax_9": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_10": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_11": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(-softmax(pred) * logsoftmax(pred), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_17": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_18": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-softmax(pred_domain) * logsoftmax(pred_domain)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "wdist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(dist, dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_31": {
                "input": {
                    "value": "torch.abs(out1 - out2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(p1, s[0], dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(p1, proj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(s[1], dim_proj)",
                            "Call"
                        ],
                        [
                            "proj.to(p1.get_device())",
                            "Call"
                        ],
                        [
                            "proj * torch.rsqrt(torch.sum(torch.mul(proj, proj), 0, keepdim=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_42": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(p2, s[0], dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(p2, proj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(s[1], dim_proj)",
                            "Call"
                        ],
                        [
                            "proj.to(p1.get_device())",
                            "Call"
                        ],
                        [
                            "proj * torch.rsqrt(torch.sum(torch.mul(proj, proj), 0, keepdim=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_11": {
                "input": {
                    "value": "-softmax(pred) * logsoftmax(pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "-softmax(pred) * logsoftmax(pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_31": {
                "input": {
                    "value": "out1 - out2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_40": {
                "input": {
                    "value": "torch.sum(torch.mul(proj, proj), 0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_43": {
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(p1, s[0], dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(p1, proj)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_44": {
                "input": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(p2, s[0], dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(p2, proj)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_46": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p1 - p2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p1 - p2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_64": {
                "input": {
                    "value": "-dist_l2 / bandwidth_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_99": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx + yy - xy - yx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_40": {
                "input": {
                    "value": "torch.mul(proj, proj)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "dist_l2.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_40": {
                "input": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(s[1], dim_proj)",
                            "Call"
                        ],
                        [
                            "proj.to(p1.get_device())",
                            "Call"
                        ],
                        [
                            "proj * torch.rsqrt(torch.sum(torch.mul(proj, proj), 0, keepdim=True))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(s[1], dim_proj)",
                            "Call"
                        ],
                        [
                            "proj.to(p1.get_device())",
                            "Call"
                        ],
                        [
                            "proj * torch.rsqrt(torch.sum(torch.mul(proj, proj), 0, keepdim=True))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1538574472",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_16": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1538574472",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(SingleStageModel(num_layers, num_f_maps, num_classes, num_classes, self.DA_ens)) for s in range(num_stages - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.ad_net_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.ad_net_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "pred_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_d_source, pred_d_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "label_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_d_source, label_d_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "pred_d_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_d_source_video, pred_d_target_video)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "label_d_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_d_video_source, label_d_video_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stage1.conv_out(out_feat)",
                            "Call"
                        ],
                        [
                            "s.conv_out(out_feat)",
                            "Call"
                        ],
                        [
                            "self.ad_net_cls[0](self.ad_net_base[0](feat, beta_value))",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, num_frame, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "out.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, out_single_class.unsqueeze(1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.ad_net_video_cls[0](self.ad_net_video_base[0](feat, beta_value))",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, num_seg, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.ad_net_video_cls[0](self.ad_net_video_base[0](feat, beta_value))",
                            "Call"
                        ],
                        [
                            "self.video_order_cls(feat_concat)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv_dilated(x))",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_225": {
                "variable": {
                    "value": "prob_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.clone()",
                            "Call"
                        ],
                        [
                            "self.stage1.conv_out_2(out_feat)",
                            "Call"
                        ],
                        [
                            "out.clone()",
                            "Call"
                        ],
                        [
                            "s.conv_out_2(out_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_325": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "LogSoftmax_326": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "sum_327": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-softmax(pred_domain) * logsoftmax(pred_domain)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "full_like_397": {
                "variable": {
                    "value": "lb_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "domain_GT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_like_402": {
                "variable": {
                    "value": "lb_d_video",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d_video[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "domain_GT",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_414": {
                "variable": {
                    "value": "id_new",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input_data.size(-1) / self.num_f_maps)",
                            "Call"
                        ],
                        [
                            "feat.size(2)",
                            "Call"
                        ],
                        [
                            "feat.size(2)",
                            "Call"
                        ],
                        [
                            "feat.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_438": {
                "variable": {
                    "value": "id_new",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input_data.size(-1) / self.num_f_maps)",
                            "Call"
                        ],
                        [
                            "feat.size(2)",
                            "Call"
                        ],
                        [
                            "feat.size(2)",
                            "Call"
                        ],
                        [
                            "feat.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_456": {
                "variable": {
                    "value": "feat_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[self.video_order_base(i) for i in feat_pair]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_465": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.features_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_f_maps",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_466": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(DilatedResidualLayer(2 ** i, num_f_maps, num_f_maps)) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_467": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_f_maps",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_483": {
                "variable": {
                    "value": "self.conv_dilated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_484": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_485": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_488": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_dilated(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc_pair",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_f_maps * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_f_maps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "id_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(combinations(range(num_seg), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.ad_net_video_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_119": {
                "variable": {
                    "value": "self.ad_net_video_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.video_order_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_f_maps * 2, num_f_maps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.video_order_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_f_maps * num_order_pair",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_order_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.factorial(self.num_seg)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_145": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "list_label_d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(set(permutations(label_d_all)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "feat_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_source_video, feat_target_video)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "list_label_order",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(permutations(label_order_all))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "feat_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_source_video, feat_target_video)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_254": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stage1.conv_out(out_feat)",
                            "Call"
                        ],
                        [
                            "s.conv_out(out_feat)",
                            "Call"
                        ],
                        [
                            "self.ad_net_cls[0](self.ad_net_base[0](feat, beta_value))",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, num_frame, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "out.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, out_single_class.unsqueeze(1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.ad_net_video_cls[0](self.ad_net_video_base[0](feat, beta_value))",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, num_seg, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.ad_net_video_cls[0](self.ad_net_video_base[0](feat, beta_value))",
                            "Call"
                        ],
                        [
                            "self.video_order_cls(feat_concat)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv_dilated(x))",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_255": {
                "variable": {
                    "value": "prob_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.clone()",
                            "Call"
                        ],
                        [
                            "self.stage1.conv_out_2(out_feat)",
                            "Call"
                        ],
                        [
                            "out.clone()",
                            "Call"
                        ],
                        [
                            "s.conv_out_2(out_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "outputs_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_feat, out_feat.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "outputs_feat_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_feat_video, out_feat_video.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs, out.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(probs, prob.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "outputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_2, out_2.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "probs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(probs_2, prob_2.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "outputs_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_d, out_d.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "outputs_d_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_d_video, out_d_video.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "labels_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels_d, lb_d.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "labels_d_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels_d_video, lb_d_video.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "out_feat_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_feat_video, out_feat_video_batch.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_471": {
                "variable": {
                    "value": "self.conv_out_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_f_maps",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "id_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(i, i + 1) for i in range(num_seg - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_f_maps",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "pred_d_video_ssl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_d_video_ssl, pred_d_video_ssl_single.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "label_d_video_ssl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_d_video_ssl, label_d_video_ssl_single.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "pred_order_video_ssl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_order_video_ssl, pred_order_video_ssl_single.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "label_order_video_ssl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_order_video_ssl, label_order_video_ssl_single.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, out_single_class.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_f_maps",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_domain_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "int(math.factorial(self.num_seg * 2) / math.factorial(self.num_seg) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "num_f_maps * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_f_maps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_f_maps",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_452": {
                "tensors": {
                    "value": "(feat[i], feat[j])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "torch": {
            "DataParallel_15": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(features_path + vid.split('.')[0] + '.npy')",
                            "Call"
                        ],
                        [
                            "features[:, ::sample_rate]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_38": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(features, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "input_x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_40": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[:, -1, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_21": {
                "f": {
                    "value": "model_dir + '/acc_best_source.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_23": {
                "f": {
                    "value": "model_dir + '/acc_best_target.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "model_dir + '/epoch-' + str(epoch) + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "CrossEntropyLoss_14": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_15": {
                "variable": {
                    "value": "self.ce_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_16": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_421": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.linspace(0, num_frame_min.item() - 1, num_frame_select).tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_438": {
                "variable": {
                    "value": "id_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "id_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(set(range(num_frame)) - set(id_drop))",
                            "Call"
                        ],
                        [
                            "torch.tensor(id_keep).long()",
                            "Call"
                        ],
                        [
                            "id_keep.to(input_data.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_460": {
                "variable": {
                    "value": "id_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "id_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(np.linspace(0, num_frame - 1, num_frame_drop)).tolist()",
                            "Call"
                        ],
                        [
                            "np.floor(np.linspace(0, num_frame - 1, num_frame_drop)).tolist()",
                            "Call"
                        ],
                        [
                            "torch.tensor(id_drop).long()",
                            "Call"
                        ],
                        [
                            "id_drop.to(mask.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_87": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_325": {
                "variable": {
                    "value": "(_, pred_id_source)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_source[:, -1, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_328": {
                "variable": {
                    "value": "(_, pred_id_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_target[:, -1, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_339": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/epoch-' + str(epoch + 1) + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_340": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/epoch-' + str(epoch + 1) + '.opt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_like_361": {
                "variable": {
                    "value": "label_source_domain_display",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_source_display[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_362": {
                "variable": {
                    "value": "label_target_domain_display",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_target_display[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "feat_all_display",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_source_display, feat_target_display)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "label_all_class_display",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_source_display, label_target_display)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "label_all_domain_display",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_source_domain_display, label_target_domain_display)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "model_dir + '/epoch-' + str(resume_epoch) + '.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_327": {
                "input": {
                    "value": "mask_source_new[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_330": {
                "input": {
                    "value": "mask_target[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_347": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/acc_best_source.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_348": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/acc_best_source.opt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_352": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/acc_best_target.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_353": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/acc_best_target.opt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "classweight_stage",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(classweight_stage_select_source, classweight_stage_select_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(feat_source_display, feat_source_reshape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(label_source_display, label_source_reshape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "(feat_target_display, feat_target_reshape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "(label_target_display, label_target_reshape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_188": {
                "input": {
                    "value": "torch.clamp(self.mse(F.log_softmax(p[:, :, 1:], dim=1), F.log_softmax(p.detach()[:, :, :-1], dim=1)), min=0, max=tau ** 2) * mask_source_new[:, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_192": {
                "input": {
                    "value": "torch.clamp(self.mse(F.log_softmax(p_2[:, :, 1:], dim=1), F.log_softmax(p_2.detach()[:, :, :-1], dim=1)), min=0, max=tau ** 2) * mask_source_new[:, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_251": {
                "variable": {
                    "value": "id_rand_source",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "prob_select_source.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_252": {
                "variable": {
                    "value": "id_rand_target",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "prob_select_target.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_188": {
                "input": {
                    "value": "self.mse(F.log_softmax(p[:, :, 1:], dim=1), F.log_softmax(p.detach()[:, :, :-1], dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "tau ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_192": {
                "input": {
                    "value": "self.mse(F.log_softmax(p_2[:, :, 1:], dim=1), F.log_softmax(p_2.detach()[:, :, :-1], dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "tau ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_188": {
                "input": {
                    "value": "p.detach()[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_192": {
                "input": {
                    "value": "p_2.detach()[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "tensors": {
                    "value": "(pred_select_source, pred_select_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}