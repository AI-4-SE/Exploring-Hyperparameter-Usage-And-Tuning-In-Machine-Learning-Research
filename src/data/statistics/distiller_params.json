{
    "distiller/pruning/ranked_structures_pruner.py": {
        "sklearn": {
            "LinearRegression_521": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_315": {
                "variable": {
                    "value": "binary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.size(0)",
                            "Call"
                        ],
                        [
                            "param.size(0)",
                            "Call"
                        ],
                        [
                            "param.size(0)",
                            "Call"
                        ],
                        [
                            "param.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_244": {
                "variable": {
                    "value": "(bottomk, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "block_mags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "magnitude_fn(view1, dim=1)",
                            "Call"
                        ],
                        [
                            "block_mags.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(fraction_to_prune * block_mags.size(0))",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bernoulli_460": {
                "variable": {
                    "value": "binary_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor([keep_prob] * num_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unfold_588": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_699": {
                "variable": {
                    "value": "new_w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_least_square_sklearn(X, Y)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(new_w)",
                            "Call"
                        ],
                        [
                            "new_w.contiguous().view(param.size(0), cnt_retained_channels, param.size(2), param.size(3))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_460": {
                "data": {
                    "value": "[keep_prob] * num_filters",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/jupyter/amc_worksheet_jupyter.py": {
        "sklearn": {
            "PCA_310": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/rl_libs/hanlab/utils.py": {
        "sklearn": {
            "LinearRegression_129": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_84": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller/data_loggers/tbbackend.py": {
        "tensorflow": {
            "Summary_40": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=scalar)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "HistogramProto_76": {
                "variable": {
                    "value": "tfhist",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "np.min(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "np.max(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "int(np.prod(tensor.shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "sum": {
                    "value": "np.sum(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "sum_squares": {
                    "value": "np.sum(np.square(tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Summary_91": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=tfhist)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_59": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=scalar)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_33": {
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FileWriter_58": {
                "logdir": {
                    "value": "os.path.join(self.log_dir, str(i))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/rl_libs/spinningup/ddpg/core.py": {
        "tensorflow": {
            "dense_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_25": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(a, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x, a], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(y, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_29": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x, a], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(y, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_6": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim) if dim else (None,)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "dense_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "Method Argument"
                        ],
                        [
                            "tf.tanh",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_14": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(400",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.tanh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_20": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_30": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=300, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(400",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.tanh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_52": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "amc_critic(x, a, list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(x, pi, list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/rl_libs/spinningup/ddpg/ddpg.py": {
        "tensorflow": {
            "stop_gradient_164": {
                "variable": {
                    "value": "backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_ph + gamma * (1 - d_ph) * q_pi_targ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "variable": {
                    "value": "q_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q - backup) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_171": {
                "variable": {
                    "value": "pi_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "pi_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_172": {
                "variable": {
                    "value": "q_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "q_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_177": {
                "variable": {
                    "value": "target_update",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, polyak * v_targ + (1 - polyak) * v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "group_181": {
                "variable": {
                    "value": "target_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_184": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "input_tensor": {
                    "value": "q_pi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_177": {
                "ref": {
                    "value": "v_targ",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "polyak * v_targ + (1 - polyak) * v_main",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_181": {
                "ref": {
                    "value": "v_targ",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/rl_libs/spinningup/spinningup_if.py": {
        "tensorflow": {}
    },
    "distiller/__init__.py": {
        "torch": {}
    },
    "distiller/apputils/checkpoint.py": {
        "torch": {
            "load_191": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(chkpt_file)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'arch': arch}",
                            "Dict"
                        ],
                        [
                            "torch.load(chkpt_file, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fullpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/apputils/data_loaders.py": {
        "torch": {
            "DataLoader_300": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.ImageFolder(test_dir, test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_sampler(test_indices, effective_test_size, fixed_subset, sequential)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_321": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.ImageFolder(train_dir, train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_sampler(train_indices, effective_train_size, fixed_subset, sequential)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "__deterministic_worker_init_fn",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_222": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_246": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.data_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "datasets.ImageFolder(train_dir, train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_sampler(valid_indices, effective_valid_size, fixed_subset, sequential)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "__deterministic_worker_init_fn",
                            "variable"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_284": {
                "indices": {
                    "value": "subset_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:subset_length]",
                            "Subscript"
                        ],
                        [
                            "indices[:self.subset_length]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/apputils/execution_env.py": {
        "torch": {
            "device_count_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller/apputils/image_classifier.py": {
        "torch": {
            "CrossEntropyLoss_819": {
                "variable": {
                    "value": "earlyexit_validate_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_74": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_409": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_372": {
                "variable": {
                    "value": "available_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_717": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_378": {
                "device": {
                    "value": "args.gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_825": {
                "input": {
                    "value": "args.loss_exits[exitnum]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_841": {
                "data": {
                    "value": "np.array(output[exitnum].data[batch_index].cpu(), ndmin=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_842": {
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "target[batch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_833": {
                "data": {
                    "value": "np.array(output[exitnum].data[batch_index].cpu(), ndmin=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_834": {
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "target[batch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/config.py": {
        "torch": {}
    },
    "distiller/data_loggers/collector.py": {
        "torch": {
            "zeros_723": {
                "variable": {
                    "value": "module.output_hist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nbins",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histc_707": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_clamped.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "self.nbins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "stat_min",
                    "type": "variable",
                    "possible_values": []
                },
                "max": {
                    "value": "stat_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_740": {
                "variable": {
                    "value": "od[bin_centroids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "min_val + bin_width / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "max_val - bin_width / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.nbins",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_765": {
                "obj": {
                    "value": "hist_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'.'.join([fname, 'xlsx'])",
                            "Call"
                        ],
                        [
                            "'.'.join([fname, 'xlsx'])",
                            "Call"
                        ],
                        [
                            "'.'.join([fname, 'yaml'])",
                            "Call"
                        ],
                        [
                            "'.'.join([fname, 'pt'])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_829": {
                "variable": {
                    "value": "module.raw_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "module.raw_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_710": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_722": {
                "*size": {
                    "value": "self.nbins",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_328": {
                "input": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_329": {
                "input": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_330": {
                "input": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_337": {
                "input": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "*size": {
                    "value": "act.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_336": {
                "input": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/data_loggers/logger.py": {
        "torch": {
            "numel_165": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_254": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_257": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/directives.py": {
        "torch": {}
    },
    "distiller/early_exit.py": {
        "torch": {}
    },
    "distiller/knowledge_distillation.py": {
        "torch": {
            "log_softmax_149": {
                "variable": {
                    "value": "soft_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.last_students_logits / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.last_teacher_logits / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_153": {
                "variable": {
                    "value": "distillation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.last_students_logits / self.temperature, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_targets.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller/learning_rate.py": {
        "torch": {}
    },
    "distiller/model_summaries.py": {
        "torch": {
            "Softmax_476": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "numel_93": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_148": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_98": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/model_transforms.py": {
        "torch": {
            "Identity_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/__init__.py": {
        "torch": {
            "Sequential_83": {
                "variable": {
                    "value": "model.mean32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Mean(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_146": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_148": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "_create_extension_model(arch, dataset)",
                            "Call"
                        ],
                        [
                            "_create_cifar10_model(arch, pretrained)",
                            "Call"
                        ],
                        [
                            "_create_mnist_model(arch, pretrained)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "imagenet_extra_models.__dict__[arch](pretrained=pretrained)",
                            "Call"
                        ],
                        [
                            "imagenet_extra_models.__dict__[arch]()",
                            "Call"
                        ],
                        [
                            "pretrainedmodels.__dict__[arch](num_classes=1000, pretrained=dataset if pretrained else None)",
                            "Call"
                        ],
                        [
                            "getattr(torch_models, arch)(pretrained=pretrained, transform_input=False)",
                            "Call"
                        ],
                        [
                            "getattr(torch_models, arch)(pretrained=pretrained)",
                            "Call"
                        ],
                        [
                            "cifar10_models.__dict__[arch]()",
                            "Call"
                        ],
                        [
                            "mnist_models.__dict__[arch]()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/models/cifar10/plain_cifar.py": {
        "torch": {
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_83": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NUM_CLASSES",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/cifar10/preresnet_cifar.py": {
        "torch": {
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.pre_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.pre_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "variable": {
                    "value": "self.final_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "variable": {
                    "value": "self.final_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_116": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NUM_CLASSES",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_148": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_138": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantPad3d_139": {
                "padding": {
                    "value": "(0, 0, 0, 0, pad_amount, pad_amount)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/cifar10/resnet_cifar.py": {
        "torch": {
            "Conv2d_49": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_109": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NUM_CLASSES",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/cifar10/resnet_cifar_earlyexit.py": {
        "torch": {
            "Conv2d_49": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "nn.AvgPool2d(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_54": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "1600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NUM_CLASSES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/models/cifar10/simplenet_cifar.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/cifar10/vgg_cifar.py": {
        "torch": {
            "Linear_38": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_75": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/imagenet/alexnet_batchnorm.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 96, kernel_size=12, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 6 * 6, 4096, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_62": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/models/imagenet/mobilenet.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Sequential(*conv_bn_relu(3, self.channels[0], 3, stride=2, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.channels[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "*args": {
                    "value": "*conv_bn_relu(n_ifm, n_ifm, 3, stride=stride, padding=1, groups=n_ifm)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*conv_bn_relu(3, self.channels[0], 3, stride=2, padding=1)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_61": {
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "n_ifm",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_ofm",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "n_ofm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/imagenet/mobilenet_dropout.py": {
        "torch": {
            "Sequential_31": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "*args": {
                    "value": "nn.Conv2d(inp, inp, 3, stride, 1, groups=inp, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "cfg[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/models/imagenet/preresnet_imagenet.py": {
        "torch": {
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "variable": {
                    "value": "self.relu2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_141": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "variable": {
                    "value": "self.final_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.final_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_148": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.pre_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.pre_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.pre_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "variable": {
                    "value": "self.pre_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/imagenet/resnet.py": {
        "torch": {
            "ReLU_46": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/imagenet/resnet_earlyexit.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "*args": {
                    "value": "nn.Conv2d(256, 10, kernel_size=7, stride=2, padding=3, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "*args": {
                    "value": "nn.Conv2d(512, 12, kernel_size=7, stride=2, padding=3, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "1960",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "588",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/models/mnist/simplenet_mnist.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_68": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/modules/aggregate.py": {
        "torch": {
            "norm_16": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "self.keepdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*self.args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/modules/eltwise.py": {
        "torch": {}
    },
    "distiller/modules/grouping.py": {
        "torch": {
            "cat_27": {
                "tensors": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_47": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.split_size_or_sections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_56": {
                "tensors": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/modules/matmul.py": {
        "torch": {
            "bmm_39": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/modules/rnn.py": {
        "torch": {
            "Linear_51": {
                "variable": {
                    "value": "self.fc_gate_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc_gate_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_55": {
                "variable": {
                    "value": "self.act_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_56": {
                "variable": {
                    "value": "self.act_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_57": {
                "variable": {
                    "value": "self.act_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_58": {
                "variable": {
                    "value": "self.act_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_64": {
                "variable": {
                    "value": "self.act_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_78": {
                "variable": {
                    "value": "(i, f, g, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.eltwiseadd_gate(self.fc_gate_x(x), self.fc_gate_h(h_prev))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_96": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "module.fc_gate_x.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lstmcell.weight_ih.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "module.fc_gate_h.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lstmcell.weight_hh.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_224": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_229": {
                "variable": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DistillerLSTMCell(self.input_size, self.hidden_size, self.bias)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_259": {
                "variable": {
                    "value": "(x, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_sequence_277": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "y_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "LSTM_368": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "module.fc_gate_x.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lstmcell.bias_ih.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "module.fc_gate_h.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lstmcell.bias_hh.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_137": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "c_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t[1] for t in h]",
                            "ListComp"
                        ],
                        [
                            "[t[1] for t in h_result]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "c_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t[1] for t in h]",
                            "ListComp"
                        ],
                        [
                            "[t[1] for t in h_result]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_front, out_back.flip([0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "data": {
                    "value": "self.fc_gate_h.weight.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "data": {
                    "value": "self.fc_gate_x.weight.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_279": {
                "tensors": {
                    "value": "[t[1] for t in h_results]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_287": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_309": {
                "tensors": {
                    "value": "h_c_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "h_c_result + [h_front[1], h_back[1]]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "data": {
                    "value": "self.fc_gate_h.bias.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "data": {
                    "value": "self.fc_gate_x.bias.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_394": {
                "data": {
                    "value": "param_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(gate, ptype).clone().detach()",
                            "Call"
                        ],
                        [
                            "getattr(lstm, lstm_pth_param_name).clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_423": {
                "data": {
                    "value": "param_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(gate, ptype).clone().detach()",
                            "Call"
                        ],
                        [
                            "getattr(lstm, lstm_pth_param_name).clone().detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/modules/topology.py": {
        "torch": {}
    },
    "distiller/norms.py": {
        "torch": {
            "topk_307": {
                "variable": {
                    "value": "(k_smallest_elements, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mags * e_greedy_normal_noise(mags, noise)",
                            "BinOp"
                        ],
                        [
                            "channels_norm(param, magnitude_fn, group_len, length_normalized=True)",
                            "Call"
                        ],
                        [
                            "filters_norm(param, magnitude_fn, group_len, length_normalized=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_294": {
                "input": {
                    "value": "mags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mags * e_greedy_normal_noise(mags, noise)",
                            "BinOp"
                        ],
                        [
                            "channels_norm(param, magnitude_fn, group_len, length_normalized=True)",
                            "Call"
                        ],
                        [
                            "filters_norm(param, magnitude_fn, group_len, length_normalized=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/policy.py": {
        "torch": {
            "tensor_273": {
                "variable": {
                    "value": "regularizer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "loss.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_191": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_163": {
                "variable": {
                    "value": "sigma_running",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_module.running_var + bn_module.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller/pruning/__init__.py": {
        "torch": {
            "gt_83": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottomk.data[-1]",
                            "Subscript"
                        ],
                        [
                            "tensor.stddev * sensitivity",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_110": {
                "variable": {
                    "value": "(bottomk, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.abs().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(desired_sparsity * tensor.numel())",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_133": {
                "variable": {
                    "value": "tensor.stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_83": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/pruning/greedy_filter_pruning.py": {
        "torch": {
            "SGD_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_cpy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "app_args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "app_args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "app_args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numel_204": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_cpy.state_dict()[param_name]",
                            "Subscript"
                        ],
                        [
                            "model_cpy.state_dict()[param_name]",
                            "Subscript"
                        ],
                        [
                            "model.state_dict()[param_name]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/pruning/magnitude_pruner.py": {
        "torch": {}
    },
    "distiller/pruning/splicing_pruner.py": {
        "torch": {
            "ones_like_60": {
                "variable": {
                    "value": "zeros_mask_dict[param_name].mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_93": {
                "variable": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "threshold_low > weights_abs",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "current_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_94": {
                "variable": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "threshold_hi <= weights_abs",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(threshold_low > weights_abs, zeros, current_mask)",
                            "Call"
                        ],
                        [
                            "torch.where(threshold_hi <= weights_abs, ones, new_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "std_72": {
                "variable": {
                    "value": "param._std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "param._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_91": {
                "input": {
                    "value": "current_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_91": {
                "input": {
                    "value": "current_mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/quantization/clipped_linear.py": {
        "torch": {
            "Parameter_55": {
                "variable": {
                    "value": "self.clip_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([init_act_clip_val])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clamp(input, 0, self.clip_val, self.inplace)",
                            "Call"
                        ],
                        [
                            "LinearQuantizeSTE.apply(input, self.scale, self.zero_point, self.dequantize, self.inplace)",
                            "Call"
                        ],
                        [
                            "F.relu(input, self.inplace)",
                            "Call"
                        ],
                        [
                            "torch.where(input < self.clip_val, input, self.clip_val)",
                            "Call"
                        ],
                        [
                            "LinearQuantizeSTE.apply(input, scale, zero_point, self.dequantize, self.inplace)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/quantization/ptq_coordinate_search.py": {
        "torch": {
            "cat_179": {
                "tensors": {
                    "value": "layer_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "relu__160": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input.clone().detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_91": {
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - y).abs_().pow_(p)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/quantization/ptq_greedy_search.py": {
        "torch": {
            "rand_468": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*model.input_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/quantization/pytorch_quant_conversion.py": {
        "torch": {
            "ModuleDict_416": {
                "variable": {
                    "value": "self.quantizers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_91": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zp.cpu().squeeze().long()",
                            "Call"
                        ],
                        [
                            "zp - n_bins_half",
                            "BinOp"
                        ],
                        [
                            "((zp - zp_offset) * ratio + zp_offset / 2).round()",
                            "Call"
                        ],
                        [
                            "zp + n_bins_half",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "n_bins_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** (num_bits - 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/quantization/q_utils.py": {
        "torch": {
            "zeros_like_71": {
                "variable": {
                    "value": "zero_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n / sat_val",
                            "BinOp"
                        ],
                        [
                            "n / diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_96": {
                "variable": {
                    "value": "sat_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sat_min.to(sat_max.device)",
                            "Call"
                        ],
                        [
                            "torch.min(sat_min, torch.zeros_like(sat_min))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_97": {
                "variable": {
                    "value": "sat_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sat_max.to(sat_min.device)",
                            "Call"
                        ],
                        [
                            "torch.max(sat_max, torch.zeros_like(sat_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_174": {
                "variable": {
                    "value": "min_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(min_val, mean - n_stds * std)",
                            "Call"
                        ],
                        [
                            "get_tensor_min_max(t, across_dim)[0].mean()",
                            "Call"
                        ],
                        [
                            "torch.max(min_val, mean - alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_175": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(max_val, mean + n_stds * std)",
                            "Call"
                        ]
                    ]
                }
            },
            "log2_185": {
                "variable": {
                    "value": "shift_bits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(2 ** mult_bits - 1) / fp32_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_185": {
                "variable": {
                    "value": "shift_bits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_119": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": []
                },
                "max": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_126": {
                "input": {
                    "value": "scale * input - zero_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_158": {
                "input": {
                    "value": "min_val.abs_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_163": {
                "input": {
                    "value": "avg_min.abs_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_181": {
                "input": {
                    "value": "min_val.abs_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_280": {
                "variable": {
                    "value": "min_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(min_val, mean - n_stds * std)",
                            "Call"
                        ],
                        [
                            "get_tensor_min_max(t, across_dim)[0].mean()",
                            "Call"
                        ],
                        [
                            "torch.max(min_val, mean - alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_38": {
                "data": {
                    "value": "sat_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_96": {
                "input": {
                    "value": "sat_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sat_min.to(sat_max.device)",
                            "Call"
                        ],
                        [
                            "torch.min(sat_min, torch.zeros_like(sat_min))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_97": {
                "input": {
                    "value": "sat_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sat_max.to(sat_min.device)",
                            "Call"
                        ],
                        [
                            "torch.max(sat_max, torch.zeros_like(sat_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_223": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(t - t.mean())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "std_236": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_261": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.mean()",
                            "Call"
                        ],
                        [
                            "torch.tensor(t['mean'])",
                            "Call"
                        ],
                        [
                            "t.mean()",
                            "Call"
                        ],
                        [
                            "t.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_223": {
                "input": {
                    "value": "t - t.mean()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "data": {
                    "value": "t['avg_min']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/quantization/quantizer.py": {
        "torch": {
            "zeros_like_48": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(module.named_parameters())[name]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/quantization/range_linear.py": {
        "torch": {
            "relu_571": {
                "variable": {
                    "value": "accum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantized_forward(*inputs_q)",
                            "Call"
                        ],
                        [
                            "f.relu(accum)",
                            "Call"
                        ],
                        [
                            "self.wrapped_module(input_q)",
                            "Call"
                        ],
                        [
                            "self.wrapped_module(input0_q + input0_q.quant_metadata.zero_point, input1_q + input1_q.quant_metadata.zero_point)",
                            "Call"
                        ],
                        [
                            "self.wrapped_module(*inputs_re_q)",
                            "Call"
                        ],
                        [
                            "self.wrapped_module(*inputs_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1173": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_1276": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_1448": {
                "*args": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_558": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wrapped_module(*inputs)",
                            "Call"
                        ],
                        [
                            "f.relu(out)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "LinearQuantizeSTE.apply(param_fp, scale, zero_point, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1437": {
                "variable": {
                    "value": "w_dq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.float_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1439": {
                "variable": {
                    "value": "w_dq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "linear_dequantize(emb.weight, self.w_scale, self.w_zero_point)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_1508": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU6_1509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1531": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_1119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1747": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller/quantization/sim_bn_fold.py": {
        "torch": {
            "linear_213": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_234": {
                "variable": {
                    "value": "recip_sigma_running",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn.running_var + self.bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_104": {
                "variable": {
                    "value": "recip_sigma_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_var + self.bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self.param_module.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias_corrected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta - gamma * batch_mean * recip_sigma_batch",
                            "BinOp"
                        ],
                        [
                            "beta - gamma * corrected_mean * recip_sigma_running",
                            "BinOp"
                        ],
                        [
                            "beta - gamma * corrected_mean * recip_sigma_running",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_106": {
                "variable": {
                    "value": "sigma_running",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn.running_var + self.bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_116": {
                "variable": {
                    "value": "recip_sigma_running",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn.running_var + self.bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_225": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "expanded_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distiller/regularization/drop_filter.py": {
        "torch": {
            "conv2d_41": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "masked_weights / pruning_factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.binomial(n=1, p=self.p_mask, size=self.out_channels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/regularization/regularizer.py": {
        "torch": {}
    },
    "distiller/scheduler.py": {
        "torch": {
            "device_37": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/summary_graph.py": {
        "torch": {}
    },
    "distiller/thinning.py": {
        "torch": {
            "nonzero_374": {
                "variable": {
                    "value": "nonzero_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filter_view.abs().sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_111": {
                "input": {
                    "value": "d1[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "d2[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_113": {
                "input": {
                    "value": "d1[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "d2[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_267": {
                "variable": {
                    "value": "nonzero_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "col_sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.abs().sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_468": {
                "variable": {
                    "value": "param_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['momentum_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(layers[layer_name], torch.nn.modules.Conv2d) and layers[layer_name].groups == 1 else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "directive[0]",
                            "Subscript"
                        ]
                    ]
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonzero_channels.data.squeeze()",
                            "Call"
                        ],
                        [
                            "nonzero_filters.data.squeeze()",
                            "Call"
                        ],
                        [
                            "directive[1].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_517": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "selection_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.view(*directive[2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(layers[layer_name], torch.nn.modules.Conv2d) and layers[layer_name].groups == 1 else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "directive[0]",
                            "Subscript"
                        ]
                    ]
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonzero_channels.data.squeeze()",
                            "Call"
                        ],
                        [
                            "nonzero_filters.data.squeeze()",
                            "Call"
                        ],
                        [
                            "directive[1].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_536": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(layers[layer_name], torch.nn.modules.Conv2d) and layers[layer_name].groups == 1 else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "directive[0]",
                            "Subscript"
                        ]
                    ]
                },
                "index": {
                    "value": "indices.to(param.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_542": {
                "variable": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(layers[layer_name], torch.nn.modules.Conv2d) and layers[layer_name].groups == 1 else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "directive[0]",
                            "Subscript"
                        ]
                    ]
                },
                "index": {
                    "value": "indices.to(param.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_552": {
                "variable": {
                    "value": "zeros_mask_dict[param_name].mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zeros_mask_dict[param_name].mask",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(layers[layer_name], torch.nn.modules.Conv2d) and layers[layer_name].groups == 1 else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "directive[0]",
                            "Subscript"
                        ]
                    ]
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonzero_channels.data.squeeze()",
                            "Call"
                        ],
                        [
                            "nonzero_filters.data.squeeze()",
                            "Call"
                        ],
                        [
                            "directive[1].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_494": {
                "input": {
                    "value": "running",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(layers[layer_name], attr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim_to_trim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val[0]",
                            "Subscript"
                        ]
                    ]
                },
                "index": {
                    "value": "indices_to_select.to(running.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_522": {
                "variable": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_selection_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.grad.resize(*directive[2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(layers[layer_name], torch.nn.modules.Conv2d) and layers[layer_name].groups == 1 else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "directive[0]",
                            "Subscript"
                        ]
                    ]
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonzero_channels.data.squeeze()",
                            "Call"
                        ],
                        [
                            "nonzero_filters.data.squeeze()",
                            "Call"
                        ],
                        [
                            "directive[1].to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/thresholding.py": {
        "torch": {}
    },
    "distiller/utils.py": {
        "torch": {
            "nonzero_262": {
                "variable": {
                    "value": "nonzero_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distiller.norms.channels_lp_norm(tensor, p=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_604": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_663": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "numel_181": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_205": {
                "input": {
                    "value": "l1_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distiller.norms.filters_lp_norm(tensor, p=1, length_normalized=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_243": {
                "input": {
                    "value": "view_2d.abs().sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_317": {
                "input": {
                    "value": "block_sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "view1.abs().sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_327": {
                "input": {
                    "value": "tensor.abs().sum(dim=1 - dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_780": {
                "obj": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(val_str)",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_391": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_407": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GNMT/seq2seq/data/dataset.py": {
        "torch": {
            "full_18": {
                "variable": {
                    "value": "seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_length, len(seq))",
                            "Tuple"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "config.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(s) for s in seq]",
                            "ListComp"
                        ],
                        [
                            "[len(s) + len(t) for (s, t) in zip(self.src, self.tgt)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_115": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "dataset": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_collate_fn(batch_first, sort=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BucketingSampler(self, batch_size, bucket)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(self)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "entry",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "entry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.segment(line)",
                            "Call"
                        ],
                        [
                            "torch.tensor(entry)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/GNMT/seq2seq/data/sampler.py": {
        "torch": {
            "Generator_31": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_35": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.data_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple((shard[idx] for (shard, idx) in zip(shards, indices)))",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_60": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "indices.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/GNMT/seq2seq/inference/beam_search.py": {
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_seq_len",
                            "Attribute"
                        ],
                        [
                            "self.max_seq_len",
                            "Attribute"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_31": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_32": {
                "variable": {
                    "value": "active",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "base_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_seq_len",
                            "Attribute"
                        ],
                        [
                            "self.max_seq_len",
                            "Attribute"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_88": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_91": {
                "variable": {
                    "value": "active",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_92": {
                "variable": {
                    "value": "base_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_93": {
                "variable": {
                    "value": "global_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "eos_beam_fill",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] + (beam_size - 1) * [float('-inf')]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "accu_attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_187": {
                "variable": {
                    "value": "best_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "active_scores.unsqueeze(2) + logprobs",
                            "BinOp"
                        ],
                        [
                            "new_scores.view(-1, beam_size * beam_size)",
                            "Call"
                        ],
                        [
                            "new_scores.view(-1, beam_size * beam_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_191": {
                "variable": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "words.view(word_view)",
                            "Call"
                        ],
                        [
                            "words.view(-1)",
                            "Call"
                        ],
                        [
                            "words[mask]",
                            "Subscript"
                        ],
                        [
                            "words.view(-1, beam_size, beam_size)",
                            "Call"
                        ],
                        [
                            "words.masked_fill(eos_mask.unsqueeze(2), EOS)",
                            "Call"
                        ],
                        [
                            "words.view(-1, beam_size * beam_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(words, 1, index)",
                            "Call"
                        ],
                        [
                            "words.view(word_view)",
                            "Call"
                        ],
                        [
                            "words.index_select(ctx_batch_dim, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GNMT/seq2seq/inference/inference.py": {
        "torch": {
            "tensor_42": {
                "data": {
                    "value": "self.tok.segment(line)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/GNMT/seq2seq/models/attention.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "key_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.linear_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_36": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_38": {
                "variable": {
                    "value": "self.softmax_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_74": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.size(1)",
                            "Call"
                        ],
                        [
                            "context.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "context.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.normalize_scalar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.normalize_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GNMT/seq2seq/models/decoder.py": {
        "torch": {
            "LSTM_18": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(out_features + 7) // 8 * 8",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.eltwiseadd_residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EltwiseAdd() for _ in range(1, len(self.rnn_layers))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.attention_concats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Concat(2) for _ in range(len(self.rnn_layers))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_80": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "config.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(itertools.chain(*self.next_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_74": {
                "*args": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/GNMT/seq2seq/models/encoder.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.eltwiseadd_residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EltwiseAdd() for _ in range(2, len(self.rnn_layers))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedder(inputs)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x, lengths.cpu().numpy(), batch_first=self.batch_first)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.eltwiseadd_residuals[i - 2](x, residual)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_48": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedder(inputs)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x, lengths.cpu().numpy(), batch_first=self.batch_first)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.eltwiseadd_residuals[i - 2](x, residual)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "config.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_18": {
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_22": {
                "*args": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_27": {
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/GNMT/seq2seq/models/gnmt.py": {
        "torch": {
            "Embedding_17": {
                "variable": {
                    "value": "embedder",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "config.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GNMT/seq2seq/models/seq2seq_base.py": {
        "torch": {
            "log_softmax_20": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GNMT/seq2seq/utils.py": {
        "torch": {
            "is_initialized_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/GNMT/translate.py": {
        "torch": {
            "load_150": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "{'cuda:0': 'cpu'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "empty_cache_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_142": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/environment.py": {
        "torch": {}
    },
    "examples/auto_compression/amc/parallel-finetune.py": {
        "torch": {
            "device_count_129": {
                "variable": {
                    "value": "n_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/rl_libs/hanlab/agent.py": {
        "torch": {
            "MSELoss_14": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_15": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_states",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_25": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_states",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "self.actor_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.critic_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/actor.pkl'.format(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic.pkl'.format(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_194": {
                "f": {
                    "value": "'{}/actor.pkl'.format(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_198": {
                "f": {
                    "value": "'{}/critic.pkl'.format(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/utils/data_dependencies.py": {
        "torch": {}
    },
    "examples/auto_compression/amc/utils/features_collector.py": {
        "torch": {
            "cat_76": {
                "variable": {
                    "value": "inputs[layer_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "outputs[layer_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/auto_compression/amc/utils/net_wrapper.py": {
        "torch": {
            "SGD_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt_cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.app_args.optimizer_data",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "opt_cfg['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.app_args.optimizer_data",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "opt_cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.app_args.optimizer_data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "examples/classifier_compression/inspect_ckpt.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/classifier_compression/multi-run.py": {
        "torch": {
            "device_count_62": {
                "variable": {
                    "value": "n_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/classifier_compression/ptq_lapq.py": {
        "torch": {
            "rand_80": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*model.input_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "targets_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "examples/lottery_ticket/lottery.py": {
        "torch": {
            "ne_58": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ncf/dataset.py": {
        "torch": {}
    },
    "examples/ncf/neumf.py": {
        "torch": {
            "Embedding_28": {
                "variable": {
                    "value": "self.mf_user_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nb_users",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "mf_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.mf_item_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nb_items",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "mf_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.mlp_user_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nb_users",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "mlp_layer_sizes[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_31": {
                "variable": {
                    "value": "self.mlp_item_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nb_items",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "mlp_layer_sizes[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.mlp_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_51": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_layer_sizes[-1] + mf_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.final_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.final_mf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mf_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "state_dict[final.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_dict.pop('final_mf.weight')[0], state_dict.pop('final_mlp.weight')[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "state_dict[final.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "mlp_layer_sizes[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/object_detection_compression/coco_eval.py": {
        "torch": {
            "stack_162": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/object_detection_compression/coco_utils.py": {
        "torch": {
            "Subset_144": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dataset, ids)",
                            "Call"
                        ],
                        [
                            "{'images': [], 'categories': [], 'annotations': []}",
                            "Dict"
                        ],
                        [
                            "dataset.dataset",
                            "Attribute"
                        ],
                        [
                            "CocoDetection(img_folder, ann_file, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "_coco_remove_images_without_annotations(dataset)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_42": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coco_mask.decode(rles)",
                            "Call"
                        ],
                        [
                            "mask[..., None]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(mask, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "mask.any(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros((0, height, width), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "targets['masks']",
                            "Subscript"
                        ],
                        [
                            "masks.permute(0, 2, 1).contiguous().permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "convert_coco_poly_to_mask(segmentations, h, w)",
                            "Call"
                        ],
                        [
                            "masks[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[image_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_65": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "boxes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "classes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['iscrowd'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_79": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets['keypoints']",
                            "Subscript"
                        ],
                        [
                            "keypoints.reshape(keypoints.shape[0], -1).tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[obj['keypoints'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "keypoints[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/object_detection_compression/compress_detector.py": {
        "torch": {
            "device_92": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupedBatchSampler(train_sampler, group_ids, args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(train_sampler, args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_test)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_164": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.lr_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frozen_bn.weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DistributedSampler_120": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_121": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_123": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_124": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchSampler_130": {
                "variable": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_156": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "detection.__dict__[args.model](num_classes=num_classes, pretrained=args.pretrained)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_191": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/object_detection_compression/engine.py": {
        "torch": {
            "get_num_threads_87": {
                "variable": {
                    "value": "n_threads",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_90": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_89": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_124": {
                "int": {
                    "value": "n_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_num_threads()",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/object_detection_compression/group_by_aspect_ratio.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetSampler(indices)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "examples/object_detection_compression/transforms.py": {
        "torch": {}
    },
    "examples/object_detection_compression/utils.py": {
        "torch": {
            "tensor_97": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_110": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_251": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_321": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_303": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_108": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/util_scripts/multi-run.py": {
        "torch": {
            "device_count_45": {
                "variable": {
                    "value": "n_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/word_language_model/data.py": {
        "torch": {}
    },
    "examples/word_language_model/generate.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randint_62": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(corpus.dictionary)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_69": {
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze().div(args.temperature).exp().cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/word_language_model/main.py": {
        "torch": {
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_159": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_312": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_315": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_363": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__241": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_297": {
                "variable": {
                    "value": "(bottomk, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param.abs().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(percentile * param.numel())",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_345": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, args.dropout, args.tied).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, args.dropout, args.tied).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/word_language_model/model.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_78": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RNN_26": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/common.py": {
        "torch": {
            "Sequential_65": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_basic.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "43",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0, 0, 4.0, 0], [1.0, 2.0, 0, 4.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 0], [1.0, 4.0, 0], [1.0, 2.0, 0], [0.0, 0.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[1.0, 0.0, 0.0], [0.0, 2.0, 0.0], [0.0, 0.0, 3.0]], [[1.0, 0.0, 2.0], [0.0, 3.0, 0.0], [4.0, 0.0, 5.0]]], [[[4.0, 0.0, 0.0], [0.0, 5.0, 0.0], [0.0, 0.0, 6.0]], [[0.0, 6.0, 0.0], [7.0, 0.0, 8.0], [0.0, 9.0, 0.0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[21 / 2, 45 / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "[100 * (6 + 6) / (9 + 9), 100 * (4 + 5) / (9 + 9)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[21 / 18, 45 / 18]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_infra.py": {
        "torch": {
            "load_87": {
                "variable": {
                    "value": "state_dict_arrays",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../examples/ssl/checkpoints/checkpoint_trained_dense.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "state_dict_arrays",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../examples/ssl/checkpoints/checkpoint_trained_dense.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "state_dict_arrays",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../examples/ssl/checkpoints/checkpoint_trained_dense.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "checkpoint_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoints/resnet20_cifar10_checkpoint.pth.tar'",
                            "str"
                        ],
                        [
                            "'../examples/ssl/checkpoints/checkpoint_trained_dense.pth.tar'",
                            "str"
                        ],
                        [
                            "'checkpoints/resnet20_cifar10_checkpoint.pth.tar'",
                            "str"
                        ],
                        [
                            "'../examples/ssl/checkpoints/checkpoint_trained_dense.pth.tar'",
                            "str"
                        ],
                        [
                            "'checkpoints/resnet20_cifar10_checkpoint.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "save_90": {
                "obj": {
                    "value": "{'state_dict': state_dict_arrays}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "tmpfile.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "{'state_dict': state_dict_arrays}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "tmpfile.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "state_dict_arrays",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('../examples/ssl/checkpoints/checkpoint_trained_dense.pth.tar').get('state_dict')",
                            "Call"
                        ],
                        [
                            "torch.load('../examples/ssl/checkpoints/checkpoint_trained_dense.pth.tar').get('state_dict')",
                            "Call"
                        ],
                        [
                            "torch.load('../examples/ssl/checkpoints/checkpoint_trained_dense.pth.tar').get('state_dict')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmpfile.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_learning_rate.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "dummy_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Optimizer_26": {
                "variable": {
                    "value": "dummy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[dummy_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "defaults": {
                    "value": "{'lr': 0.1}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_loss.py": {
        "torch": {
            "Module_39": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_50": {
                "variable": {
                    "value": "main_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_29": {
                "variable": {
                    "value": "self.loss_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_lstm_impl.py": {
        "torch": {
            "LSTM_77": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "SEQUENCE_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "35",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "SEQUENCE_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "35",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_112": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_sequence_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.rand(length, input_size) for length in input_lengths]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_52": {
                "variable": {
                    "value": "(y_t, lenghts_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_53": {
                "variable": {
                    "value": "(y_p, lenghts_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_118": {
                "*size": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_model_transforms.py": {
        "torch": {
            "randn_98": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(10, 10)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "randn_192": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_257": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(10, 10)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.prologue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*prologue",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataParallel_96": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyA(fuseable=False), DummyB(), DummyD())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyA(), DummyB(fuseable=False), DummyD())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyA(), DummyC(), DummyD(fuseable=False))",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyB())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyB(), DummyD())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyA(), DummyB(), DummyA(), DummyD())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyA(), DummyB(), DummyC(), DummyD())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyA(), DummyB(), DummyD())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyA(), DummyC(), DummyD())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(WrappedSequential(DummyA(), DummyB(), DummyD()), WrappedSequential(DummyA(), DummyC(), DummyD()))",
                            "Call"
                        ],
                        [
                            "WrappedSequential(WrappedSequential(DummyA(), DummyB(), DummyD()), DummyA(), DummyB(), WrappedSequential(DummyA(), DummyC(), DummyD()))",
                            "Call"
                        ],
                        [
                            "SplitJoinModel(WrappedSequential(DummyA(), DummyB(), DummyD()), WrappedSequential(DummyA(), DummyC(), DummyD()))",
                            "Call"
                        ],
                        [
                            "BypassModel((DummyA(), DummyB()), DummyD())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(DummyA(), DummyB(), DummyD())",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_97": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(expected)",
                            "Call"
                        ],
                        [
                            "WrappedSequential(fused_reference(), fused_reference())",
                            "Call"
                        ],
                        [
                            "WrappedSequential(fused_reference(), DummyA(), DummyB(), fused_reference())",
                            "Call"
                        ],
                        [
                            "SplitJoinModel(fused_reference(), fused_reference())",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_228": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(10, 10)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ReLU_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_218": {
                "num_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_219": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_220": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_221": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_222": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_241": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_241": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_243": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_243": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_244": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_244": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_post_train_quant.py": {
        "torch": {
            "Conv2d_135": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "expected_output.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_weights.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "linear_input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "expected_output.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "in_0_b_0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[-10, 31], [5, 10]], [[1, 8], [-3, 7]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "in_0_b_1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[-8, 16], [-15, -12]], [[-20, 13], [8, 0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "in_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_0_b_0, in_0_b_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "in_1_b_0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[-3, 6], [0, 8]], [[4, 10], [-7, 1]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "in_1_b_1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[-100, 50], [6, 12]], [[80, -30], [-16, 3]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "in_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_1_b_0, in_1_b_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_448": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_746": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_like_781": {
                "variable": {
                    "value": "layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_806": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_807": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_815": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_817": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(torch.tensor([[[[-7, 5], [2, -3]]]], dtype=torch.float32), torch.tensor([[[[-15, 10], [-1, 5]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[[[[-1, -0.5, 0], [0.5, 1, 1.5], [2, 2.5, 3]]], [[[-0.3, -0.25, -0.2], [-0.15, -0.1, -0.05], [0, 0.05, 0.1]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "[[-7, 5, 2, -3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "data": {
                    "value": "[[-1, 0.5, 0, 0.5], [-0.05, 0, 0.05, 0.1], [0.3, 0.6, -0.1, -0.2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "[-0.3, 0.1, -0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_432": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_553": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_554": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_560": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_634": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_635": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_783": {
                "variable": {
                    "value": "layer.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "layer.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_792": {
                "input": {
                    "value": "layer_ptq.wrapped_module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "layer_manual_q.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_800": {
                "input": {
                    "value": "y_ptq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_ptq(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_manual_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_manual_q(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_480": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_542": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_579": {
                "*size": {
                    "value": "(10, 10, 20, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_616": {
                "*size": {
                    "value": "(10, 10, 20, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_666": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_692": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_712": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_743": {
                "num_embeddings": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_750": {
                "data": {
                    "value": "59.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_795": {
                "input": {
                    "value": "layer_ptq.wrapped_module.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "layer_manual_q.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[[[[-7, 5], [2, -3]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[[[[-15, 10], [-1, 5]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(torch.tensor([[[[-3.648135333, -2.14596196], [0.858384784, 2.432090222]], [[0.214596196, 0.500724457], [0.715320653, 0.786852719]]]], dtype=torch.float32), torch.tensor([[[[12.51811144, 13.01883589], [14.0918168, 14.59254133]], [[1.359109242, 1.645237503], [1.573705438, 1.645237503]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "(torch.tensor([[[[-1.089218234, -1.089218234], [1.055180164, 2.518817167]], [[0.238266489, 0.476532978], [0.680761396, 0.782875606]]]], dtype=torch.float32), torch.tensor([[[[7.59048957, 7.59048957], [7.59048957, 7.59048957]], [[1.123256304, 1.259408583], [1.089218234, 1.089218234]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "(torch.tensor([[[[-3.648135333, -2.14596196], [0.858384784, 2.432090222]], [[0.214596196, 0.429192392], [0.715320653, 0.858384784]]]], dtype=torch.float32), torch.tensor([[[[12.51811144, 13.01883589], [14.09181687, 14.59254133]], [[1.430641307, 1.502173372], [1.573705438, 1.645237503]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "(torch.tensor([[[[-1.089768056, -1.089768056], [1.055712804, 2.52008863]], [[0.238386762, 0.408663021], [0.681105035, 0.817326042]]]], dtype=torch.float32), torch.tensor([[[[7.59432114, 7.59432114], [7.59432114, 7.59432114]], [[1.191933811, 1.15787856], [1.123823308, 1.089768056]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "(torch.tensor([[[[-3.529411765, -2.117647059], [0.917647059, 2.4]], [[0.211764706, 0.494117647], [0.705882353, 0.776470588]]]], dtype=torch.float32), torch.tensor([[[[12.56470588, 12.98823529], [14.04705882, 14.47058824]], [[1.341176471, 1.623529412], [1.552941176, 1.623529412]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "(torch.tensor([[[[-1.008529412, -1.008529412], [1.045882353, 2.502647059]], [[0.224117647, 0.485588235], [0.672352941, 0.784411765]]]], dtype=torch.float32), torch.tensor([[[[8.516470588, 8.516470588], [8.516470588, 8.516470588]], [[1.120588235, 1.27], [1.120588235, 1.083235294]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "(torch.tensor([[[[-3.529411765, -2.117647059], [0.917647059, 2.4]], [[0.211764706, 0.423529412], [0.705882353, 0.847058824]]]], dtype=torch.float32), torch.tensor([[[[12.56470588, 12.98823529], [14.04705882, 14.47058824]], [[1.482352941, 1.482352941], [1.623529412, 1.623529412]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "(torch.tensor([[[[-1.008529412, -1.008529412], [1.045882353, 2.502647059]], [[0.261470588, 0.410882353], [0.672352941, 0.821764706]]]], dtype=torch.float32), torch.tensor([[[[8.516470588, 8.516470588], [8.516470588, 8.516470588]], [[1.195294118, 1.157941176], [1.120588235, 1.083235294]]]], dtype=torch.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "[[7.687381776, 0.241172762, 0.783811475]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[[7.699930796, 0.241566456, 0.785090983]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "[[7.716609268, 0.243042812, 0.789889138]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "[[7.716609268, 0.243042812, 0.789889138]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Module_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_244": {
                "data": {
                    "value": "[[[[-9.882352941, 31.05882353], [4.941176471, 9.882352941]], [[0.705882353, 7.764705882], [-2.823529412, 7.058823529]], [[-2.823529412, 5.647058824], [0, 7.764705882]], [[4.235294118, 9.882352941], [-7.058823529, 0.705882353]]], [[[-7.764705882, 16.23529412], [-14.82352941, -12]], [[-19.76470588, 12.70588235], [7.764705882, 0]], [[-100.2352941, 50.11764706], [5.647058824, 12]], [[79.76470588, -29.64705882], [-16.23529412, 2.823529412]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "data": {
                    "value": "[[[[-9.966666667, 23.4], [4.766666667, 9.966666667]], [[0.866666667, 7.8], [-3.033333333, 6.933333333]], [[-3.033333333, 6.066666667], [0, 8.233333333]], [[3.9, 9.966666667], [-6.933333333, 1.3]]], [[[-7.8, 16.03333333], [-14.73333333, -12.13333333]], [[-14.73333333, 13], [7.8, 0]], [[-53.73333333, 44.63333333], [6.066666667, 12.13333333]], [[44.63333333, -30.33333333], [-16.03333333, 3.033333333]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "data": {
                    "value": "[[[[-10.19607843, 30.58823529], [5.490196078, 10.19607843]], [[0.784313725, 7.843137255], [-3.137254902, 7.058823529]], [[-3.137254902, 6.274509804], [0, 7.843137255]], [[3.921568627, 10.19607843], [-7.058823529, 0.784313725]]], [[[-7.843137255, 15.68627451], [-14.90196078, -11.76470588]], [[-19.60784314, 12.54901961], [7.843137255, 0]], [[-100.3921569, 50.19607843], [6.274509804, 11.76470588]], [[80, -29.80392157], [-15.68627451, 3.137254902]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "data": {
                    "value": "[[[[-10.01176471, 23.50588235], [4.788235294, 10.01176471]], [[0.870588235, 7.835294118], [-3.047058824, 6.964705882]], [[-3.047058824, 5.658823529], [0, 7.835294118]], [[4.352941176, 10.01176471], [-6.964705882, 0.870588235]]], [[[-7.835294118, 16.10588235], [-14.8, -12.18823529]], [[-20.02352941, 13.05882353], [7.835294118, 0]], [[-53.54117647, 50.05882353], [5.658823529, 12.18823529]], [[53.10588235, -29.6], [-16.10588235, 3.047058824]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Module_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_320": {
                "data": {
                    "value": "[[[[28.23529412, 178.8235294], [0, 75.29411765]], [[0, 75.29411765], [18.82352941, 9.411764706]]], [[[800, 800], [-84.70588235, -141.1764706]], [[-1590.588235, -385.8823529], [-131.7647059, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "data": {
                    "value": "[[[[30.42352941, 147.0470588], [0, 81.12941176]], [[5.070588235, 81.12941176], [20.28235294, 10.14117647]]], [[[431, 491.8470588], [-91.27058824, -141.9764706]], [[-669.3176471, -390.4352941], [-126.7647059, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "data": {
                    "value": "[[[[25.09803922, 188.2352941], [0, 75.29411765]], [[0, 87.84313725], [25.09803922, 0]]], [[[803.1372549, 803.1372549], [-100.3921569, -138.0392157]], [[-1593.72549, -389.0196078], [-125.4901961, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "data": {
                    "value": "[[[[31.37254902, 138.0392157], [0, 81.56862745]], [[6.274509804, 81.56862745], [18.82352941, 6.274509804]]], [[[426.6666667, 796.8627451], [-87.84313725, -144.3137255]], [[-803.1372549, -389.0196078], [-125.4901961, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Module_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_380": {
                "data": {
                    "value": "[[[[-12.96470588, 36.16470588], [4.776470588, 17.74117647]], [[4.776470588, 17.74117647], [-9.552941176, 7.505882353]]], [[[-107.8117647, 65.50588235], [-9.552941176, 0]], [[60.04705882, -16.37647059], [-8.188235294, 2.729411765]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "data": {
                    "value": "[[[[-13.17647059, 29.86666667], [4.831372549, 18.00784314]], [[4.831372549, 18.00784314], [-10.10196078, 8.345098039]]], [[[-60.61176471, 51.38823529], [-8.784313725, 0]], [[29.86666667, -17.12941176], [-7.905882353, 3.074509804]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "data": {
                    "value": "[[[[-13.55294118, 36.42352941], [5.082352941, 17.78823529]], [[5.082352941, 17.78823529], [-9.317647059, 7.623529412]]], [[[-108.4235294, 66.07058824], [-9.317647059, 0]], [[59.29411765, -16.94117647], [-8.470588235, 3.388235294]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_395": {
                "data": {
                    "value": "[[[[-12.81176471, 28.94509804], [4.745098039, 18.03137255]], [[5.219607843, 18.03137255], [-9.964705882, 8.066666667]]], [[[-60.7372549, 60.2627451], [-9.015686275, 0.474509804]], [[33.21568627, -16.60784314], [-8.066666667, 2.847058824]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_532": {
                "num_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_533": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_533": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_534": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_534": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_535": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_535": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[[[[-3.648135333, -2.14596196], [0.858384784, 2.432090222]], [[0.214596196, 0.500724457], [0.715320653, 0.786852719]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "[[[[12.51811144, 13.01883589], [14.0918168, 14.59254133]], [[1.359109242, 1.645237503], [1.573705438, 1.645237503]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "[[[[-1.089218234, -1.089218234], [1.055180164, 2.518817167]], [[0.238266489, 0.476532978], [0.680761396, 0.782875606]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "[[[[7.59048957, 7.59048957], [7.59048957, 7.59048957]], [[1.123256304, 1.259408583], [1.089218234, 1.089218234]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[[[[-3.648135333, -2.14596196], [0.858384784, 2.432090222]], [[0.214596196, 0.429192392], [0.715320653, 0.858384784]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "[[[[12.51811144, 13.01883589], [14.09181687, 14.59254133]], [[1.430641307, 1.502173372], [1.573705438, 1.645237503]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[[[[-1.089768056, -1.089768056], [1.055712804, 2.52008863]], [[0.238386762, 0.408663021], [0.681105035, 0.817326042]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "[[[[7.59432114, 7.59432114], [7.59432114, 7.59432114]], [[1.191933811, 1.15787856], [1.123823308, 1.089768056]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[[[[-3.529411765, -2.117647059], [0.917647059, 2.4]], [[0.211764706, 0.494117647], [0.705882353, 0.776470588]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[[[[12.56470588, 12.98823529], [14.04705882, 14.47058824]], [[1.341176471, 1.623529412], [1.552941176, 1.623529412]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "[[[[-1.008529412, -1.008529412], [1.045882353, 2.502647059]], [[0.224117647, 0.485588235], [0.672352941, 0.784411765]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "[[[[8.516470588, 8.516470588], [8.516470588, 8.516470588]], [[1.120588235, 1.27], [1.120588235, 1.083235294]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "[[[[-3.529411765, -2.117647059], [0.917647059, 2.4]], [[0.211764706, 0.423529412], [0.705882353, 0.847058824]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[[[[12.56470588, 12.98823529], [14.04705882, 14.47058824]], [[1.482352941, 1.482352941], [1.623529412, 1.623529412]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "[[[[-1.008529412, -1.008529412], [1.045882353, 2.502647059]], [[0.261470588, 0.410882353], [0.672352941, 0.821764706]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "[[[[8.516470588, 8.516470588], [8.516470588, 8.516470588]], [[1.195294118, 1.157941176], [1.120588235, 1.083235294]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_pruning.py": {
        "torch": {
            "SGD_196": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_242": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_p.size(1)",
                            "Call"
                        ],
                        [
                            "conv2_p.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_257": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_315": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_359": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_365": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_419": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_444": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_451": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_ptq_pytorch_convert.py": {
        "torch": {
            "randn_56": {
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "quantize_per_channel_88": {
                "variable": {
                    "value": "pytorch_q_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "scales": {
                    "value": "converted_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "zero_points": {
                    "value": "converted_zp",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "quantize_per_tensor_90": {
                "variable": {
                    "value": "pytorch_q_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "converted_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "zero_point": {
                    "value": "converted_zp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_quant_utils.py": {
        "torch": {
            "tensor_186": {
                "variable": {
                    "value": "test_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-93, 33, -77, -42, -89, -55, 79, -19, -94, 69, -46, -88, 19, -43, -38, 30, -56, 87, 27, -86, 81, -60, -19, 59, 58, -47, -26, 12, -74, 83, -83, -28, 69, 63, -95, -87]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-16.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "62.87447738647461",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_69": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([31.875, 12.75])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_70": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(sat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_73": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([31.75, 12.7])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_74": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(sat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_79": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([31.875, 12.75])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_80": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(sat, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_83": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([31.75, 12.7])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_84": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(sat, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_89": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([31.875, 1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_90": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(sat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_93": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([31.75, 1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_94": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(sat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_152": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([25.5, 17])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_153": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([-255.0, -170])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_156": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([1.0, 51.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_157": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([0.0, 0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_161": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([25.5, 17])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_162": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([-255.0, -170])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_166": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([21.25, 25.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_167": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([-42.0, 0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_170": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([1.0, 51.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_171": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([0.0, -255.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_175": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([21.25, 25.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_176": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([-42.0, 0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_182": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([21.25, 25.5, 25.5, 1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_183": {
                "input": {
                    "value": "zp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([-42.0, 0.0, -255.0, 0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_201": {
                "input": {
                    "value": "t_min",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(-95.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_202": {
                "input": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(87.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_205": {
                "input": {
                    "value": "t_min",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([-94.0, -95.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_206": {
                "input": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([87.0, 83.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_209": {
                "input": {
                    "value": "t_min",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([-93.0, -94.0, -56.0, -86.0, -74.0, -95.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_210": {
                "input": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([33.0, 79.0, 87.0, 81.0, 83.0, 69.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_218": {
                "input": {
                    "value": "t_min",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(-95.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_219": {
                "input": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(87.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_222": {
                "input": {
                    "value": "t_min",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(-83.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_223": {
                "input": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(72.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_226": {
                "input": {
                    "value": "t_min",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(-94.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_227": {
                "input": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(85.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_235": {
                "input": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_2d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d, across_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_4d, across_dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(95.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_238": {
                "input": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_2d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d, across_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_4d, across_dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor([94.0, 95.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_241": {
                "input": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_2d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d, across_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_4d, across_dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor([93.0, 94.0, 87.0, 86.0, 83.0, 95.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_249": {
                "input": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_2d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d, across_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_4d, across_dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(95.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_252": {
                "input": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_2d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d, across_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_4d, across_dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(83.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_255": {
                "input": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_4d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_max_abs(test_tensor_2d, per_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_2d, across_dim=0)",
                            "Call"
                        ],
                        [
                            "qu.get_tensor_avg_max_abs(test_tensor_4d, across_dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(94.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[31.875, 12.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "input": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([4.0, 10.0])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4, 10])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4.0, 0.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "data": {
                    "value": "[31.75, 12.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "input": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([4.0, 10.0])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4, 10])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4.0, 0.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "data": {
                    "value": "[31.875, 12.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "input": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([4.0, 10.0])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4, 10])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4.0, 0.0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "[31.75, 12.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "input": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([4.0, 10.0])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4, 10])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4.0, 0.0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[31.875, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_90": {
                "input": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([4.0, 10.0])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4, 10])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4.0, 0.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "data": {
                    "value": "[31.75, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_94": {
                "input": {
                    "value": "sat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([4.0, 10.0])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4, 10])",
                            "Call"
                        ],
                        [
                            "torch.tensor([4.0, 0.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "data": {
                    "value": "[-2.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "[25.5, 17]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "[-255.0, -170]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "[0.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "[1.0, 51.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "[-2, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "[25.5, 17]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "[-255.0, -170]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "[-2.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "[21.25, 25.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "data": {
                    "value": "[-42.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "[0.0, -5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "data": {
                    "value": "[1.0, 51.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "[0.0, -255.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "[-2, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "[21.25, 25.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "[-42.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "[-2.0, 5.0, -10.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "[10.0, 10.0, -5.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "[21.25, 25.5, 25.5, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[-42.0, 0.0, -255.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "-95.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "87.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "data": {
                    "value": "[-94.0, -95.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "[87.0, 83.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "[-93.0, -94.0, -56.0, -86.0, -74.0, -95.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "[33.0, 79.0, 87.0, 81.0, 83.0, 69.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "data": {
                    "value": "-95.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "87.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "data": {
                    "value": "-83.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "data": {
                    "value": "72.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "-94.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "data": {
                    "value": "85.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "data": {
                    "value": "95.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "data": {
                    "value": "[94.0, 95.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "[93.0, 94.0, 87.0, 86.0, 83.0, 95.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "data": {
                    "value": "95.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "data": {
                    "value": "83.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "data": {
                    "value": "94.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "-95.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "data": {
                    "value": "87.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[-5.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "[5.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[5.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[4.0, 7.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_quantizer.py": {
        "torch": {
            "Linear_94": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_192": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_277": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "sub_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_220": {
                "input": {
                    "value": "q_param",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "orig_param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_395": {
                "input": {
                    "value": "quant_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(post_quant_module, param_name)",
                            "Call"
                        ],
                        [
                            "getattr(post_quant_module, param_name.replace(FP_BKP_PREFIX, ''))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dummy_quantize_params(pre_quant_param, _ParamToQuant(None, None, None, None, num_bits)) if quantizable else pre_quant_param",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_70": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_74": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_379": {
                "input": {
                    "value": "pre_quant_param",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "post_quant_fp_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(post_quant_module, param_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_ranking.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[11.0, 12], [13, 14]], [[15.0, 16], [17, 18]]], [[[21.0, 22], [23, 24]], [[25.0, 26], [27, 28]]], [[[31.0, 32], [33, 34]], [[35.0, 36], [37, 38]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sim_bn_fold.py": {
        "torch": {
            "Linear_58": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "variable": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_99": {
                "variable": {
                    "value": "conv3d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_100": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_c",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "unfolded",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "param_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_108": {
                "variable": {
                    "value": "optimizer_folded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "folded.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optimizer_unfolded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unfolded.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "MSELoss_110": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "rand_like_119": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_22": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_23": {
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_24": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_summarygraph.py": {
        "torch": {
            "randn_571": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_342": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelWithAvgPool()",
                            "Call"
                        ],
                        [
                            "ModelWithGemms()",
                            "Call"
                        ],
                        [
                            "TestModel()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(m)",
                            "Call"
                        ],
                        [
                            "self.post_conv_bn",
                            "Attribute"
                        ],
                        [
                            "self.post_conv1[1][1]",
                            "Subscript"
                        ],
                        [
                            "self.post_conv2",
                            "Attribute"
                        ],
                        [
                            "self.post_conv",
                            "Attribute"
                        ],
                        [
                            "self.post_conv1",
                            "Attribute"
                        ],
                        [
                            "self.post_conv2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_402": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_403": {
                "variable": {
                    "value": "self.post_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(10), nn.ModuleList([nn.ReLU(), nn.ModuleList([nn.Tanh(), nn.MaxPool2d(2)])])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_408": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_409": {
                "variable": {
                    "value": "self.post_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU6(), nn.MaxPool2d(4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_444": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_445": {
                "variable": {
                    "value": "self.post_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(self.out_ch), nn.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_458": {
                "variable": {
                    "value": "self.blocks2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_459": {
                "variable": {
                    "value": "self.blocks4_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(24), Block(48)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_503": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_504": {
                "variable": {
                    "value": "self.post_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU(), nn.Tanh()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_505": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_243": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_261": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_263": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_264": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_266": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_268": {
                "variable": {
                    "value": "self.drop3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_320": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_321": {
                "variable": {
                    "value": "self.post_conv_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Tanh(), nn.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_404": {
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_405": {
                "modules": {
                    "value": "[nn.ReLU(), nn.ModuleList([nn.Tanh(), nn.MaxPool2d(2)])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU6_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_409": {
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_445": {
                "num_features": {
                    "value": "self.out_ch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_407": {
                "modules": {
                    "value": "[nn.Tanh(), nn.MaxPool2d(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tanh_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_407": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_thresholding.py": {
        "torch": {
            "ones_76": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_88": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_97": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "expected_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "expected_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "expected_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "expected_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[[[[-1.2982, 0.7574, 0.7962], [-0.6695, 1.5907, 0.2659], [0.1423, 0.3165, -0.7629]], [[-0.548, -1.2718, 0.8286], [-0.6427, 0.3814, -0.7988], [1.0346, 1.3023, -0.9674]], [[-0.7951, 1.8784, -0.5654], [0.0456, -0.2849, -0.3332], [-0.2367, 0.7467, 0.9212]]], [[[1.3672, 0.2993, -0.0619], [1.8156, 0.7599, 0.1815], [0.4136, 1.8316, 1.7214]], [[0.5125, -1.5329, 0.9257], [0.92, 0.4376, 0.5743], [-0.0097, 0.9473, -0.0899]], [[0.2372, 2.4369, -0.341], [-1.0595, 0.8056, -0.0357], [-1.0105, -0.1451, -0.4194]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eq_112": {
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([1.0, 1.0, 0.0, 1.0, 0.0, 1.0], device=map.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_140": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distiller.create_mask_threshold_criterion(a, threshold=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_level_criterion(a, desired_sparsity=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_sensitivity_criterion(a, sensitivity=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]]], device=mask.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_150": {
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([0.0, 1.0], device=map.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_177": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distiller.create_mask_threshold_criterion(a, threshold=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_level_criterion(a, desired_sparsity=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_sensitivity_criterion(a, sensitivity=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]]], device=mask.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_187": {
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([1.0, 0.0, 1.0], device=map.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_214": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distiller.create_mask_threshold_criterion(a, threshold=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_level_criterion(a, desired_sparsity=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_sensitivity_criterion(a, sensitivity=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]]], device=mask.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_224": {
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([1.0, 1.0, 0.0], device=map.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_250": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distiller.create_mask_threshold_criterion(a, threshold=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_level_criterion(a, desired_sparsity=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_sensitivity_criterion(a, sensitivity=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]], [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]]], device=mask.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_258": {
                "input": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([0.0, 0.0, 1.0, 1.0], device=mask.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_259": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distiller.create_mask_threshold_criterion(a, threshold=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_level_criterion(a, desired_sparsity=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_sensitivity_criterion(a, sensitivity=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], device=mask.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_271": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distiller.create_mask_threshold_criterion(a, threshold=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_level_criterion(a, desired_sparsity=0.3)",
                            "Call"
                        ],
                        [
                            "distiller.create_mask_sensitivity_criterion(a, sensitivity=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor([[0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0]], device=mask.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "[1.0, 1.0, 0.0, 1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "map.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "map.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "[1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "map.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_224": {
                "data": {
                    "value": "[1.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "map.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "data": {
                    "value": "[[0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}