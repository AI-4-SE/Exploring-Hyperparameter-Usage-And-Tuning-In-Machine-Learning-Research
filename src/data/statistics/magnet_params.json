{
    "models/action_execution/actor_critic_nn.py": {
        "tensorflow": {
            "flatten_205": {
                "structure": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(z2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(z2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(z2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/action_execution/nerve_net.py": {
        "tensorflow": {
            "set_verbosity_9": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "input_layer_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 124, 38 * 11, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "ans",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h[120], h[121], h[122], h[123]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_192": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "ans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h[120], h[121], h[122], h[123]], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Estimator_218": {
                "variable": {
                    "value": "mnist_classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "criric_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_221": {
                "variable": {
                    "value": "logging_hook",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_to_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'probabilities': 'softmax_tensor'}",
                            "Dict"
                        ]
                    ]
                },
                "every_n_iter": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "numpy_input_fn_224": {
                "variable": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'data': train_data}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(1, 4 * 7).astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "input_layer_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_layer_data[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 38, 11, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_60": {
                "variable": {
                    "value": "conv1_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_layer_data[:, i, :], [-1, 38, 11, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_67": {
                "variable": {
                    "value": "pool1_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=input_layer_agent_mlp0, filters=32, kernel_size=[5, 5], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "conv2_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv1_agent_mlp0, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_76": {
                "variable": {
                    "value": "pool2_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool1_agent_mlp0, filters=64, kernel_size=[5, 5], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "pool2_flat_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv2_agent_mlp0, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 9 * 2 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "dense_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2_flat_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool2_agent_mlp0, [-1, 9 * 2 * 64])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "dropout_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=pool2_flat_agent_mlp0, units=1024, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "dense_82": {
                "variable": {
                    "value": "logits_agent_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dropout_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=dense_agent_mlp0, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_agent_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dropout_agent_mlp0, units=7)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "softmax_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "input_layer_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(list_input_layer_agent_i, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, int(np.sum(vertexes_mask)) + 3, 7, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_138": {
                "variable": {
                    "value": "conv1_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer_agent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(list_input_layer_agent_i, 0), [-1, int(np.sum(vertexes_mask)) + 3, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_145": {
                "variable": {
                    "value": "pool1_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1_agent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=input_layer_agent, filters=32, kernel_size=[5, 5], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_147": {
                "variable": {
                    "value": "conv2_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1_agent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv1_agent, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "conv2_flat_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv2_agent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool1_agent, filters=64, kernel_size=[5, 5], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int((np.sum(vertexes_mask) + 3) // 2) * 3 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_155": {
                "variable": {
                    "value": "dense_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_flat_agent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv2_agent, [-1, int((np.sum(vertexes_mask) + 3) // 2) * 3 * 64])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "dropout_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense_agent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=conv2_flat_agent, units=1024, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "dense_158": {
                "variable": {
                    "value": "logits_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dropout_agent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=dense_agent, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_agent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dropout_agent, units=7)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "softmax_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_195": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "EstimatorSpec_206": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(labels=labels, predictions=ans)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': tf.metrics.accuracy(labels=labels, predictions=predictions['classes'])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "run_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "input_layer_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_layer_data[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 38, 11, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "variable": {
                    "value": "conv1_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_layer_data[:, i, :], [-1, 38, 11, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_36": {
                "variable": {
                    "value": "pool1_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=input_layer_vertex_mlp0, filters=32, kernel_size=[5, 5], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "conv2_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv1_vertex_mlp0, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_45": {
                "variable": {
                    "value": "pool2_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool1_vertex_mlp0, filters=64, kernel_size=[5, 5], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "pool2_flat_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv2_vertex_mlp0, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 9 * 2 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_47": {
                "variable": {
                    "value": "dense_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2_flat_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool2_vertex_mlp0, [-1, 9 * 2 * 64])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_49": {
                "variable": {
                    "value": "dropout_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=pool2_flat_vertex_mlp0, units=1024, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "dense_51": {
                "variable": {
                    "value": "logits_vertex_mlp0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dropout_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=dense_vertex_mlp0, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_vertex_mlp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dropout_vertex_mlp0, units=7)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "softmax_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "input_layer_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([h[120], h[121], h[122], h[123]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 4, 7, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_93": {
                "variable": {
                    "value": "conv1_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat([h[120], h[121], h[122], h[123]], 0), [-1, 4, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_100": {
                "variable": {
                    "value": "pool1_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=input_layer_vertex, filters=32, kernel_size=[5, 5], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "conv2_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv1_vertex, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "conv2_flat_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv2_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool1_vertex, filters=64, kernel_size=[5, 5], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2 * 3 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_110": {
                "variable": {
                    "value": "dense_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_flat_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv2_vertex, [-1, 2 * 3 * 64])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_112": {
                "variable": {
                    "value": "dropout_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=conv2_flat_vertex, units=1024, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "dense_114": {
                "variable": {
                    "value": "logits_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dropout_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=dense_vertex, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dropout_vertex, units=7)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "softmax_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "input_layer_vertex_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([m[i], h[i]], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 14]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_174": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "NUM_HIDDEN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dense_177": {
                "variable": {
                    "value": "dense_vertex_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer_vertex_lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat([m[i], h[i]], 1), [1, 14])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_178": {
                "variable": {
                    "value": "logits_vertex_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense_vertex_lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input_layer_vertex_lstm, units=64, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_180": {
                "variable": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_vertex_lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dense_vertex_lstm, units=7)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "softmax_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_186": {
                "input": {
                    "value": "ans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h[120], h[121], h[122], h[123]], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "EstimatorSpec_190": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'classes': tf.argmax(input=ans, axis=1), 'probabilities': ans}",
                            "Dict"
                        ]
                    ]
                }
            },
            "EstimatorSpec_199": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(labels=labels, predictions=ans)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss=loss, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_202": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(labels=labels, predictions=ans)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions['classes']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'classes': tf.argmax(input=ans, axis=1), 'probabilities': ans}",
                            "Dict"
                        ]
                    ]
                }
            },
            "accuracy_204": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions['classes']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'classes': tf.argmax(input=ans, axis=1), 'probabilities': ans}",
                            "Dict"
                        ]
                    ]
                }
            },
            "concat_134": {
                "values": {
                    "value": "list_input_layer_agent_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_input_layer_agent.copy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_91": {
                "values": {
                    "value": "[h[120], h[121], h[122], h[123]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_168": {
                "values": {
                    "value": "[m[i], h[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_169": {
                "values": {
                    "value": "[m[i], h[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_172": {
                "initial_value": {
                    "value": "tf.random_normal([NUM_HIDDEN, num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_173": {
                "initial_value": {
                    "value": "tf.random_normal([num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_global_step_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/graph_construction/transformer.py": {
        "tensorflow": {
            "moments_26": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - mean) / (variance + epsilon) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(normalized, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lookup_table",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_116": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lookup_table', dtype=tf.float32, shape=[vocab_size, num_units], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.zeros(shape=[1, num_units]), lookup_table[1:, :]), 0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(position_enc)",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.zeros(shape=[1, num_units]), lookup_table[1:, :]), 0)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_148": {
                "variable": {
                    "value": "position_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(T), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_160": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "position_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2.0 * i / num_units) for i in range(num_units)] for pos in range(T)])",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_165": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lookup_table', dtype=tf.float32, shape=[vocab_size, num_units], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.zeros(shape=[1, num_units]), lookup_table[1:, :]), 0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(position_enc)",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.zeros(shape=[1, num_units]), lookup_table[1:, :]), 0)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "position_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(T), 0), [N, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_205": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_206": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_207": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(Q, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_211": {
                "variable": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(K, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_212": {
                "variable": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(V, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(Q, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K_, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_221": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.reduce_sum(keys, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_222": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(keys, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_223": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(key_masks, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(queries)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_226": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(key_masks, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(masks) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, inputs)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, position_ind)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_238": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, inputs)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, position_ind)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_241": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.reduce_sum(queries, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_242": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(queries, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(query_masks, -1), [1, 1, tf.shape(keys)[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_243": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(query_masks, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, tf.shape(keys)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, inputs)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, position_ind)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "tf.convert_to_tensor(is_training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, inputs)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, position_ind)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(V, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_253": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(outputs, num_heads, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_284": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv1d_289": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'positional_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'positional_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_112": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.zeros(shape=[1, num_units]), lookup_table[1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'positional_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_163": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.zeros(shape=[1, num_units]), lookup_table[1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'positional_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_230": {
                "variable": {
                    "value": "diag_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LinearOperatorLowerTriangular_231": {
                "variable": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": []
                },
                "tril": {
                    "value": "diag_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs[0, :, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_dense_231": {
                "variable": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_232": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tril, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(outputs)[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_235": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(masks, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(masks) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, inputs)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, position_ind)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'positional_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_30": {
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_148": {
                "input": {
                    "value": "tf.range(T)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_210": {
                "value": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(queries, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_211": {
                "value": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(keys, num_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "inputs.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_212": {
                "value": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(keys, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_215": {
                "a": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_221": {
                "x": {
                    "value": "tf.reduce_sum(keys, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_223": {
                "input": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(keys, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_225": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, inputs)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, position_ind)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_226": {
                "x": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(keys, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_241": {
                "x": {
                    "value": "tf.reduce_sum(queries, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_243": {
                "input": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(queries, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(query_masks, -1), [1, 1, tf.shape(keys)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_253": {
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, inputs)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, position_ind)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_221": {
                "input_tensor": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_232": {
                "input": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.LinearOperatorLowerTriangular(diag_vals).to_dense()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_234": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tril, 0), [tf.shape(outputs)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_235": {
                "x": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tril, 0), [tf.shape(outputs)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_241": {
                "input_tensor": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_247": {
                "value": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_112": {
                "shape": {
                    "value": "[1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "shape": {
                    "value": "[1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_223": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_243": {
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_232": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, inputs)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.embedding_lookup(lookup_table, position_ind)",
                            "Call"
                        ],
                        [
                            "outputs * num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils_for_game/const.py": {
        "tensorflow": {
            "set_verbosity_40": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}