{
    "architecture/model.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.linear_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_14": {
                "variable": {
                    "value": "self.lsm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "architecture/transformer.py": {
        "torch": {
            "zeros_8": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_9": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_9": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_10": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_11": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_12": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inner_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_76": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "split_head(self.linear_q(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(self.dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_120": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(dropout) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm(hidden_size) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(hidden_size, dropout, num_heads, ff_size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_138": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_156": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm(hidden_size, eps=1e-06) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_157": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(dropout) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(hidden_size, dropout, num_heads, ff_size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_182": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gt_193": {
                "variable": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_mask + upper_triangle",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_10": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout(self.softmax(scores))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "split_head(self.linear_v(memory))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "(previous, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_180": {
                "input": {
                    "value": "torch.ones(1000, 1000)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_203": {
                "tensors": {
                    "value": "save_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_121": {
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_156": {
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_157": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_180": {
                "*size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/dataset.py": {
        "torch": {
            "tensor_56": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.encode(ex) for ex in padded]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "decoding/beam.py": {
        "torch": {
            "topk_101": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_170": {
                "tensors": {
                    "value": "[ht.tokenid for ht in reversed(list_of_hypotails)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "decoding/generation.py": {
        "torch": {
            "Tensor_28": {
                "variable": {
                    "value": "starts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "selection",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "selection",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "decoding/greedy.py": {
        "torch": {
            "Tensor_20": {
                "variable": {
                    "value": "starts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "finish_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[starts.view(batch_size, beam_size, -1)[:, 0, :]]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "any_40": {
                "input": {
                    "value": "~finish_mask.bool()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "optimization/optim.py": {
        "torch": {
            "AdamW_15": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0.9, 0.998]",
                    "type": "List",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_16": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.lr_schedule_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_schedule_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_grad_enabled_59": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "SummaryWriter_14": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "runs/cds_experiment",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_80": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_32": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_36": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_38": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_60": {
                "obj": {
                    "value": "save_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "full_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}