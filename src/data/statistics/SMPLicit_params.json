{
    "fit_SMPLicit/utils/render_utils.py": {
        "sklearn": {
            "normalize_27": {
                "variable": {
                    "value": "faceNormals",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "faceNormals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.cross(U, V)",
                            "Call"
                        ],
                        [
                            "normalize(faceNormals)",
                            "Call"
                        ],
                        [
                            "np.reshape(faceNormals, originalShape)",
                            "Call"
                        ],
                        [
                            "U_cuda.cross(V_cuda)",
                            "Call"
                        ],
                        [
                            "F.normalize(faceNormals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(faceNormals, originalShape)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_50": {
                "variable": {
                    "value": "vertex_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "vertex_normals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(vertices.shape)",
                            "Call"
                        ],
                        [
                            "np.add.reduceat(faceNormals[:, index_sorted[:, 1], :][0], np.concatenate(([0], np.cumsum(np.unique(index_sorted[:, 0], return_counts=True)[1])[:-1])))[None, :]",
                            "Subscript"
                        ],
                        [
                            "vertex_normals.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "np.reshape(vertex_normals, [-1, 3])",
                            "Call"
                        ],
                        [
                            "normalize(vertex_normals)",
                            "Call"
                        ],
                        [
                            "np.reshape(vertex_normals, originalShape)",
                            "Call"
                        ],
                        [
                            "np.add.reduceat(faceNormals[:, index_sorted[:, 1], :][0], np.concatenate(([0], np.cumsum(np.unique(index_sorted[:, 0], return_counts=True)[1])[:-1])))[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vertex_normals).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(vertex_normals, dim=2)",
                            "Call"
                        ],
                        [
                            "vertex_normals.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_67": {
                "variable": {
                    "value": "vertices_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vertices.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "U_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U_cuda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vertices_cuda[:, trifaces[:, 1], :] - vertices_cuda[:, trifaces[:, 0], :]",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(U_cuda, [-1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "V_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V_cuda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vertices_cuda[:, trifaces[:, 2], :] - vertices_cuda[:, trifaces[:, 1], :]",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(V_cuda, [-1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normalize_77": {
                "variable": {
                    "value": "faceNormals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faceNormals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.cross(U, V)",
                            "Call"
                        ],
                        [
                            "normalize(faceNormals)",
                            "Call"
                        ],
                        [
                            "np.reshape(faceNormals, originalShape)",
                            "Call"
                        ],
                        [
                            "U_cuda.cross(V_cuda)",
                            "Call"
                        ],
                        [
                            "F.normalize(faceNormals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(faceNormals, originalShape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "faceNormals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faceNormals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.cross(U, V)",
                            "Call"
                        ],
                        [
                            "normalize(faceNormals)",
                            "Call"
                        ],
                        [
                            "np.reshape(faceNormals, originalShape)",
                            "Call"
                        ],
                        [
                            "U_cuda.cross(V_cuda)",
                            "Call"
                        ],
                        [
                            "F.normalize(faceNormals, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(faceNormals, originalShape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "originalShape",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "U.shape",
                            "Attribute"
                        ],
                        [
                            "vertex_normals.shape",
                            "Attribute"
                        ],
                        [
                            "list(U_cuda.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "vertex_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vertex_normals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(vertices.shape)",
                            "Call"
                        ],
                        [
                            "np.add.reduceat(faceNormals[:, index_sorted[:, 1], :][0], np.concatenate(([0], np.cumsum(np.unique(index_sorted[:, 0], return_counts=True)[1])[:-1])))[None, :]",
                            "Subscript"
                        ],
                        [
                            "vertex_normals.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "np.reshape(vertex_normals, [-1, 3])",
                            "Call"
                        ],
                        [
                            "normalize(vertex_normals)",
                            "Call"
                        ],
                        [
                            "np.reshape(vertex_normals, originalShape)",
                            "Call"
                        ],
                        [
                            "np.add.reduceat(faceNormals[:, index_sorted[:, 1], :][0], np.concatenate(([0], np.cumsum(np.unique(index_sorted[:, 0], return_counts=True)[1])[:-1])))[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vertex_normals).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(vertex_normals, dim=2)",
                            "Call"
                        ],
                        [
                            "vertex_normals.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_98": {
                "variable": {
                    "value": "vertex_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertex_normals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(vertices.shape)",
                            "Call"
                        ],
                        [
                            "np.add.reduceat(faceNormals[:, index_sorted[:, 1], :][0], np.concatenate(([0], np.cumsum(np.unique(index_sorted[:, 0], return_counts=True)[1])[:-1])))[None, :]",
                            "Subscript"
                        ],
                        [
                            "vertex_normals.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "np.reshape(vertex_normals, [-1, 3])",
                            "Call"
                        ],
                        [
                            "normalize(vertex_normals)",
                            "Call"
                        ],
                        [
                            "np.reshape(vertex_normals, originalShape)",
                            "Call"
                        ],
                        [
                            "np.add.reduceat(faceNormals[:, index_sorted[:, 1], :][0], np.concatenate(([0], np.cumsum(np.unique(index_sorted[:, 0], return_counts=True)[1])[:-1])))[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vertex_normals).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(vertex_normals, dim=2)",
                            "Call"
                        ],
                        [
                            "vertex_normals.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SMPLicit/SMPL.py": {
        "torch": {
            "device_668": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_700": {
                "variable": {
                    "value": "vbeta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([beta])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_701": {
                "variable": {
                    "value": "vpose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([pose])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_708": {
                "variable": {
                    "value": "vpose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([rpose])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "Jy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "Jz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "variable": {
                    "value": "v_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "joint_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "verts[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.joint_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "joint_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "verts[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.joint_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "joint_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "verts[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.joint_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "joints",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[joint_x, joint_y, joint_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_122": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "v_posed_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "variable": {
                    "value": "v_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_smpl, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_153": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(applying_T[0, :, :3, :3] ** 2).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_153": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_156": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "applying_T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "T[0, correspondance].mean(2)",
                            "Call"
                        ],
                        [
                            "T[0, correspondance].mean(2)",
                            "Call"
                        ],
                        [
                            "T[0, correspondance[0, :, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_167": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "v_posed_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_195": {
                "variable": {
                    "value": "v_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_smpl, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_198": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(applying_T[0, :, :3, :3] ** 2).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_198": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "applying_T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "T[0, correspondance].mean(2)",
                            "Call"
                        ],
                        [
                            "T[0, correspondance].mean(2)",
                            "Call"
                        ],
                        [
                            "T[0, correspondance[0, :, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_212": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_217": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_259": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "v_posed_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_263": {
                "variable": {
                    "value": "v_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_smpl, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_271": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "applying_T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "T[0, correspondance].mean(2)",
                            "Call"
                        ],
                        [
                            "T[0, correspondance].mean(2)",
                            "Call"
                        ],
                        [
                            "T[0, correspondance[0, :, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_283": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_288": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_300": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "v_posed_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_304": {
                "variable": {
                    "value": "v_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_smpl, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_305": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_316": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_333": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "v_posed_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "v_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_smpl, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "v_normals_posed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_normals, torch.ones(num_batch, v_normals.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_341": {
                "variable": {
                    "value": "v_normals_posed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_normals_posed, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_354": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_359": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_380": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "v_posed_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_384": {
                "variable": {
                    "value": "v_homo_smpl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_smpl, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_385": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_427": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_431": {
                "variable": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_432": {
                "variable": {
                    "value": "Jy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_433": {
                "variable": {
                    "value": "Jz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_434": {
                "variable": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_441": {
                "variable": {
                    "value": "pose_displ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_446": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_449": {
                "variable": {
                    "value": "v_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_456": {
                "variable": {
                    "value": "invT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cloth_posed, torch.ones(len(v_cloth_posed), 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_465": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_470": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_473": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_479": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_483": {
                "variable": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_484": {
                "variable": {
                    "value": "Jy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_485": {
                "variable": {
                    "value": "Jz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_486": {
                "variable": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_490": {
                "variable": {
                    "value": "pose_displ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_495": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_498": {
                "variable": {
                    "value": "v_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_505": {
                "variable": {
                    "value": "invT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cloth_posed, torch.ones(len(v_cloth_posed), 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_515": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_520": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_523": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "v_normals_posed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_normals.unsqueeze(0), torch.ones(num_batch, v_normals.shape[0], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_527": {
                "variable": {
                    "value": "v_normals_posed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_normals_posed, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_535": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_539": {
                "variable": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_540": {
                "variable": {
                    "value": "Jy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_541": {
                "variable": {
                    "value": "Jz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_542": {
                "variable": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_549": {
                "variable": {
                    "value": "pose_displ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_554": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_556": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_557": {
                "variable": {
                    "value": "v_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_568": {
                "variable": {
                    "value": "invT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_569": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cloth_posed, torch.ones(len(v_cloth_posed), 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_578": {
                "variable": {
                    "value": "pose_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_583": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_585": {
                "variable": {
                    "value": "v_posed_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_586": {
                "variable": {
                    "value": "v_homo_cloth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo_cloth, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_589": {
                "variable": {
                    "value": "v_normals_posed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_normals.unsqueeze(0), torch.ones(num_batch, v_normals.shape[0], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_590": {
                "variable": {
                    "value": "v_normals_posed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(v_normals_posed, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_598": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_602": {
                "variable": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_603": {
                "variable": {
                    "value": "Jy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_604": {
                "variable": {
                    "value": "Jz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_605": {
                "variable": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_612": {
                "variable": {
                    "value": "pose_displ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_617": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ],
                        [
                            "self.weight.expand(num_batch, *self.weight.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_619": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_620": {
                "variable": {
                    "value": "v_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_627": {
                "variable": {
                    "value": "invT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[0, correspondance]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_628": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cloth_posed, torch.ones(len(v_cloth_posed), 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_653": {
                "variable": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_654": {
                "variable": {
                    "value": "Jy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_655": {
                "variable": {
                    "value": "Jz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_656": {
                "variable": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "correspondance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 2)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 2)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "correspondance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 2)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 2)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "correspondance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(correspondance, -1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 2)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 2)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(dists, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "corresponding_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "corresponding_dists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(corresponding_dists, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_294": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_327": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_374": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_374": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_400": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_416": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_454": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_503": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_566": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_625": {
                "variable": {
                    "value": "correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "np_v_template",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(model['v_template'], dtype=np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "ndarray": {
                    "value": "np_shapedirs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(model['shapedirs'], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "np.reshape(np_shapedirs, [-1, self.num_betas]).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "np_J_regressor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(model['J_regressor'], dtype=np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "np_posedirs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(model['posedirs'], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "np.reshape(np_posedirs, [-1, num_pose_basis]).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "np_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(model['weights'], dtype=np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "vertex_count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np_weights.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_62": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "input": {
                    "value": "pose_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmin_137": {
                "variable": {
                    "value": "new_correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "input": {
                    "value": "v_posed_homo_smpl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmin_182": {
                "variable": {
                    "value": "new_correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "input": {
                    "value": "v_posed_homo_smpl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_201": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmin_228": {
                "variable": {
                    "value": "new_correspondance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl.unsqueeze(1) - v_cloth.unsqueeze(2)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "dists[0]",
                            "Subscript"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "((v_smpl - v_cloth_posed.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_241": {
                "variable": {
                    "value": "sum_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(corresponding_dists ** 2).sum(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_263": {
                "input": {
                    "value": "v_posed_homo_smpl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_271": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_304": {
                "input": {
                    "value": "v_posed_homo_smpl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_305": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_337": {
                "input": {
                    "value": "v_posed_homo_smpl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_338": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_341": {
                "input": {
                    "value": "v_normals_posed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_normals, torch.ones(num_batch, v_normals.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance[0]], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_normals.unsqueeze(0), torch.ones(num_batch, v_normals.shape[0], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "v_normals_posed[:, :, :3, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([v_normals.unsqueeze(0), torch.ones(num_batch, v_normals.shape[0], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "v_normals_posed[:, :, :3, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_384": {
                "input": {
                    "value": "v_posed_homo_smpl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_smpl, torch.ones(num_batch, v_posed_smpl.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_385": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_430": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_449": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_458": {
                "input": {
                    "value": "invT",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_473": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_482": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_498": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_507": {
                "input": {
                    "value": "invT",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_523": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_527": {
                "input": {
                    "value": "v_normals_posed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_normals, torch.ones(num_batch, v_normals.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance[0]], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_normals.unsqueeze(0), torch.ones(num_batch, v_normals.shape[0], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "v_normals_posed[:, :, :3, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([v_normals.unsqueeze(0), torch.ones(num_batch, v_normals.shape[0], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "v_normals_posed[:, :, :3, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_538": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_557": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_570": {
                "input": {
                    "value": "invT",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_586": {
                "input": {
                    "value": "v_posed_homo_cloth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed_cloth, torch.ones(num_batch, v_posed_cloth.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_590": {
                "input": {
                    "value": "v_normals_posed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_normals, torch.ones(num_batch, v_normals.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance[0]], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_normals.unsqueeze(0), torch.ones(num_batch, v_normals.shape[0], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "v_normals_posed[:, :, :3, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([v_normals.unsqueeze(0), torch.ones(num_batch, v_normals.shape[0], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(T[0, correspondance], torch.unsqueeze(v_normals_posed, -1))",
                            "Call"
                        ],
                        [
                            "v_normals_posed[:, :, :3, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_601": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_620": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_623": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_629": {
                "input": {
                    "value": "invT",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ],
                        [
                            "torch.inverse(T[0, correspondance])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_652": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "np_joint_regressor[:, :14]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "np_joint_regressor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(model['cocoplus_regressor'], dtype=np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_101": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_smpl.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_149": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_193": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_smpl.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_194": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_246": {
                "input": {
                    "value": "(corresponding_dists ** 4).sum(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_261": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_smpl.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_262": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_302": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_smpl.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_303": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_335": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_smpl.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_336": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_340": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_normals.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_382": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_smpl.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_383": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_394": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_410": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_448": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_457": {
                "*size": {
                    "value": "len(v_cloth_posed)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_472": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_497": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_506": {
                "*size": {
                    "value": "len(v_cloth_posed)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_522": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_526": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_normals.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_556": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_569": {
                "*size": {
                    "value": "len(v_cloth_posed)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_585": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed_cloth.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_589": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_normals.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_619": {
                "*size": {
                    "value": "num_batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_628": {
                "*size": {
                    "value": "len(v_cloth_posed)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_250": {
                "variable": {
                    "value": "sum_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corresponding_dists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(corresponding_dists, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_250": {
                "variable": {
                    "value": "sum_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_250": {
                "variable": {
                    "value": "sum_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_403": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_419": {
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.25349993, 0.25009069, 0.21440795, 0.78280628, 0.08625954, 0.28128183, 0.06626327, -0.26495767, 0.09009246, 0.06537955])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_420": {
                "input": {
                    "value": "new_beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SMPLicit/SMPLicit.py": {
        "torch": {
            "zeros_56": {
                "variable": {
                    "value": "self.Astar_pose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "72",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "in_verts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_72": {
                "obj": {
                    "value": "pose",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(pose)",
                            "Call"
                        ],
                        [
                            "pose.reshape(1, -1).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros(72)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_74": {
                "obj": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(beta)",
                            "Call"
                        ],
                        [
                            "beta.reshape(1, -1).cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros(10)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_69": {
                "obj": {
                    "value": "Zs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "SMPLicit/SMPLicit_options.py": {
        "torch": {}
    },
    "SMPLicit/network.py": {
        "torch": {
            "weight_norm_12": {
                "variable": {
                    "value": "self.fc0_cloth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(n_z_style, 128, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_13": {
                "variable": {
                    "value": "self.fc1_cloth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, 128, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_15": {
                "variable": {
                    "value": "self.fc0_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(point_pos_size, 128, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_16": {
                "variable": {
                    "value": "self.fc1_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(128, 256, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_18": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(128 + 256 + n_z_cut, 312, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(312, 312, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(312, 256, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_21": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(256, 128, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_22": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(128, output_dim, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_cloth, x_position, uvmap_representation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "n_z_style",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_15": {
                "in_channels": {
                    "value": "point_pos_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_18": {
                "in_channels": {
                    "value": "128 + 256 + n_z_cut",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "312",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "in_channels": {
                    "value": "312",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "312",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "in_channels": {
                    "value": "312",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_22": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SMPLicit/smplicit_core_test.py": {
        "torch": {
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_53": {
                "obj": {
                    "value": "z_cut",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z[:self.n_z_cut]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(z_cut).cuda()",
                            "Call"
                        ],
                        [
                            "z_cut.cuda().reshape(1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_55": {
                "obj": {
                    "value": "z_style",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z[self.n_z_cut:]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(z_style).cuda()",
                            "Call"
                        ],
                        [
                            "z_style.cuda().reshape(1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_91": {
                "f": {
                    "value": "self.filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SMPLicit/util_smpl.py": {
        "torch": {
            "norm_30": {
                "variable": {
                    "value": "l1norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_31": {
                "variable": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(theta + 1e-08, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_32": {
                "variable": {
                    "value": "normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "theta[:, 3:].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_34": {
                "variable": {
                    "value": "v_cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_35": {
                "variable": {
                    "value": "v_sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_36": {
                "variable": {
                    "value": "quat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cos, v_sin * normalized]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "rotMat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "Js",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Js",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(Js, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[A0]",
                            "List"
                        ],
                        [
                            "torch.stack(results, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "Js_w0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Js, Variable(torch.zeros(N, 24, 1, 1)).to(Rs.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "init_bone",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[A0]",
                            "List"
                        ],
                        [
                            "torch.stack(results, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Js_w0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([Js, Variable(torch.zeros(N, 24, 1, 1)).to(Rs.device)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_92": {
                "variable": {
                    "value": "init_bone",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_bone",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(results, Js_w0)",
                            "Call"
                        ],
                        [
                            "F.pad(init_bone, [3, 0, 0, 0, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[3, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "root_rotation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Rs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "rot_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(np_rot_x).float()).to(Rs.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_74": {
                "variable": {
                    "value": "R_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 0, 0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "t_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t, Variable(torch.ones(N, 1, 1)).to(R.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "res_here",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "results[parent[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "A_here",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_A(Rs[:, i], j_here)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "[R_homo, t_homo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_102": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "ndarray": {
                    "value": "np_rot_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([[1, 0, 0], [0, -1, 0], [0, 0, -1]], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "np.reshape(np.tile(np_rot_x, [N, 1]), [N, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Rs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Rs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example.py": {
        "torch": {}
    },
    "examples/example_fullbody.py": {
        "torch": {}
    },
    "examples/interpolate.py": {
        "torch": {}
    },
    "fit_SMPLicit/fit_SMPLicit.py": {
        "torch": {
            "abs_145": {
                "variable": {
                    "value": "unsigned_distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "smpl_mesh_sdf(coords_tensor.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_233": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "_opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "empty_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_283": {
                "input": {
                    "value": "style",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_276": {
                "input": {
                    "value": "pred_dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SMPLicit_Layer.forward(_opt.index_cloth, empty_tensor, style, input_position_points)",
                            "Call"
                        ],
                        [
                            "SMPLicit_Layer.forward(_opt.index_cloth, shape, style, input_position_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_289": {
                "input": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_273": {
                "input": {
                    "value": "pred_dists - _opt.clamp_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_274": {
                "input": {
                    "value": "pred_dists - _opt.clamp_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_287": {
                "input": {
                    "value": "shape - center_z_cut",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_308": {
                "tensors": {
                    "value": "(shape, style)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fit_SMPLicit/options/image_fitting_options.py": {
        "torch": {
            "zeros_95": {
                "variable": {
                    "value": "self._opt.pose_inference_repose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "72",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "self._opt.pose_inference_repose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "72",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "self._opt.pose_inference_repose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "72",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "self._opt.pose_inference_repose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "72",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "self._opt.pose_inference_repose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "72",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "self._opt.pose_inference_repose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "72",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fit_SMPLicit/utils/image_fitting.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(torch.rand(1, n_shape_params).cuda() - 0.5) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.pose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(pose).cuda() / self.pose_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(beta).cuda() / self.beta_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(trans).cuda() / self.trans_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "posed_verts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_246": {
                "variable": {
                    "value": "in_verts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_247": {
                "variable": {
                    "value": "in_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(torch.rand(1, n_style_params).cuda() - 0.5) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(initialize_style).unsqueeze(0).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_236": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_20": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "n_shape_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_17": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "n_style_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "fit_SMPLicit/utils/projection.py": {
        "torch": {}
    }
}