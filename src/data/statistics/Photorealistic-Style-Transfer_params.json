{
    "src/hrnet.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "num_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor(kernel_size / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.identity_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvLayer(in_channels, out_channels // 4, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvLayer(in_channels, out_channels, 1, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.identity_block(x)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer5_1(map4_1)",
                            "Call"
                        ],
                        [
                            "self.layer6_1(out)",
                            "Call"
                        ],
                        [
                            "self.layer7_1(out)",
                            "Call"
                        ],
                        [
                            "self.layer8_1(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "map3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.layer3_1(map2_1), upsample(map2_2, 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "map3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.downsample3_1(map2_1), self.layer3_2(map2_2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "map3_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.downsample3_2(map2_1), self.downsample3_3(map2_2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "map4_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.layer4_1(map3_1), upsample(map3_2, 2), upsample(map3_3, 4))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_38": {
                "num_features": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_41": {
                "num_features": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_44": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_50": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/style_transfer.py": {
        "torch": {
            "Adam_40": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "style_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cfg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_41": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(style_net.parameters(), lr=cfg['lr'])",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "cfg['step_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cfg",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "cfg['gamma']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cfg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_59": {
                "variable": {
                    "value": "content_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(target_features['conv4_2'] - content_features['conv4_2']) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_110": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_68": {
                "input": {
                    "value": "(target_gram_matrix - style_gram_matrix) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "mm_76": {
                "variable": {
                    "value": "gram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(path)",
                            "Call"
                        ],
                        [
                            "img.resize((size, size))",
                            "Call"
                        ],
                        [
                            "transform(img).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img.to('cpu').clone().detach()",
                            "Call"
                        ],
                        [
                            "img.numpy().squeeze(0)",
                            "Call"
                        ],
                        [
                            "img.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "img * np.array((0.229, 0.224, 0.225)) + np.array((0.485, 0.456, 0.406))",
                            "BinOp"
                        ],
                        [
                            "img.clip(0, 1)",
                            "Call"
                        ],
                        [
                            "img.view(b * c, h * w)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "img.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}