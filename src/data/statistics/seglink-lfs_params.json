{
    "seglink/config.py": {
        "tensorflow": {
            "DEFINE_string_4": {
                "name": {
                    "value": "action",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Action to take",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_5": {
                "name": {
                    "value": "working_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for saving checkpoints and log files",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_6": {
                "name": {
                    "value": "log_file_prefix",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "fctd_",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Prefix of logging file name",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_9": {
                "name": {
                    "value": "pos_label",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Label for the background class",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_10": {
                "name": {
                    "value": "neg_label",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Label for the background class",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_11": {
                "name": {
                    "value": "fctd_min_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Minimum region size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_12": {
                "name": {
                    "value": "fctd_max_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum region size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_13": {
                "name": {
                    "value": "pos_scale_diff_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.7",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_14": {
                "name": {
                    "value": "neg_scale_diff_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_15": {
                "name": {
                    "value": "fctd_n_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of region scales",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_16": {
                "name": {
                    "value": "n_local_links",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of links of a grid node",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_17": {
                "name": {
                    "value": "n_cross_links",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of cross-layer links on each node",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "link_clf_mode",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Mode of classifying local links. Can be softmax or sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "test_period",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Period of on-the-fly testing",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "test_model_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Test model path",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "test_record_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Test tf-records path",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "test_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Test batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "num_test",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of test images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_26": {
                "name": {
                    "value": "node_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Confidence threshold for nodes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_27": {
                "name": {
                    "value": "link_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Confidence threshold for links",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "nms_top_k",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Apply NMS only to examples with top-k scores on each class",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "keep_top_k",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Keep examples with top-k scores after NMS",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "save_visualization",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Save visualization results",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "result_format",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "icdar_2015_inc",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Result file format",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "bbox_scale_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Bounding box scale trick",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "brief_summary_period",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Period for brief summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "detailed_summary_period",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Period for detailed summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "checkpoint_period",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Period for saving checkpoints",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "seglink/data.py": {
        "tensorflow": {
            "DEFINE_string_7": {
                "name": {
                    "value": "sampling_overlap_mode",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "coverage",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Sampling based on jaccard / coverage",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_8": {
                "name": {
                    "value": "image_channel_order",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "BGR",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Order of input image channels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_9": {
                "name": {
                    "value": "max_num_gt",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of groundtruths in one example, used for determining padding length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_10": {
                "name": {
                    "value": "test_resize_method",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "fixed",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Image resizing method in testing {fixed, dynamic}",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_11": {
                "name": {
                    "value": "resize_longer_side",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Longer side of resized image",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_12": {
                "name": {
                    "value": "resize_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Width and height must be dividable by this number",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_13": {
                "name": {
                    "value": "image_height",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "384",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Resize image height",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_14": {
                "name": {
                    "value": "image_width",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "384",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Resize image width",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_73": {
                "variable": {
                    "value": "image_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "streams['image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "orig_size",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_h, orig_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "reshaped_polygons",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "word_polygons",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_to_dense(features['word_polygons'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_polygons, [-1, WORD_POLYGON_DIM])",
                            "Call"
                        ],
                        [
                            "streams['word_polygons']",
                            "Subscript"
                        ],
                        [
                            "streams['word_polygons']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_min_79": {
                "variable": {
                    "value": "envelope_xmin",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reshaped_polygons[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_80": {
                "variable": {
                    "value": "envelope_ymin",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reshaped_polygons[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_81": {
                "variable": {
                    "value": "envelope_xmax",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reshaped_polygons[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_82": {
                "variable": {
                    "value": "envelope_ymax",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reshaped_polygons[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "envelope_bboxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[envelope_xmin, envelope_ymin, envelope_xmax, envelope_ymax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "full_crop_bbox",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([0, 0, orig_w - 1, orig_h - 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "crop_bboxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "crop_bboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[full_crop_bbox]",
                            "List"
                        ],
                        [
                            "tf.stack(crop_bboxes)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(crop_bboxes, successes)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_99": {
                "variable": {
                    "value": "successes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "successes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.constant(True, dtype=tf.bool)]",
                            "List"
                        ],
                        [
                            "tf.stack(successes)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_101": {
                "variable": {
                    "value": "crop_bboxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "crop_bboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[full_crop_bbox]",
                            "List"
                        ],
                        [
                            "tf.stack(crop_bboxes)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(crop_bboxes, successes)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "successes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.constant(True, dtype=tf.bool)]",
                            "List"
                        ],
                        [
                            "tf.stack(successes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_113": {
                "variable": {
                    "value": "slice_xmin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(crop_bbox[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_114": {
                "variable": {
                    "value": "slice_ymin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(crop_bbox[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "slice_xmax",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(crop_bbox[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_116": {
                "variable": {
                    "value": "slice_ymax",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(crop_bbox[3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "slice_begin",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[slice_ymin, slice_xmin, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "slice_size",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[slice_height, slice_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_123": {
                "variable": {
                    "value": "cropped_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "streams['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "slice_begin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([slice_ymin, slice_xmin, 0])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "slice_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([slice_height, slice_width, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_134": {
                "variable": {
                    "value": "resize_size",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[FLAGS.image_height, FLAGS.image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_140": {
                "variable": {
                    "value": "default_resized_image",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(cropped_image, [0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "resize_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([FLAGS.image_height, FLAGS.image_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([FLAGS.image_height, FLAGS.image_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([resize_h, resize_w])",
                            "Call"
                        ]
                    ]
                }
            },
            "case_142": {
                "variable": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "pred_method_pairs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "default": {
                    "value": "lambda : default_resized_image",
                    "type": "Lambda",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_145": {
                "variable": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.case(pred_method_pairs, lambda : default_resized_image, exclusive=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image, [0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(streams['image'], [0]), resize_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_153": {
                "variable": {
                    "value": "valid_polygons",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "projected_polygons",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "boundary_bbox",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([0, 0, FLAGS.image_height, FLAGS.image_width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_176": {
                "variable": {
                    "value": "padded_rboxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clipped_rboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ops.clip_rboxes(rboxes, boundary_bbox)",
                            "Call"
                        ],
                        [
                            "ops.clip_rboxes(rboxes, tf.constant([0.0, 0.0, 1.0, 1.0], tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.stack([tf.stack([0, pad_size]), [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_199": {
                "variable": {
                    "value": "image_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "streams['image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "orig_size",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_h, orig_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_202": {
                "variable": {
                    "value": "full_crop_bbox",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([0, 0, orig_w - 1, orig_h - 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_224": {
                "variable": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(streams['image'], [0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "resize_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([FLAGS.image_height, FLAGS.image_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([FLAGS.image_height, FLAGS.image_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([resize_h, resize_w])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_226": {
                "variable": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.case(pred_method_pairs, lambda : default_resized_image, exclusive=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image, [0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(streams['image'], [0]), resize_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_231": {
                "variable": {
                    "value": "valid_polygons",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "projected_polygons",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "valid_polygons",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(projected_polygons, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(projected_polygons, valid_polygons)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_251": {
                "variable": {
                    "value": "padded_rboxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ops.polygons_to_rboxes(valid_polygons)",
                            "Call"
                        ],
                        [
                            "ops.polygons_to_rboxes(word_polygons)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.stack([tf.stack([0, pad_size]), [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_33": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordReader_35": {
                "variable": {
                    "value": "reader",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "string_input_producer_36": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Name",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[record_path]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "parse_single_example_38": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record_value",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image_jpeg': tf.FixedLenFeature([], tf.string), 'image_name': tf.FixedLenFeature([], tf.string), 'word_polygons': tf.VarLenFeature(tf.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.decode_jpeg(features['image_jpeg'], channels=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "word_polygons",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "word_polygons",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_to_dense(features['word_polygons'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_polygons, [-1, WORD_POLYGON_DIM])",
                            "Call"
                        ],
                        [
                            "streams['word_polygons']",
                            "Subscript"
                        ],
                        [
                            "streams['word_polygons']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, WORD_POLYGON_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "scope or 'train_preprocess'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reverse_165": {
                "variable": {
                    "value": "normed_image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.case(pred_method_pairs, lambda : default_resized_image, exclusive=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image, [0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(streams['image'], [0]), resize_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "scope or 'test_preprocess'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "stack_206": {
                "variable": {
                    "value": "resize_size",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[FLAGS.image_height, FLAGS.image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_243": {
                "variable": {
                    "value": "normed_image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.case(pred_method_pairs, lambda : default_resized_image, exclusive=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image, [0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(streams['image'], [0]), resize_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope or 'input_stream'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "stack_88": {
                "values": {
                    "value": "[0, 0, orig_w - 1, orig_h - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_102": {
                "input": {
                    "value": "crop_bboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[full_crop_bbox]",
                            "List"
                        ],
                        [
                            "tf.stack(crop_bboxes)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(crop_bboxes, successes)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_105": {
                "input_": {
                    "value": "crop_bboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[full_crop_bbox]",
                            "List"
                        ],
                        [
                            "tf.stack(crop_bboxes)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(crop_bboxes, successes)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "tf.stack([random_crop_index, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_113": {
                "x": {
                    "value": "crop_bbox[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_114": {
                "x": {
                    "value": "crop_bbox[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_115": {
                "x": {
                    "value": "crop_bbox[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_116": {
                "x": {
                    "value": "crop_bbox[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "cropped_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(streams['image'], slice_begin, slice_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_154": {
                "input": {
                    "value": "valid_polygons",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(projected_polygons, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(projected_polygons, valid_polygons)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_160": {
                "values": {
                    "value": "[0, 0, FLAGS.image_height, FLAGS.image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_177": {
                "values": {
                    "value": "[0, pad_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_202": {
                "values": {
                    "value": "[0, 0, orig_w - 1, orig_h - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_209": {
                "variable": {
                    "value": "longer_side",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_h",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "orig_w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "truediv_210": {
                "variable": {
                    "value": "resize_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "FLAGS.resize_longer_side",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "longer_side",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(orig_h, orig_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_214": {
                "variable": {
                    "value": "resize_step",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "FLAGS.resize_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_215": {
                "variable": {
                    "value": "resize_h",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(tf.truediv(tf.cast(resize_h, tf.float64), resize_step)) * resize_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_218": {
                "variable": {
                    "value": "resize_w",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(tf.truediv(tf.cast(resize_w, tf.float64), resize_step)) * resize_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_221": {
                "variable": {
                    "value": "resize_size",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[resize_h, resize_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_225": {
                "input": {
                    "value": "streams['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_235": {
                "input": {
                    "value": "rboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ops.polygons_to_rboxes(valid_polygons)",
                            "Call"
                        ],
                        [
                            "ops.polygons_to_rboxes(word_polygons)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_239": {
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_252": {
                "values": {
                    "value": "[0, pad_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_46": {
                "contents": {
                    "value": "features['image_jpeg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_106": {
                "values": {
                    "value": "[random_crop_index, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLenFeature_40": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_41": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_42": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_137": {
                "x": {
                    "value": "interp_method_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=n_interp_method, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_211": {
                "x": {
                    "value": "orig_h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "orig_w",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_216": {
                "x": {
                    "value": "tf.truediv(tf.cast(resize_h, tf.float64), resize_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_219": {
                "x": {
                    "value": "tf.truediv(tf.cast(resize_w, tf.float64), resize_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "input": {
                    "value": "cropped_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(streams['image'], slice_begin, slice_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_216": {
                "x": {
                    "value": "tf.cast(resize_h, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "resize_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(FLAGS.resize_step, tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_219": {
                "x": {
                    "value": "tf.cast(resize_w, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "resize_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(FLAGS.resize_step, tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_216": {
                "x": {
                    "value": "resize_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(orig_h, tf.float64) * resize_scale",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.round(tf.truediv(tf.cast(resize_h, tf.float64), resize_step)) * resize_step, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_219": {
                "x": {
                    "value": "resize_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(orig_w, tf.float64) * resize_scale",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.round(tf.truediv(tf.cast(resize_w, tf.float64), resize_step)) * resize_step, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seglink/evaluate.py": {
        "tensorflow": {
            "DEFINE_string_17": {
                "name": {
                    "value": "log_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for saving checkpoints and log files",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "log_prefix",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Log file name prefix",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "image_resize_method",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "fixed",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Image resizing method. \"fixed\" or \"dynamic\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "test_model",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Checkpoint for testing",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "test_dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Test dataset path",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "test_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Test batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "num_test",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of test images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_25": {
                "name": {
                    "value": "node_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Confidence threshold for nodes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_26": {
                "name": {
                    "value": "link_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Confidence threshold for links",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "save_vis",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Save visualization results",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "vis_save_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Visualization save directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "result_format",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "icdar_2015_inc",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Result file format",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_30": {
                "name": {
                    "value": "result_suffix",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "time.strftime('_%Y%m%d_%H%M%S')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "Result file suffix",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "bbox_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Scale output bounding box",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_33": {
                "name": {
                    "value": "bbox_min_area",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Minimum bounding box area",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "load_intermediate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to load intermediate results.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "save_intermediate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to load intermediate results.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "weight_init_method",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "xavier",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Weight initialization method",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_116": {
                "variable": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_76": {
                "variable": {
                    "value": "reg_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "reg_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(reg_maps, data.OFFSET_VARIANCE)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "data.OFFSET_VARIANCE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "cls_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(cls_maps, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "cls_pos_prob_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_pos_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_prob[:, model.POS_LABEL]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(cls_maps)[:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_83": {
                "variable": {
                    "value": "node_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(cls_pos_prob_maps, FLAGS.node_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "lnk_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(lnk_maps, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_89": {
                "variable": {
                    "value": "lnk_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "lnk_maps",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "lnk_pos_prob_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lnk_pos_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lnk_prob[:, model.POS_LABEL]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[lnk_shape[0], lnk_shape[1], lnk_shape[2], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "link_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(lnk_pos_prob_maps, FLAGS.link_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "model_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_41": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_49": {
                "variable": {
                    "value": "batches",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pstreams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.test_preprocess(streams)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_56": {
                "variable": {
                    "value": "batches",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pstreams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.test_preprocess(streams)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_117": {
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_60": {
                "input": {
                    "value": "batches['image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "cls_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_83": {
                "x": {
                    "value": "cls_pos_prob_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(cls_pos_prob, tf.shape(cls_maps)[:3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FLAGS.node_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "lnk_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_93": {
                "x": {
                    "value": "lnk_pos_prob_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(lnk_pos_prob, [lnk_shape[0], lnk_shape[1], lnk_shape[2], -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FLAGS.link_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "cls_maps",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "seglink/model.py": {
        "tensorflow": {
            "DEFINE_float_12": {
                "name": {
                    "value": "pos_scale_diff_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.7",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_13": {
                "name": {
                    "value": "neg_scale_diff_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_63": {
                "variable": {
                    "value": "conv4_3_scaled",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vgg16_outputs['conv4_3']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4_3_normed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "conv4_3_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4_3_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(value=20.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_69": {
                "variable": {
                    "value": "conv4_3_scaled",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4_3_scaled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(conv4_3, 3, name='conv4_3_normed')",
                            "Call"
                        ],
                        [
                            "tf.multiply(conv4_3_scaled, tf.reshape(conv4_3_scale, [1, 1, 1, 512], name='conv4_3_norm_scaled'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(conv4_3_scale, [1, 1, 1, 512], name='conv4_3_norm_scaled')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_68": {
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "conv4_3_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('conv4_3_scale', shape=[512], initializer=tf.constant_initializer(value=20.0, dtype=tf.float32), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_139": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "status",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "MATCH_STATUS_POS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "boolean_mask_140": {
                "variable": {
                    "value": "pos_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(status, MATCH_STATUS_POS)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_142": {
                "variable": {
                    "value": "pos_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "POS_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_143": {
                "variable": {
                    "value": "pos_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pos_scores, labels=pos_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_147": {
                "variable": {
                    "value": "neg_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "status",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "MATCH_STATUS_NEG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "boolean_mask_148": {
                "variable": {
                    "value": "neg_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "neg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(status, MATCH_STATUS_NEG)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_151": {
                "variable": {
                    "value": "n_hard_neg",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "n_hard_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(n_pos, tf.float32) * hard_neg_ratio",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(n_hard_neg, tf.cast(n_neg, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.cast(n_hard_neg, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(n_neg, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_152": {
                "variable": {
                    "value": "n_hard_neg",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "n_hard_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(n_pos, tf.float32) * hard_neg_ratio",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(n_hard_neg, tf.cast(n_neg, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.cast(n_hard_neg, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_155": {
                "variable": {
                    "value": "(_, hard_neg_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-neg_prob",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "n_hard_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(n_pos, tf.float32) * hard_neg_ratio",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(n_hard_neg, tf.cast(n_neg, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.cast(n_hard_neg, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_156": {
                "variable": {
                    "value": "hard_neg_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "neg_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(scores, neg_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "hard_neg_indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "fill_157": {
                "variable": {
                    "value": "hard_neg_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n_hard_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "NEG_LABEL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_158": {
                "variable": {
                    "value": "hard_neg_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=hard_neg_scores, labels=hard_neg_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_171": {
                "variable": {
                    "value": "node_status_below",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_172": {
                "variable": {
                    "value": "match_indices_below",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_232": {
                "variable": {
                    "value": "detection_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[node_cls_loss, link_cls_loss, offset_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "detection_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_243": {
                "variable": {
                    "value": "total_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[detection_loss, weight_decay_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "conv4_3_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('conv4_3_scale', shape=[512], initializer=tf.constant_initializer(value=20.0, dtype=tf.float32), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4_3_norm_scaled",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "scope or 'ssd'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "scope or 'cls_mining'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "scope or 'loss'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "node_status_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(o, [-1]) for o in node_status_all]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "node_scores_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(o[0], [-1, N_SEG_CLASSES]) for o in all_maps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_204": {
                "variable": {
                    "value": "node_normalizer",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(n_pos_nodes, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truediv_205": {
                "variable": {
                    "value": "node_cls_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "node_pos_loss + node_hardneg_loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "node_normalizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(1.0, tf.cast(n_pos_nodes, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "node_cls_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "link_status_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(o, [-1]) for o in link_status_all]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_211": {
                "variable": {
                    "value": "link_scores_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(o[1], [-1, N_LNK_CLASSES]) for o in all_maps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_216": {
                "variable": {
                    "value": "link_normalizer",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(n_pos_links, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truediv_217": {
                "variable": {
                    "value": "link_cls_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "link_pos_loss + link_hardneg_loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "link_normalizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(1.0, tf.cast(n_pos_links, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "link_cls_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_223": {
                "variable": {
                    "value": "gt_offsets_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(o, [-1, OFFSET_DIM]) for o in gt_offsets_all]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_224": {
                "variable": {
                    "value": "offset_pos_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "node_status_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(o, [-1]) for o in node_status_all], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "MATCH_STATUS_POS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "boolean_mask_225": {
                "variable": {
                    "value": "gt_offsets_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_offsets_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(o, [-1, OFFSET_DIM]) for o in gt_offsets_all], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "offset_pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(node_status_flat, MATCH_STATUS_POS)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_226": {
                "variable": {
                    "value": "offsets_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(o[2], [-1, OFFSET_DIM]) for o in all_maps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_227": {
                "variable": {
                    "value": "offsets_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offsets_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(o[2], [-1, OFFSET_DIM]) for o in all_maps], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "offset_pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(node_status_flat, MATCH_STATUS_POS)",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_228": {
                "variable": {
                    "value": "offset_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(ops.smooth_l1_loss(offsets_pos, gt_offsets_pos))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "node_normalizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(1.0, tf.cast(n_pos_nodes, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_238": {
                "variable": {
                    "value": "weight_decay_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n(weight_l2_losses)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "FLAGS.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_decay_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "20.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "pos_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(scores, pos_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_143": {
                "logits": {
                    "value": "pos_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(scores, pos_mask)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "pos_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill([n_pos], POS_LABEL)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_149": {
                "input": {
                    "value": "neg_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(scores, neg_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_150": {
                "x": {
                    "value": "n_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(pos_scores)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_151": {
                "x": {
                    "value": "n_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(neg_scores)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "logits": {
                    "value": "neg_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(scores, neg_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_158": {
                "logits": {
                    "value": "hard_neg_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(neg_scores, hard_neg_indices)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "hard_neg_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill([n_hard_neg], NEG_LABEL)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "node_cls_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "link_cls_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "offset_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "regularization",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_175": {
                "input": {
                    "value": "all_maps[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_204": {
                "x": {
                    "value": "n_pos_nodes",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_216": {
                "x": {
                    "value": "n_pos_links",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "ops.smooth_l1_loss(offsets_pos, gt_offsets_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_237": {
                "t": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_n_238": {
                "inputs": {
                    "value": "weight_l2_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.l2_loss(o) for o in tf.get_collection('weights')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_197": {
                "tensor": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "tensor": {
                    "value": "o[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, N_SEG_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "tensor": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "tensor": {
                    "value": "o[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, N_LNK_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "tensor": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, OFFSET_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "tensor": {
                    "value": "o[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, OFFSET_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_237": {
                "key": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "seglink/model_cnn.py": {
        "tensorflow": {
            "stop_gradient_48": {
                "variable": {
                    "value": "pool2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._vgg_max_pool(relu2_2, 'pool2')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(pool2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope or 'vgg16'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            }
        }
    },
    "seglink/ops.py": {
        "tensorflow": {
            "load_op_library_22": {
                "variable": {
                    "value": "oplib",
                    "type": "Name",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "lib_copy_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/lib{0}_{1}.so'.format(str(uuid.uuid4())[:8], LIB_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(0.0, init_std)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(init_method[0], init_method[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_165": {
                "variable": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(gt_labels, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "n_classes",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_166": {
                "variable": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "match_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(gt_labels, tf.int64), n_classes, 1.0, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_39": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_nn_variable('weight', [ksize, ksize, n_in, n_out], weight_init, collection='weights' if trainable else None, **kwargs)",
                            "Call"
                        ],
                        [
                            "_nn_variable('weight', [ksize, ksize, n_in, n_out], weight_init, collection='weights' if trainable else None, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "atrous_conv2d_108": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_nn_variable('weight', [ksize, ksize, n_in, n_out], weight_init, collection='weights' if trainable else None, **kwargs)",
                            "Call"
                        ],
                        [
                            "_nn_variable('weight', [ksize, ksize, n_in, n_out], weight_init, collection='weights' if trainable else None, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_123": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, ksize, ksize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_129": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, ksize, ksize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_167": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(match_scores, embeddings)",
                            "Call"
                        ],
                        [
                            "0.5 * tf.square(diff) * lesser_mask + (diff - 0.5) * larger_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_180": {
                "variable": {
                    "value": "gt_offsets",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(gt_offsets)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_181": {
                "variable": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "offsets - gt_offsets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_182": {
                "variable": {
                    "value": "lesser_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(diff, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_49": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "init_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.sqrt(2.0 / (kh * kw * n_in))",
                            "Call"
                        ],
                        [
                            "math.sqrt(1.0 / n_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_63": {
                "name": {
                    "value": "collection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape=shape, initializer=initializer, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "scope or 'conv2d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "bias_add_84": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, kernel, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(y, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, kernel, dilation, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(y, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, [1, ksize, ksize, 1], [1, stride, stride, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, ksize, ksize, 1], [1, stride, stride, 1], padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_nn_variable('bias', [n_out], 'zero', collection='biases' if trainable else None, **kwargs)",
                            "Call"
                        ],
                        [
                            "_nn_variable('bias', [n_out], 'zero', collection='biases' if trainable else None, **kwargs)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_87": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, kernel, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(y, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, kernel, dilation, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(y, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, [1, ksize, ksize, 1], [1, stride, stride, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, ksize, ksize, 1], [1, stride, stride, 1], padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "scope or 'atrous_conv2d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "bias_add_114": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, kernel, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(y, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, kernel, dilation, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(y, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, [1, ksize, ksize, 1], [1, stride, stride, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, ksize, ksize, 1], [1, stride, stride, 1], padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_nn_variable('bias', [n_out], 'zero', collection='biases' if trainable else None, **kwargs)",
                            "Call"
                        ],
                        [
                            "_nn_variable('bias', [n_out], 'zero', collection='biases' if trainable else None, **kwargs)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_117": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, kernel, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(y, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, kernel, dilation, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(y, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(y)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, [1, ksize, ksize, 1], [1, stride, stride, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, ksize, ksize, 1], [1, stride, stride, 1], padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "scope or 'avg_pool'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "scope or 'max_pool'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "gt_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "scope or 'smooth_l1_loss'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(match_scores, embeddings)",
                            "Call"
                        ],
                        [
                            "0.5 * tf.square(diff) * lesser_mask + (diff - 0.5) * larger_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_182": {
                "x": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.abs(offsets - gt_offsets)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_57": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "mean": {
                    "value": "init_method[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stddev": {
                    "value": "init_method[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_184": {
                "x": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.abs(offsets - gt_offsets)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seglink/solver.py": {
        "tensorflow": {
            "DEFINE_string_18": {
                "name": {
                    "value": "log_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for saving checkpoints and log files",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "log_prefix",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Log file name prefix",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "resume",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "vgg16",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training from loading VGG16 parameters (\"vgg16\"), resume a checkpoint (\"resume\"), or finetune a pretrained model (\"finetune\")",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "vgg16_model",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "../data/VGG_ILSVRC_16_layers_ssd.ckpt",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The pretrained VGG16 model checkpoint",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "finetune_model",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Finetuning model path",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "train_datasets",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training datasets file names separated by semicolons",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "weight_init_method",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "xavier",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Weight initialization method",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "train_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "n_gpu",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of GPUs used in training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_28": {
                "name": {
                    "value": "hard_neg_ratio",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Ratio of hard negatives to positives",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "no_random_crop",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "In data augmentation, do not crop image, i.e. use full images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "sgd",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Optimization algorithm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "base_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Base learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_33": {
                "name": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "SGD momentum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_34": {
                "name": {
                    "value": "weight_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "SGD weight decay",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "60000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of iterations.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_36": {
                "name": {
                    "value": "lr_policy",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "staircase",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decaying policy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "lr_breakpoints",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated breakpoints of learning rate decay",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "lr_decays",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated decay values for every breakpoint",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "profiling",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Do profiling during training (profiling could slow down training significantly)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "profiling_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "21",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Run profiling once at this step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "profiling_report",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "timeline.json",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Profiling report filename",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "brief_summary_period",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Period for brief summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "detailed_summary_period",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Period for detailed summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "checkpoint_period",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Period for saving checkpoints",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_195": {
                "variable": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._average_gradients(tower_gradients)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(grads, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truediv_171": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n(tower_losses)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "float(len(tower_losses))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "average_tower_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_187": {
                "variable": {
                    "value": "self.brief_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "brief",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_188": {
                "variable": {
                    "value": "self.detailed_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "detailed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FileWriter_199": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_200": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_53": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_55": {
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['brief']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_batch['image']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_78": {
                "variable": {
                    "value": "expanded_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_90": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_batch_join_126": {
                "variable": {
                    "value": "train_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors_list": {
                    "value": "train_pstreams_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.train_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_size * 50",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_after_dequeue",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_size * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.current_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_173": {
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['brief']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_variables_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_197": {
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_204": {
                "variable": {
                    "value": "latest_ckpt_path",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "lr_decay",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "case_102": {
                "variable": {
                    "value": "lr_decay",
                    "type": "Name",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "pred_fn_pairs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "default": {
                    "value": "lambda : tf.constant(1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "scalar_108": {
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.current_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['brief']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "input_data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.current_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_171": {
                "inputs": {
                    "value": "tower_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_174": {
                "name": {
                    "value": "average_gradients",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_185": {
                "name": {
                    "value": "summary_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'parameters/' + var.name.split(':')[0]",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.all_variables()",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['detailed']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_209": {
                "variable": {
                    "value": "model_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_214": {
                "variable": {
                    "value": "model_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_149": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.current_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_160": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_216": {
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_221": {
                "variable": {
                    "value": "vgg16_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "ssd/vgg16/",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_222": {
                "variable": {
                    "value": "pretrained_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vgg16_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='ssd/vgg16/')",
                            "Call"
                        ]
                    ]
                }
            },
            "RunMetadata_252": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_253": {
                "variable": {
                    "value": "run_options",
                    "type": "Name",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "get_variable_scope_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_163": {
                "name": {
                    "value": "'tower_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "less_101": {
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "lr_breakpoint",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_102": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seglink/unit_tests.py": {
        "tensorflow": {
            "batch_185": {
                "variable": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pstreams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.train_preprocess(streams)",
                            "Call"
                        ],
                        [
                            "data.train_preprocess(streams)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "233",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_189": {
                "variable": {
                    "value": "image_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_276": {
                "variable": {
                    "value": "rboxes",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "_generate_random_rboxes(n_rboxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_277": {
                "variable": {
                    "value": "crop_bbox",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_batch_328": {
                "variable": {
                    "value": "batches",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pstreams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.train_preprocess(streams)",
                            "Call"
                        ],
                        [
                            "data.train_preprocess(streams)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "233",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "2000",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_204": {
                "variable": {
                    "value": "map_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_206": {
                "variable": {
                    "value": "node_status_below",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_207": {
                "variable": {
                    "value": "match_indices_below",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_353": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.rand(size, size).reshape(1, size, size, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "[np.random.rand(4, 4).astype(np.float32), np.random.rand(5, 5).astype(np.float32), np.random.rand(6, 6).astype(np.float32)]",
                            "List"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_187": {
                "input": {
                    "value": "batch['image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_188": {
                "input": {
                    "value": "batch['image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_244": {
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Session_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_332": {
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Session_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_203": {
                "input": {
                    "value": "cls_maps",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "seglink/utils.py": {
        "tensorflow": {
            "ExponentialMovingAverage_65": {
                "variable": {
                    "value": "loss_ema",
                    "type": "Name",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "ema",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_75": {
                "variable": {
                    "value": "tensor_min",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Print(tensor, [tensor_min, tensor_max, tensor_avg, tensor_zero_fraction, tensor_shape, tensor], message=tag + ' Min, max, mean, sparsity, shape, value:', summarize=n_print)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_76": {
                "variable": {
                    "value": "tensor_max",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Print(tensor, [tensor_min, tensor_max, tensor_avg, tensor_zero_fraction, tensor_shape, tensor], message=tag + ' Min, max, mean, sparsity, shape, value:', summarize=n_print)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "tensor_avg",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Print(tensor, [tensor_min, tensor_max, tensor_avg, tensor_zero_fraction, tensor_shape, tensor], message=tag + ' Min, max, mean, sparsity, shape, value:', summarize=n_print)",
                            "Call"
                        ]
                    ]
                }
            },
            "zero_fraction_78": {
                "variable": {
                    "value": "tensor_zero_fraction",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Print(tensor, [tensor_min, tensor_max, tensor_avg, tensor_zero_fraction, tensor_shape, tensor], message=tag + ' Min, max, mean, sparsity, shape, value:', summarize=n_print)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_79": {
                "variable": {
                    "value": "tensor_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Print(tensor, [tensor_min, tensor_max, tensor_avg, tensor_zero_fraction, tensor_shape, tensor], message=tag + ' Min, max, mean, sparsity, shape, value:', summarize=n_print)",
                            "Call"
                        ]
                    ]
                }
            },
            "Print_81": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Print(tensor, [tensor_min, tensor_max, tensor_avg, tensor_zero_fraction, tensor_shape, tensor], message=tag + ' Min, max, mean, sparsity, shape, value:', summarize=n_print)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tensor_min, tensor_max, tensor_avg, tensor_zero_fraction, tensor_shape, tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "tag + ' Min, max, mean, sparsity, shape, value:'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "summarize": {
                    "value": "n_print",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_57": {
                "name": {
                    "value": "tensor_name + '/activations'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensors",
                            "Name"
                        ]
                    ]
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['detailed_summaries']",
                            "MethodArgument"
                        ],
                        [
                            "['brief_summaries']",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scalar_58": {
                "name": {
                    "value": "tensor_name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['detailed_summaries']",
                            "MethodArgument"
                        ],
                        [
                            "['brief_summaries']",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_68": {
                "control_inputs": {
                    "value": "[loss_ema_update]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zero_fraction_58": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensors",
                            "Name"
                        ]
                    ]
                }
            },
            "scalar_70": {
                "name": {
                    "value": "l.op.name + ' (raw)'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "losses",
                            "Name"
                        ]
                    ]
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['detailed_summaries']",
                            "MethodArgument"
                        ],
                        [
                            "['brief_summaries']",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scalar_71": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_ema.average(l)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['detailed_summaries']",
                            "MethodArgument"
                        ],
                        [
                            "['brief_summaries']",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tool/convert_caffe_model/convert_caffemodel_to_ckpt.py": {
        "tensorflow": {
            "Saver_81": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32, 3, 300, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_34": {
                "ref": {
                    "value": "tf.get_variable(target_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.transpose(caffe_weights[src_name][0], (2, 3, 1, 0))",
                            "Call"
                        ],
                        [
                            "caffe_weights[src_name][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "assign_39": {
                "ref": {
                    "value": "tf.get_variable(target_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.transpose(caffe_weights[src_name][0], (2, 3, 1, 0))",
                            "Call"
                        ],
                        [
                            "caffe_weights[src_name][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_77": {
                "variable": {
                    "value": "load_op",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "load_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "name": {
                    "value": "target_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_scope + '/' + target_name",
                            "BinOp"
                        ],
                        [
                            "model_scope + '/' + target_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_39": {
                "name": {
                    "value": "target_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_scope + '/' + target_name",
                            "BinOp"
                        ],
                        [
                            "model_scope + '/' + target_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_76": {
                "control_inputs": {
                    "value": "assigns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[load_conv_weight('conv1_1/conv2d/weight', 'conv1_1'), load_conv_bias('conv1_1/conv2d/bias', 'conv1_1'), load_conv_weight('conv1_2/conv2d/weight', 'conv1_2'), load_conv_bias('conv1_2/conv2d/bias', 'conv1_2'), load_conv_weight('conv2_1/conv2d/weight', 'conv2_1'), load_conv_bias('conv2_1/conv2d/bias', 'conv2_1'), load_conv_weight('conv2_2/conv2d/weight', 'conv2_2'), load_conv_bias('conv2_2/conv2d/bias', 'conv2_2'), load_conv_weight('conv3_1/conv2d/weight', 'conv3_1'), load_conv_bias('conv3_1/conv2d/bias', 'conv3_1'), load_conv_weight('conv3_2/conv2d/weight', 'conv3_2'), load_conv_bias('conv3_2/conv2d/bias', 'conv3_2'), load_conv_weight('conv3_3/conv2d/weight', 'conv3_3'), load_conv_bias('conv3_3/conv2d/bias', 'conv3_3'), load_conv_weight('conv4_1/conv2d/weight', 'conv4_1'), load_conv_bias('conv4_1/conv2d/bias', 'conv4_1'), load_conv_weight('conv4_2/conv2d/weight', 'conv4_2'), load_conv_bias('conv4_2/conv2d/bias', 'conv4_2'), load_conv_weight('conv4_3/conv2d/weight', 'conv4_3'), load_conv_bias('conv4_3/conv2d/bias', 'conv4_3'), load_conv_weight('conv5_1/conv2d/weight', 'conv5_1'), load_conv_bias('conv5_1/conv2d/bias', 'conv5_1'), load_conv_weight('conv5_2/conv2d/weight', 'conv5_2'), load_conv_bias('conv5_2/conv2d/bias', 'conv5_2'), load_conv_weight('conv5_3/conv2d/weight', 'conv5_3'), load_conv_bias('conv5_3/conv2d/bias', 'conv5_3'), load_conv_weight('fc6/atrous_conv2d/weight', 'fc6'), load_conv_bias('fc6/atrous_conv2d/bias', 'fc6'), load_conv_weight('fc7/conv2d/weight', 'fc7'), load_conv_bias('fc7/conv2d/bias', 'fc7')]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tool/convert_caffe_model/tests.py": {
        "tensorflow": {
            "placeholder_45": {
                "variable": {
                    "value": "input_images",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_53": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tool/create_datasets.py": {
        "tensorflow": {
            "TFRecordWriter_87": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "path": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "TFRecordWriter_138": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "path": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "TFRecordWriter_504": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "path": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Feature_19": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_21": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_23": {
                "float_list": {
                    "value": "tf.train.FloatList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_25": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_27": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_29": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_122": {
                "variable": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image_name': _bytes_feature(image_rel_path.encode('ascii')), 'image_jpeg': _bytes_feature(image_jpeg), 'num_words': _int64_feature(n_words), 'words': _bytes_list_feature(words), 'word_polygons': _float_list_feature(word_polygons_flat)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_168": {
                "variable": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image_name': _bytes_feature(image_fname), 'image_jpeg': _bytes_feature(image_jpeg), 'num_words': _int64_feature(len(words)), 'words': _bytes_list_feature(words), 'word_polygons': _float_list_feature(word_polygons)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_261": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "path": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_223": {
                "variable": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image_name': _bytes_feature(bytes(image_id, encoding='ascii')), 'image_jpeg': _bytes_feature(image_binaries), 'num_words': _int64_feature(len(words)), 'words': _bytes_list_feature(words), 'word_polygons': _float_list_feature(word_polygons)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_19": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_21": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_23": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_25": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Int64List_27": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "FloatList_29": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Features_122": {
                "feature": {
                    "value": "{'image_name': _bytes_feature(image_rel_path.encode('ascii')), 'image_jpeg': _bytes_feature(image_jpeg), 'num_words': _int64_feature(n_words), 'words': _bytes_list_feature(words), 'word_polygons': _float_list_feature(word_polygons_flat)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_168": {
                "feature": {
                    "value": "{'image_name': _bytes_feature(image_fname), 'image_jpeg': _bytes_feature(image_jpeg), 'num_words': _int64_feature(len(words)), 'words': _bytes_list_feature(words), 'word_polygons': _float_list_feature(word_polygons)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_223": {
                "feature": {
                    "value": "{'image_name': _bytes_feature(bytes(image_id, encoding='ascii')), 'image_jpeg': _bytes_feature(image_binaries), 'num_words': _int64_feature(len(words)), 'words': _bytes_list_feature(words), 'word_polygons': _float_list_feature(word_polygons)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    }
}