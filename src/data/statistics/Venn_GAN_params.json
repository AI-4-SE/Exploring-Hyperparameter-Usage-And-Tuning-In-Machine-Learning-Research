{
    "Illustrative_experiments.py": {
        "tensorflow": {
            "concat_80": {
                "variable": {
                    "value": "modes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[i * tf.ones(batch_size_z, dtype='int32') for i in range(num_modes)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_119": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_86": {
                "variable": {
                    "value": "gen_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gen_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator(noise, is_training=is_training_pl, mode=modes, num_modes=num_modes, sn=sn_g, bn=bn_g, name='gen')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(2, args.num_agent) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "gen_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[gen_list[x] for x in connection_map[i]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_104": {
                "variable": {
                    "value": "g_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "gen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_105": {
                "variable": {
                    "value": "d_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "dis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "g_train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params['gen_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta1": {
                    "value": "params['beta1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta2": {
                    "value": "params['beta2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdamOptimizer_113": {
                "variable": {
                    "value": "d_train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params['disc_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta1": {
                    "value": "params['beta1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta2": {
                    "value": "params['beta2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=real, labels=tf.ones_like(real)) + tf.nn.sigmoid_cross_entropy_with_logits(logits=fake, labels=tf.zeros_like(fake))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake, labels=tf.ones_like(fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_89": {
                "variable": {
                    "value": "noise_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds.Normal(tf.zeros(args.z_dim), tf.ones(args.z_dim)).sample(num_modes * batch_size_z)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(2, args.num_agent) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_60": {
                "shape": {
                    "value": "num_mixt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_71": {
                "logits": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_68": {
                "logits": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_69": {
                "logits": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "shape": {
                    "value": "args.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_77": {
                "shape": {
                    "value": "args.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_80": {
                "shape": {
                    "value": "batch_size_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_71": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_68": {
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_69": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "classifier.py": {
        "tensorflow": {
            "shuffle_120": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_120": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=c, labels=label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "variable": {
                    "value": "accuracy_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(c, 1, output_type=tf.int32), label), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_132": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(c_test, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "testy.astype('int32')",
                            "Call"
                        ],
                        [
                            "np.squeeze(testy[:1000])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_135": {
                "variable": {
                    "value": "c_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_136": {
                "variable": {
                    "value": "c_ema_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "ema_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_145": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_140": {
                "variable": {
                    "value": "train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta1": {
                    "value": "params['beta1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta2": {
                    "value": "params['beta2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_128": {
                "logits": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(sample, num_agent=10, sn=sn, name='classifier')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.get_next()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_129": {
                "x": {
                    "value": "tf.equal(tf.argmax(c, 1, output_type=tf.int32), label)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_132": {
                "input": {
                    "value": "c_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(testx, num_agent=10, sn=sn, name='ema_classifier')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_133": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(c_test, 1), testy)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_148": {
                "control_inputs": {
                    "value": "[train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_129": {
                "x": {
                    "value": "tf.argmax(c, 1, output_type=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.get_next()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_129": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(sample, num_agent=10, sn=sn, name='classifier')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fid.py": {
        "tensorflow": {
            "GraphDef_34": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_36": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_33": {
                "name": {
                    "value": "pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pth",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_93": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/ops.py": {
        "tensorflow": {
            "reshape_190": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, channels, x.get_shape()[-1]], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_207": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "l2_norm(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_208": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_norm(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_210": {
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_norm(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, channels, x.get_shape()[-1]], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_91": {
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_94": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1, x.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_123": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[h * scale_factor, w * scale_factor]",
                            "List"
                        ]
                    ]
                }
            },
            "average_pooling2d_126": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "divide_129": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(x), axis=1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_136": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_139": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_142": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_modes, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_modes, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_159": {
                "variable": {
                    "value": "beta_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [num_modes, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_' + str(mode), [1, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_160": {
                "variable": {
                    "value": "gamma_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [num_modes, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [num_modes, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [num_modes, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma_' + str(mode), [1, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_166": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_modes, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_modes, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_168": {
                "variable": {
                    "value": "beta_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [num_modes, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_' + str(mode), [1, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_169": {
                "variable": {
                    "value": "gamma_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [num_modes, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [num_modes, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [num_modes, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma_' + str(mode), [1, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_modes, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_176": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_modes, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_177": {
                "variable": {
                    "value": "beta_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [num_modes, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_' + str(mode), [1, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_178": {
                "variable": {
                    "value": "gamma_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [num_modes, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [num_modes, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [num_modes, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma_' + str(mode), [1, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_184": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'beta_' + str(mode)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'gamma_' + str(mode)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "l2_norm(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_204": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_norm(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, channels, x.get_shape()[-1]], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_232": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_235": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(real, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_236": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_239": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(real), logits=real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(fake), logits=fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_243": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu(1.0 - real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu(1.0 + fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_257": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(fake, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_260": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(fake), logits=fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad, pad], [pad, pad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad, pad], [pad, pad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel, kernel, x.get_shape()[-1], channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "conv2d_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel, kernel, channels, x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "conv2d_transpose_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_shape[0], x_shape[1] * stride, x_shape[2] * stride, channels]",
                            "List"
                        ],
                        [
                            "[x_shape[0], x_shape[1] * stride + max(kernel - stride, 0), x_shape[2] * stride + max(kernel - stride, 0), channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels, units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "dense_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_129": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cond_bn'",
                            "Method Argument"
                        ],
                        [
                            "'conditioner'",
                            "Method Argument"
                        ],
                        [
                            "'conditioner'",
                            "Method Argument"
                        ],
                        [
                            "'cond_0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cond_bn'",
                            "Method Argument"
                        ],
                        [
                            "'conditioner'",
                            "Method Argument"
                        ],
                        [
                            "'conditioner'",
                            "Method Argument"
                        ],
                        [
                            "'cond_0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cond_bn'",
                            "Method Argument"
                        ],
                        [
                            "'conditioner'",
                            "Method Argument"
                        ],
                        [
                            "'conditioner'",
                            "Method Argument"
                        ],
                        [
                            "'cond_0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cond_bn'",
                            "Method Argument"
                        ],
                        [
                            "'conditioner'",
                            "Method Argument"
                        ],
                        [
                            "'conditioner'",
                            "Method Argument"
                        ],
                        [
                            "'cond_0'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_210": {
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "l2_norm(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_213": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [units], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [units], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_129": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_161": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "beta_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_170": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "beta_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_179": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "beta_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_186": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [num_modes, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_' + str(mode), [1, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_201": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, channels, x.get_shape()[-1]], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_231": {
                "input_tensor": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squared_difference_235": {
                "x": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_236": {
                "x": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_239": {
                "labels": {
                    "value": "tf.ones_like(real)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_240": {
                "labels": {
                    "value": "tf.zeros_like(fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_254": {
                "input_tensor": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squared_difference_257": {
                "x": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_260": {
                "labels": {
                    "value": "tf.ones_like(fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_263": {
                "input_tensor": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_129": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_220": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_239": {
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_240": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_260": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_58": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_79": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "tensorflow": {
            "read_file_138": {
                "variable": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "decode_jpeg_139": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_141": {
                "x": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_string, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image_decoded, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_32_dcgan.py": {
        "tensorflow": {
            "expand_dims_12": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_inp",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(z, channels=g_dim, kernel=4, stride=1, pad=3, sn=sn, use_bias=False, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn0')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim, name='cond_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn1')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim // 2, name='cond_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn2')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim // 4, name='cond_2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn3')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim // 8, name='cond_3')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=3, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_4')",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[batch_size, 32, 32, 3], initializer=tf.initializers.truncated_normal(0.0, 0.5))",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=num_agent, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3_gan')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=num_agent, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3_gan')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=num_agent, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3_gan')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=num_agent, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3_gan')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.truncated_normal(0.0, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(z, channels=g_dim, kernel=4, stride=1, pad=3, sn=sn, use_bias=False, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn0')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim, name='cond_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn1')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim // 2, name='cond_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn2')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim // 4, name='cond_2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn3')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim // 8, name='cond_3')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=3, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_4')",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[batch_size, 32, 32, 3], initializer=tf.initializers.truncated_normal(0.0, 0.5))",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=1, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3_mhead')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_121": {
                "shape": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_32_resnet.py": {
        "tensorflow": {
            "expand_dims_14": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_inp",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(z, channels=g_dim * 8, kernel=4, stride=1, pad=3, use_bias=False, sn=sn, scope='fc')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 8, name='cond_0')",
                            "Call"
                        ],
                        [
                            "resblock_g(x, g_dim * 8, g_dim * 8, sn, 'res_1')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 8, name='cond_2')",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "resblock_g(x, g_dim * 4, g_dim * 4, sn, 'res_2')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 4, name='cond_3')",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "resblock_g(x, g_dim * 2, g_dim * 2, sn, 'res_3')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 2, name='cond_4')",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "resblock_g(x, g_dim * 1, g_dim * 1, sn, 'res_4')",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 1, name='cond_5')",
                            "Call"
                        ],
                        [
                            "conv(x, channels=3, kernel=3, stride=1, pad=1, use_bias=True, sn=sn, scope='conv_o')",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim * 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_i')",
                            "Call"
                        ],
                        [
                            "resblock_d(x, d_dim * 1, d_dim * 1, sn, 'res_0')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ],
                        [
                            "resblock_d(x, d_dim * 1, d_dim * 2, sn, 'res_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ],
                        [
                            "resblock_d(x, d_dim * 2, d_dim * 4, sn, 'res_2')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ],
                        [
                            "resblock_d(x, d_dim * 4, d_dim * 8, sn, 'res_3')",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=hid_dim, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=out_dim, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=hid_dim, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=out_dim, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "o_gan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_gan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=num_agent, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_o')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(o_gan)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "o_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=1, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_c')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(o_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_64_dcgan.py": {
        "tensorflow": {
            "expand_dims_12": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_inp",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(z, channels=g_dim, kernel=4, stride=1, pad=3, sn=sn, use_bias=False, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn0')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim, name='cond_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn1')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim, name='cond_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn2')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 2, name='cond_2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn3')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 4, name='cond_3')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_4')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn4')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 8, name='cond_4')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=3, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_5')",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_3_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_3_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[batch_size, 64, 64, 3], initializer=tf.initializers.truncated_normal(0.0, 0.5))",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=num_agent, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_4_gan')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 64, 64, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.truncated_normal(0.0, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(z, channels=g_dim, kernel=4, stride=1, pad=3, sn=sn, use_bias=False, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn0')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim, name='cond_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn1')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim, name='cond_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn2')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 2, name='cond_2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn3')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 4, name='cond_3')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_4')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn4')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 8, name='cond_4')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=3, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_5')",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_2_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_3_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_3_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x, pool_size=3, strides=2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[batch_size, 64, 64, 3], initializer=tf.initializers.truncated_normal(0.0, 0.5))",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=1, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_4_mhead')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_93": {
                "shape": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_64_resnet.py": {
        "tensorflow": {
            "expand_dims_13": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unit_vector(z_inp)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(z, channels=g_dim * 8, kernel=4, stride=1, pad=3, use_bias=True, sn=sn, scope='fc')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 8, name='cond_0')",
                            "Call"
                        ],
                        [
                            "resblock(x, g_dim * 8, g_dim * 8, sn, 'res_0')",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 8, name='cond_1')",
                            "Call"
                        ],
                        [
                            "resblock(x, g_dim * 8, g_dim * 8, sn, 'res_1')",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 8, name='cond_2')",
                            "Call"
                        ],
                        [
                            "resblock(x, g_dim * 4, g_dim * 4, sn, 'res_2')",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 4, name='cond_3')",
                            "Call"
                        ],
                        [
                            "resblock(x, g_dim * 2, g_dim * 2, sn, 'res_3')",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 2, name='cond_4')",
                            "Call"
                        ],
                        [
                            "resblock(x, g_dim * 1, g_dim * 1, sn, 'res_4')",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim * 1, name='cond_5')",
                            "Call"
                        ],
                        [
                            "conv(x, channels=3, kernel=3, stride=1, pad=1, use_bias=True, sn=sn, scope='conv_o')",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim * 1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_i')",
                            "Call"
                        ],
                        [
                            "resblock(x, d_dim * 1, d_dim * 1, sn, 'res_0')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ],
                        [
                            "resblock(x, d_dim * 1, d_dim * 2, sn, 'res_1')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ],
                        [
                            "resblock(x, d_dim * 2, d_dim * 4, sn, 'res_2')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ],
                        [
                            "resblock(x, d_dim * 4, d_dim * 8, sn, 'res_3')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ],
                        [
                            "resblock(x, d_dim * 8, d_dim * 8, sn, 'res_4')",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=hid_dim, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=out_dim, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "o_gan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_gan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=num_agent, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_o')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(o_gan)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "o_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=1, kernel=4, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_c')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(o_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_mnist.py": {
        "tensorflow": {
            "expand_dims_12": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_inp",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(z, channels=g_dim, kernel=4, stride=1, pad=3, sn=sn, use_bias=False, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn0')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim, name='cond_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 2, kernel=4, stride=1, pad=3, sn=sn, use_bias=False, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn1')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 2, name='cond_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn2')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 4, name='cond_2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn3')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 8, name='cond_3')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_4')",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=True, scale=True, scope='bn0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=True, scale=True, scope='bn1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=True, scale=True, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[batch_size, 28, 28, 1], initializer=tf.initializers.truncated_normal(0.0, 0.5))",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=num_agent, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='ml0')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=num_agent, kernel=3, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=num_agent, kernel=3, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.truncated_normal(0.0, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(z, channels=g_dim, kernel=4, stride=1, pad=3, sn=sn, use_bias=False, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn0')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim, name='cond_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 2, kernel=4, stride=1, pad=3, sn=sn, use_bias=False, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn1')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 2, name='cond_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 4, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn2')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 4, name='cond_2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "up_sample(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=g_dim / 8, kernel=3, stride=1, pad=1, sn=sn, use_bias=False, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn3')",
                            "Call"
                        ],
                        [
                            "conditioner(x, mode=mode, num_modes=num_modes, dim=g_dim / 8, name='cond_3')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=1, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='conv_4')",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=True, scale=True, scope='bn0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=True, scale=True, scope='bn1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=True, scale=True, scope='bn2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[batch_size, 28, 28, 1], initializer=tf.initializers.truncated_normal(0.0, 0.5))",
                            "Call"
                        ],
                        [
                            "tf.tanh(x, name='tanh')",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=d_dim / 4, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim / 2, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=d_dim, kernel=4, stride=2, pad=1, sn=sn, use_bias=True, scope='conv_2')",
                            "Call"
                        ],
                        [
                            "lrelu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "x_inp",
                            "variable"
                        ],
                        [
                            "conv(x, channels=num_agent, kernel=3, stride=1, pad=1, sn=sn, use_bias=True, scope='ml0')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=num_agent, kernel=3, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=num_agent, kernel=3, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'enc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channels=1, kernel=3, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3_m')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_96": {
                "shape": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_toy.py": {
        "tensorflow": {
            "squeeze_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fully_connected(x, num_agent, sn=sn, scope='fully_3')",
                            "Call"
                        ],
                        [
                            "conv(x, channels=num_agent, kernel=3, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'disc'",
                            "Method Argument"
                        ],
                        [
                            "'classifier'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fully_connected(x, num_class, sn=False, scope='classifier_1')",
                            "Call"
                        ],
                        [
                            "conv(x, channels=1, kernel=3, stride=1, pad=0, sn=sn, use_bias=True, scope='conv_3_m')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "venn_gan.py": {
        "tensorflow": {
            "placeholder_146": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "noise_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, args.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "modes_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "modes_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_200": {
                "variable": {
                    "value": "g_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "gen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_201": {
                "variable": {
                    "value": "g_ema_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "ema_gen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_202": {
                "variable": {
                    "value": "d_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "dis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_251": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_57": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_130": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_130": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_153": {
                "variable": {
                    "value": "gen_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gen_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator(noise_ph, mode=modes_ph, num_modes=num_region, sn=sn_g, bn=bn, is_training=is_training_pl, name='gen')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "bs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[args.batch_size for _ in range(num_region)]",
                            "ListComp"
                        ],
                        [
                            "bs_list",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_183": {
                "variable": {
                    "value": "input_class",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[gen_list[indx] for indx in relevant_idx]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[idx * tf.ones(bs, dtype='int32') for (idx, bs) in enumerate([bs_list[indx] for indx in relevant_idx])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_208": {
                "variable": {
                    "value": "g_train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "g_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                },
                "beta1": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.beta1",
                            "Attribute"
                        ]
                    ]
                },
                "beta2": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.beta2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdamOptimizer_209": {
                "variable": {
                    "value": "d_train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "d_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                },
                "beta1": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.beta1",
                            "Attribute"
                        ]
                    ]
                },
                "beta2": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.beta2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_225": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, h, w, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "sample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_227": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(sample, num_agent=10, features=True, sn=False, name='q_score')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_228": {
                "variable": {
                    "value": "q_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "q_score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake, labels=tf.ones_like(fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_125": {
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_157": {
                "variable": {
                    "value": "noise_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "noise_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, args.z_dim), name='noise_ph')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_region",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(2, args.num_agent) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_163": {
                "variable": {
                    "value": "gen_ema",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "gen_ema",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator(noise_ph, mode=modes_ph, num_modes=num_region, sn=sn_g, bn=bn, is_training=False, name='ema_gen')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(gen_ema, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_204": {
                "scope": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_215": {
                "control_inputs": {
                    "value": "[d_train_op, g_train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=real, labels=tf.ones_like(real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_121": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake, labels=tf.zeros_like(fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_123": {
                "logits": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_125": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(sample, num_agent=10, features=True, sn=False, name='q_score')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([idx * tf.ones(bs, dtype='int32') for (idx, bs) in enumerate([bs_list[indx] for indx in relevant_idx])], axis=0)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_133": {
                "x": {
                    "value": "iterator.get_next()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_171": {
                "values": {
                    "value": "[gen_list[region] for region in connection_map[i]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_120": {
                "logits": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_121": {
                "logits": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_191": {
                "ys": {
                    "value": "dis_list[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "data_samples[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_123": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_185": {
                "shape": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(ddx), axis=[1, 2, 3]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_196": {
                "ys": {
                    "value": "dis_list[i][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "gen_samples[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_121": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_193": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(ddx), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_198": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(ddx), axis=[1, 2, 3]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "tf.square(ddx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_198": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(ddx), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_193": {
                "x": {
                    "value": "ddx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(dis_list[i][0], data_samples[i])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(dis_list[i][1], gen_samples[i])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_198": {
                "input_tensor": {
                    "value": "tf.square(ddx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_198": {
                "x": {
                    "value": "ddx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(dis_list[i][0], data_samples[i])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(dis_list[i][1], gen_samples[i])[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}