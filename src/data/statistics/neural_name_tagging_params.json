{
    "data.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "Dropout_52": {
                "variable": {
                    "value": "self.feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.lstm_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lstm_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_in, char_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_72": {
                "variable": {
                    "value": "lstm_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([word_in, char_in], dim=2)",
                            "Call"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "repr_mix_gate_1 * word_in + repr_mix_gate_2 * char_in",
                            "BinOp"
                        ],
                        [
                            "repr_mix_gate_1 * word_in + repr_mix_gate_2 * char_in_alt",
                            "BinOp"
                        ],
                        [
                            "torch.cat([feats, char_in_cat], dim=2)",
                            "Call"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "repr_mix_gate * word_in + (1 - repr_mix_gate) * char_in",
                            "BinOp"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "gate * word_in + (1 - gate) * char_in",
                            "BinOp"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_74": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_157": {
                "variable": {
                    "value": "self.feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_158": {
                "variable": {
                    "value": "self.lstm_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lstm_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_159": {
                "variable": {
                    "value": "self.signal_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "signal_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.word_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.word_dim, self.word_dim), Linear(self.word_dim, self.word_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self.char_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.word_dim, self.word_dim), Linear(self.word_dim, self.word_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.hs_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.uni_lstm_size, self.uni_lstm_size) for _ in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_186": {
                "variable": {
                    "value": "self.cof_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.uni_lstm_size, self.uni_lstm_size) for _ in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_261": {
                "variable": {
                    "value": "lstm_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([word_in, char_in], dim=2)",
                            "Call"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "repr_mix_gate_1 * word_in + repr_mix_gate_2 * char_in",
                            "BinOp"
                        ],
                        [
                            "repr_mix_gate_1 * word_in + repr_mix_gate_2 * char_in_alt",
                            "BinOp"
                        ],
                        [
                            "torch.cat([feats, char_in_cat], dim=2)",
                            "Call"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "repr_mix_gate * word_in + (1 - repr_mix_gate) * char_in",
                            "BinOp"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "gate * word_in + (1 - gate) * char_in",
                            "BinOp"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_263": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "hs_enh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hs_fwd_enh, hs_bwd_enh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_363": {
                "variable": {
                    "value": "self.feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_364": {
                "variable": {
                    "value": "self.lstm_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lstm_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_377": {
                "variable": {
                    "value": "self.hs_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.uni_lstm_size, self.uni_lstm_size), Linear(self.uni_lstm_size, self.uni_lstm_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_381": {
                "variable": {
                    "value": "self.cof_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.uni_lstm_size, self.uni_lstm_size), Linear(self.uni_lstm_size, self.uni_lstm_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_419": {
                "variable": {
                    "value": "lstm_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([word_in, char_in], dim=2)",
                            "Call"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "repr_mix_gate_1 * word_in + repr_mix_gate_2 * char_in",
                            "BinOp"
                        ],
                        [
                            "repr_mix_gate_1 * word_in + repr_mix_gate_2 * char_in_alt",
                            "BinOp"
                        ],
                        [
                            "torch.cat([feats, char_in_cat], dim=2)",
                            "Call"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "repr_mix_gate * word_in + (1 - repr_mix_gate) * char_in",
                            "BinOp"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "gate * word_in + (1 - gate) * char_in",
                            "BinOp"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_421": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "hs_enh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hs_fwd_enh, hs_bwd_enh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_514": {
                "variable": {
                    "value": "self.feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_515": {
                "variable": {
                    "value": "self.lstm_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lstm_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_535": {
                "variable": {
                    "value": "lstm_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([word_in, char_in], dim=2)",
                            "Call"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "repr_mix_gate_1 * word_in + repr_mix_gate_2 * char_in",
                            "BinOp"
                        ],
                        [
                            "repr_mix_gate_1 * word_in + repr_mix_gate_2 * char_in_alt",
                            "BinOp"
                        ],
                        [
                            "torch.cat([feats, char_in_cat], dim=2)",
                            "Call"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "repr_mix_gate * word_in + (1 - repr_mix_gate) * char_in",
                            "BinOp"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ],
                        [
                            "gate * word_in + (1 - gate) * char_in",
                            "BinOp"
                        ],
                        [
                            "self.feat_dropout(feats)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_537": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(lstm_out)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "parameters['word_embed_num']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "parameters['word_embed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "C.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_121": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "parameters['word_embed_num']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "parameters['word_embed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self.signal_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.signal_dim, self.word_dim), Linear(self.signal_dim, self.word_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_190": {
                "variable": {
                    "value": "self.crs_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.signal_dim * (ctx_size + 1), self.uni_lstm_size) for _ in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, char_in_cat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "signal_in_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rs_pad, signal_in, rs_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_485": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "parameters['word_embed_num']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "parameters['word_embed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_137": {
                "variable": {
                    "value": "self.signal_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "parameters['signal_embed_num']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "parameters['signal_embed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_283": {
                "tensors": {
                    "value": "[hs_pad, hs_fwd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "tensors": {
                    "value": "[hs_bwd, hs_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_429": {
                "tensors": {
                    "value": "[hs_pad, hs_fwd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_430": {
                "tensors": {
                    "value": "[hs_bwd, hs_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module.py": {
        "torch": {
            "arange_21": {
                "variable": {
                    "value": "ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lens.max().item()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "lens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(sizes[i], sizes[i + 1]) for i in range(len(sizes) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_111": {
                "variable": {
                    "value": "self.char_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embedding_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(1, x[1], (x[0], embedding_dim)) for x in filters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_125": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_outputs_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_141": {
                "variable": {
                    "value": "self.char_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embedding_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(1, x[1], (x[0], embedding_dim)) for x in filters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_outputs_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_157": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_171": {
                "variable": {
                    "value": "self.char_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embedding_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(1, x[1], (x[0], embedding_dim)) for x in filters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_outputs_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in conv_outputs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_201": {
                "variable": {
                    "value": "transition",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_202": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.label_size, self.label_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_242": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits, pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_264": {
                "variable": {
                    "value": "trn_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trn_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trn.unsqueeze(0).expand(batch_size, self.label_size, self.label_size)",
                            "Call"
                        ],
                        [
                            "self.transition.unsqueeze(0).expand_as(vit_exp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lbl_rexp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lbl_r.unsqueeze(-1).expand(*lbl_r.size(), self.label_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_267": {
                "variable": {
                    "value": "trn_scr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trn_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(trn_exp, 1, lbl_rexp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lbl_lexp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, :-1].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_279": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([logits, pads], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_279": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_350": {
                "variable": {
                    "value": "pointers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pointers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pointers)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_360": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "paths[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_355": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reversed(pointers)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_121": {
                "input": {
                    "value": "conv.forward(inputs_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_123": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_151": {
                "input": {
                    "value": "conv.forward(inputs_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_153": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_181": {
                "input": {
                    "value": "conv.forward(inputs_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_181": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_183": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_183": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x[0], embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x[0], embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x[0], embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "runs/eval_lstmcnn.py": {
        "torch": {
            "is_available_31": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(args.input, conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "runs/train_lstmcnn.py": {
        "torch": {
            "is_available_71": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_74": {
                "int": {
                    "value": "args.thread",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_73": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, '{}train.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu, to_bioes=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__172": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "dataset": {
                    "value": "dev_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, '{}dev.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu, to_bioes=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dev_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, '{}test.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu, to_bioes=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(model=model.state_dict(), optimizer=optimizer.state_dict(), scores=best_scores, params=params, model_params=model.params, vocabs=vocabs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'model.best.mdl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runs/train_lstmcnn_all.py": {
        "torch": {
            "is_available_64": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_67": {
                "int": {
                    "value": "args.thread",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_232": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, '{}.model.best.mdl'.format(train))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_156": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}train.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_257": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}test.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ],
                        [
                            "NameTaggingDataset(test_file, conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__166": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "dataset": {
                    "value": "dev_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}dev.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dev_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}test.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ],
                        [
                            "NameTaggingDataset(test_file, conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(model=model.state_dict(), params=params, model_params=model.params, vocabs=vocabs)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(output_dir, '{}.model.best.mdl'.format(train)))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, '{}.model.best.mdl'.format(dataset))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runs/train_lstmcnn_dfc.py": {
        "torch": {
            "is_available_76": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_79": {
                "int": {
                    "value": "args.thread",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_78": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_166": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, '{}train.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__176": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "dataset": {
                    "value": "dev_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, '{}dev.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dev_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, '{}test.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(model=model.state_dict(), params=params, model_params=model.params, vocabs=vocabs, counters=counters)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'model.best.mdl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runs/train_lstmcnn_dfc_all.py": {
        "torch": {
            "is_available_68": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_65": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_71": {
                "int": {
                    "value": "args.thread",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_147": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_245": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, '{}.model.best.mdl'.format(train))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_70": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}train.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_273": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}test.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ],
                        [
                            "NameTaggingDataset(test_file, conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__179": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_188": {
                "dataset": {
                    "value": "dev_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}dev.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dev_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}test.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ],
                        [
                            "NameTaggingDataset(test_file, conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(model=model.state_dict(), params=params, model_params=model.params, vocabs=vocabs, counters=counters)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(output_dir, '{}.model.best.mdl'.format(train)))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, '{}.model.best.mdl'.format(dataset))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runs/train_lstmcnn_featgate_all.py": {
        "torch": {
            "is_available_67": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_65": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_70": {
                "int": {
                    "value": "args.thread",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_242": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, '{}.model.best.mdl'.format(train))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_69": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_168": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}train.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_267": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}test.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ],
                        [
                            "NameTaggingDataset(test_file, conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__178": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_187": {
                "dataset": {
                    "value": "dev_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}dev.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dev_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_206": {
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NameTaggingDataset(os.path.join(args.input, dataset, '{}test.tsv'.format(args.prefix)), conll_parser, gpu=use_gpu)",
                            "Call"
                        ],
                        [
                            "NameTaggingDataset(test_file, conll_parser, gpu=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.batch_processor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(output_dir, '{}.model.best.mdl'.format(train)))",
                            "Call"
                        ],
                        [
                            "dict(model=model.state_dict(), optimizer=optimizer.state_dict(), scores=best_scores, params=params, model_params=model.params, vocabs=vocabs, counters=counters)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, '{}.model.best.mdl'.format(dataset))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "Embedding_178": {
                "variable": {
                    "value": "embed_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "norm_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_grad_by_freq": {
                    "value": "scale_grad_by_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "_weight": {
                    "value": "torch.FloatTensor(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}