{
    "lshutils.py": {
        "sklearn": {
            "KMeans_313": {
                "n_clusters": {
                    "value": "kstar",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "matmul_785": {
                "variable": {
                    "value": "hlayer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.inputs_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.encode_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_786": {
                "variable": {
                    "value": "self.hlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "hlayer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.inputs_, self.encode_weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.inputs_, self.encode_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hlayer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_790": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.hlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.decode_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_791": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.hlayer, tf.transpose(self.decode_weights))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_792": {
                "variable": {
                    "value": "self.recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.targets, logits=self.output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_804": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_810": {
                "variable": {
                    "value": "inputs_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.in_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_811": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.in_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_812": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_861": {
                "variable": {
                    "value": "self.encode_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.in_dim, self.n_hidden], stddev=0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_862": {
                "variable": {
                    "value": "self.decode_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.in_dim, self.n_hidden], stddev=0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_865": {
                "variable": {
                    "value": "hlayer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.inputs_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.encode_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_866": {
                "variable": {
                    "value": "hlayer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hlayer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.inputs_, self.encode_weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.inputs_, self.encode_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hlayer)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_868": {
                "variable": {
                    "value": "(thresholds, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hlayer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.inputs_, self.encode_weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.inputs_, self.encode_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hlayer)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.topk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_873": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.hlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.decode_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_875": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.targets, logits=self.output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_877": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_775": {
                "variable": {
                    "value": "self.encode_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.in_dim, self.n_hidden], minval=0, maxval=10 * self.rho)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_776": {
                "variable": {
                    "value": "self.decode_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.in_dim, self.n_hidden], stddev=0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_778": {
                "variable": {
                    "value": "self.encode_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.in_dim, self.n_hidden], stddev=0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_788": {
                "variable": {
                    "value": "self.hlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.hlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "tf.constant(rho)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_797": {
                "variable": {
                    "value": "rho_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "normed(self.encode_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_790": {
                "a": {
                    "value": "self.decode_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_792": {
                "labels": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_817": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_861": {
                "shape": {
                    "value": "[self.in_dim, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_862": {
                "shape": {
                    "value": "[self.in_dim, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_871": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hlayer - tf.expand_dims(thresholds, 1) >= 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_873": {
                "a": {
                    "value": "self.decode_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_875": {
                "labels": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_776": {
                "shape": {
                    "value": "[self.in_dim, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_778": {
                "shape": {
                    "value": "[self.in_dim, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_783": {
                "x": {
                    "value": "self.encode_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "tf.constant(rho)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_807": {
                "x": {
                    "value": "rho_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(normed(self.encode_weights))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_818": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_870": {
                "input": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "thresholds[:, -1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_788": {
                "value": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_793": {
                "input_tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_793": {
                "input_tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_783": {
                "value": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}