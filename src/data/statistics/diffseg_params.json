{
    "nwarp.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, *output_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_91": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mode - self.width / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - self.width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_92": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a + self.width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "modes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(torch.cat([torch.zeros((1, 1)), self.loc_net(input_seq)], dim=1), dim=1).cumsum(dim=1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(modes, self.min_step, self.max_step)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_118": {
                "variable": {
                    "value": "xrange",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "xrange",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "dgamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros((1, 1)), self.nonnegativity(input_seq)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_191": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dgamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros((1, 1)), self.nonnegativity(input_seq)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "warped_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "original_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_240": {
                "variable": {
                    "value": "self.thetag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(paramg_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self.thetal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_seg, paraml_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.thetag.unsqueeze(0).expand(self.thetal.shape[0], -1), self.thetal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_47": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_53": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_59": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_192": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "almat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "warped_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "original_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_326": {
                "variable": {
                    "value": "self.invlink_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_112": {
                "input": {
                    "value": "torch.cat([torch.zeros((1, 1)), self.loc_net(input_seq)], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_112": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "variable": {
                    "value": "self.nonnegativity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_189": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "threshold_226": {
                "variable": {
                    "value": "responsibility",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - torch.abs(gamma_scaled - k)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_101": {
                "input": {
                    "value": "torch.clamp((x - a) / (m - a), 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.power",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_192": {
                "input": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf.reshape(-1, n_steps, seq_len).sum(dim=1) / n_steps",
                            "BinOp"
                        ],
                        [
                            "self.cpab.transform_grid(grid, theta).reshape(batch_size, seq_len)",
                            "Call"
                        ],
                        [
                            "self.normintegral(self.backend(input_seq))",
                            "Call"
                        ],
                        [
                            "torch.cumsum(dgamma, dim=1)",
                            "Call"
                        ],
                        [
                            "gamma / torch.max(gamma, dim=1)[0].unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.warp(input_seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_288": {
                "input": {
                    "value": "sample - params[:, :, 0].unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_289": {
                "input": {
                    "value": "params[:, :, 1].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_101": {
                "input": {
                    "value": "(x - a) / (m - a)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_102": {
                "input": {
                    "value": "torch.clamp((b - x) / (b - m), 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.power",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "[torch.zeros((1, 1)), self.loc_net(input_seq)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_179": {
                "variable": {
                    "value": "self.nonnegativity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_102": {
                "input": {
                    "value": "(b - x) / (b - m)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softplus_181": {
                "variable": {
                    "value": "self.nonnegativity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_226": {
                "input": {
                    "value": "gamma_scaled - k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_220": {
                "input": {
                    "value": "gamma_scaled + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}