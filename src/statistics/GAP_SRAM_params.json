{
    "backbone.py": {
        "torch": {
            "max_pool2d_42": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_48": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "gcn_model.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.fc_rn_theta_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFR) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.fc_rn_phi_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFR) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.fc_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFG_ONE, bias=False) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.nl_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm([T * N, NFG_ONE]) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "graph_boxes_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(graph_boxes_features_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.fc_emb_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "K * K * D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NFB",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cfg.num_features_boxes",
                            "Attribute"
                        ],
                        [
                            "self.cfg.num_features_boxes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LayerNorm_136": {
                "variable": {
                    "value": "self.nl_emb_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[NFB]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_138": {
                "variable": {
                    "value": "self.dropout_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.cfg.train_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.fc_activities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.num_features_gcn",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.cfg.num_activities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_159": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_166": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "images_in_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "images_in",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B * T, 3, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "boxes_in_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_in",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B * T * N, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "boxes_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxes_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i * torch.ones(N, dtype=torch.int) for i in range(B * T)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(boxes_idx).to(device=boxes_in.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "boxes_idx_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i * torch.ones(N, dtype=torch.int) for i in range(B * T)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(boxes_idx).to(device=boxes_in.device)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B * T * N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "features_multiscale",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features_multiscale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features_multiscale, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_222": {
                "variable": {
                    "value": "boxes_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.roi_align(features_multiscale, boxes_in_flat, boxes_idx_flat)",
                            "Call"
                        ],
                        [
                            "boxes_features.reshape(B, T, N, -1)",
                            "Call"
                        ],
                        [
                            "self.fc_emb_1(boxes_features)",
                            "Call"
                        ],
                        [
                            "self.nl_emb_1(boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(boxes_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_292": {
                "variable": {
                    "value": "video_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(dec_t_gen)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_294": {
                "variable": {
                    "value": "video_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "video_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(torch.stack(dec_t_gen), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.max(video_states, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "similarity_relation_graph",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "graph_boxes_features_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_rn_theta_list[i](graph_boxes_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_boxes_features_phi.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "one_graph_boxes_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "one_graph_boxes_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_gcn_list[i](torch.matmul(relation_graph, graph_boxes_features))",
                            "Call"
                        ],
                        [
                            "F.relu(one_graph_boxes_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "stage_images_in_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "stage_images_in",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B * TS, 3, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "stage_boxes_in_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "stage_boxes_in",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(B * TS * N, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_232": {
                "variable": {
                    "value": "stage_boxes_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stage_boxes_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i * torch.ones(N, dtype=torch.int) for i in range(B * TS)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(stage_boxes_idx).to(device=stage_boxes_in.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_233": {
                "variable": {
                    "value": "stage_boxes_idx_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "stage_boxes_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i * torch.ones(N, dtype=torch.int) for i in range(B * TS)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(stage_boxes_idx).to(device=stage_boxes_in.device)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B * TS * N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "stage_features_multiscale",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stage_features_multiscale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(stage_features_multiscale, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_254": {
                "variable": {
                    "value": "stage_boxes_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "stage_boxes_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.roi_align(stage_features_multiscale, stage_boxes_in_flat, stage_boxes_idx_flat)",
                            "Call"
                        ],
                        [
                            "stage_boxes_features.reshape(B, TS, N, -1)",
                            "Call"
                        ],
                        [
                            "self.fc_emb_1(stage_boxes_features)",
                            "Call"
                        ],
                        [
                            "self.nl_emb_1(stage_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(stage_boxes_features).view(B * TS, N, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_288": {
                "variable": {
                    "value": "box_t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[abs_pos_t[:, :, 0] - w, abs_pos_t[:, :, 1] - h, abs_pos_t[:, :, 0] + w, abs_pos_t[:, :, 1] + h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_23": {
                "input": {
                    "value": "x[:, -1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_101": {
                "tensors": {
                    "value": "graph_boxes_features_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "interpolate_205": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "F.interpolate(features, size=(OH, OW), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "stage_outputs",
                            "Name"
                        ],
                        [
                            "F.interpolate(features, size=(OH, OW), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(OH, OW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_292": {
                "tensors": {
                    "value": "dec_t_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_297": {
                "tensors": {
                    "value": "pos_t_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.num_features_gcn",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.num_features_relation",
                            "Attribute"
                        ],
                        [
                            "self.cfg.num_features_relation",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.num_features_gcn",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.num_features_relation",
                            "Attribute"
                        ],
                        [
                            "self.cfg.num_features_relation",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.num_features_gcn",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFG_ONE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NFG",
                            "Name"
                        ],
                        [
                            "NFG",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_50": {
                "normalized_shape": {
                    "value": "[T * N, NFG_ONE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "input": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_boxes_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.stack(graph_boxes_features_list), dim=0)",
                            "Call"
                        ],
                        [
                            "boxes_features.reshape(B, T, N, NFG).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_191": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.num_boxes",
                            "Attribute"
                        ],
                        [
                            "self.cfg.num_boxes",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_241": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "F.interpolate(features, size=(OH, OW), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "stage_outputs",
                            "Name"
                        ],
                        [
                            "F.interpolate(features, size=(OH, OW), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(OH, OW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_231": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.num_boxes",
                            "Attribute"
                        ],
                        [
                            "self.cfg.num_boxes",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "st_gcn.py": {
        "torch": {
            "Conv1d_28": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_37": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "x.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "x.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "self.fc_rn_theta_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFR) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.fc_rn_phi_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFR) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.fc_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFG_ONE, bias=False) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_115": {
                "variable": {
                    "value": "self.nl_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm([N, NFG_ONE]) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "one_sim_graph_boxes_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "one_sim_graph_boxes_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1)))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1)))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_156": {
                "variable": {
                    "value": "self.fc_rn_theta_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFR) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_157": {
                "variable": {
                    "value": "self.fc_rn_phi_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFR) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.fc_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFG_ONE, bias=False) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.nl_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm([N, NFG_ONE]) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "similarity_relation_graph",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "graph_boxes_features_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_rn_theta_list[0](graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1))",
                            "Call"
                        ],
                        [
                            "self.fc_rn_theta_list[0](graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_boxes_features_phi.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ],
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "one_sim_graph_boxes_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "one_sim_graph_boxes_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1)))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1)))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "self.tcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_244": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "self.fc_rn_theta_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFR) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_251": {
                "variable": {
                    "value": "self.fc_rn_phi_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFR) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_253": {
                "variable": {
                    "value": "self.fc_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFG_ONE, bias=False) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_254": {
                "variable": {
                    "value": "self.pos_fc_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(NFG, NFG_ONE, bias=False) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_256": {
                "variable": {
                    "value": "self.nl_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm([N, NFG_ONE]) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_257": {
                "variable": {
                    "value": "self.pos_nl_gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm([N, NFG_ONE]) for i in range(NG)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "variable": {
                    "value": "similarity_relation_graph",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "graph_boxes_features_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_rn_theta_list[0](graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1))",
                            "Call"
                        ],
                        [
                            "self.fc_rn_theta_list[0](graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_boxes_features_phi.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_285": {
                "variable": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ],
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_299": {
                "variable": {
                    "value": "one_sim_graph_boxes_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "one_sim_graph_boxes_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1)))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "self.fc_gcn_list[0](torch.matmul(relation_graph, graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1)))",
                            "Call"
                        ],
                        [
                            "self.nl_gcn_list[0](one_sim_graph_boxes_features)",
                            "Call"
                        ],
                        [
                            "F.relu(one_sim_graph_boxes_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "input": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ],
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_boxes_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "latent_t + latent_x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_200": {
                "input": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ],
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ],
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ],
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Dropout_241": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_297": {
                "input": {
                    "value": "relation_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ],
                        [
                            "similarity_relation_graph",
                            "Name"
                        ],
                        [
                            "relation_graph.reshape(B * T, N, N)",
                            "Call"
                        ],
                        [
                            "torch.softmax(relation_graph, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "graph_boxes_features.permute(0, 2, 3, 1).contiguous().view(B * T, N, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFG_ONE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_115": {
                "normalized_shape": {
                    "value": "[N, NFG_ONE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFG_ONE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_162": {
                "normalized_shape": {
                    "value": "[N, NFG_ONE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_250": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "graph_boxes_features_phi.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_253": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFG_ONE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "in_features": {
                    "value": "NFG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NFG_ONE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_256": {
                "normalized_shape": {
                    "value": "[N, NFG_ONE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNorm_257": {
                "normalized_shape": {
                    "value": "[N, NFG_ONE]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train_net.py": {
        "torch": {
            "Adam_96": {
                "variable": {
                    "value": "D2_solver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "D2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_97": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "cfg.train_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.stage2_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_202": {
                "variable": {
                    "value": "activities_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "activities_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_203": {
                "variable": {
                    "value": "activities_correct",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eq(activities_labels.int(), activities_in.int()).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_284": {
                "variable": {
                    "value": "activities_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "activities_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_285": {
                "variable": {
                    "value": "activities_correct",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eq(activities_labels.int(), activities_in.int()).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.result_path + '/epoch%d_%.2f%%.pth' % (epoch, test_info['activities_acc'])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_344": {
                "variable": {
                    "value": "activities_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "activities_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_346": {
                "variable": {
                    "value": "activities_correct",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eq(activities_labels.int(), activities_in.int()).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_203": {
                "input": {
                    "value": "activities_labels.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "activities_in.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_285": {
                "input": {
                    "value": "activities_labels.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "activities_in.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "batch_data[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_162": {
                "*size": {
                    "value": "batch_data[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_346": {
                "input": {
                    "value": "activities_labels.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "activities_in.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_161": {
                "*size": {
                    "value": "batch_data[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_162": {
                "*size": {
                    "value": "batch_data[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "sub_13": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images.div(255.0)",
                            "Call"
                        ],
                        [
                            "torch.sub(images, 0.5)",
                            "Call"
                        ],
                        [
                            "torch.mul(images, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_14": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images.div(255.0)",
                            "Call"
                        ],
                        [
                            "torch.sub(images, 0.5)",
                            "Call"
                        ],
                        [
                            "torch.mul(images, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positions[:, 0].reshape(-1, 1).repeat(1, d), positions[:, 1].reshape(-1, 1).repeat(1, d)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_71": {
                "variable": {
                    "value": "embeddings[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_72": {
                "variable": {
                    "value": "embeddings[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rx - 2.0 * X.matmul(Y.t()) + ry.t()",
                            "BinOp"
                        ],
                        [
                            "rx - 2.0 * X.matmul(Y.transpose(1, 2)) + ry.transpose(1, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_48": {
                "input": {
                    "value": "torch.abs(dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_48": {
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rx - 2.0 * X.matmul(Y.t()) + ry.t()",
                            "BinOp"
                        ],
                        [
                            "rx - 2.0 * X.matmul(Y.transpose(1, 2)) + ry.transpose(1, 2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils_vis/misc.py": {
        "torch": {
            "normal_45": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils_vis/visualize.py": {
        "torch": {
            "exp_19": {
                "input": {
                    "value": "-torch.pow(torch.add(x, -b), 2).div(2 * c * c)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_19": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "cl",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, x.size(1), x.size(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "cl",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.size(0), 3, x.size(2), x.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_19": {
                "input": {
                    "value": "torch.add(x, -b)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_19": {
                "input": {
                    "value": "2 * c * c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_19": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "-b",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "volleyball.py": {
        "torch": {
            "from_numpy_135": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float()",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "bboxes",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([_read_bbox(values[i:i + 4]) for i in range(0, 5 * num_people, 5)])",
                            "Call"
                        ],
                        [
                            "np.vstack(boxes).reshape([-1, num_boxes, 4])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(bboxes).float()",
                            "Call"
                        ],
                        [
                            "np.vstack(boxes).reshape([-1, self.num_boxes, 4])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(bboxes).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "bboxes_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bboxes_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack(boxes_idx).reshape([-1, num_boxes])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(bboxes_idx).int()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[act_to_id[name] for name in action_names]",
                            "ListComp"
                        ],
                        [
                            "np.hstack(actions).reshape([-1, num_boxes])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(actions).long()",
                            "Call"
                        ],
                        [
                            "np.hstack(actions).reshape([-1, self.num_boxes])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(actions).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "activities",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "activities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(activities, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(activities).long()",
                            "Call"
                        ],
                        [
                            "np.array(activities, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(activities).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float()",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "bboxes",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bboxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([_read_bbox(values[i:i + 4]) for i in range(0, 5 * num_people, 5)])",
                            "Call"
                        ],
                        [
                            "np.vstack(boxes).reshape([-1, num_boxes, 4])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(bboxes).float()",
                            "Call"
                        ],
                        [
                            "np.vstack(boxes).reshape([-1, self.num_boxes, 4])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(bboxes).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[act_to_id[name] for name in action_names]",
                            "ListComp"
                        ],
                        [
                            "np.hstack(actions).reshape([-1, num_boxes])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(actions).long()",
                            "Call"
                        ],
                        [
                            "np.hstack(actions).reshape([-1, self.num_boxes])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(actions).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "activities",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "activities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(activities, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(activities).long()",
                            "Call"
                        ],
                        [
                            "np.array(activities, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(activities).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_276": {
                "variable": {
                    "value": "bboxes_center",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0.unsqueeze(2), y0.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}