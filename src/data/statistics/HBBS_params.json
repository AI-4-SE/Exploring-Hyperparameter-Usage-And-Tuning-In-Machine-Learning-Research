{
    "models/bucket.py": {
        "sklearn": {
            "AffinityPropagation_36": {
                "variable": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_40": {
                "variable": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "np.array(scores).argmax() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "KMeans_42": {
                "variable": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_38": {
                "X": {
                    "value": "seen_em + pts_em",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "KMeans(n).fit_predict(seen_em + pts_em)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KMeans_38": {
                "n_clusters": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "models/combinator.py": {
        "sklearn": {
            "AffinityPropagation_93": {
                "variable": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_97": {
                "variable": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "np.array(scores).argmax() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "KMeans_99": {
                "variable": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_95": {
                "X": {
                    "value": "seen_em + pts_em",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "KMeans(n).fit_predict(seen_em + pts_em)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KMeans_95": {
                "n_clusters": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "agents/fittedgp.py": {
        "torch": {
            "MultivariateNormal_73": {
                "variable": {
                    "value": "mvn",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.tensor(cov) + 0.0001 * torch.eye(cov.shape[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_73": {
                "n": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "agents/pseudo_thompson.py": {
        "torch": {
            "Normal_24": {
                "variable": {
                    "value": "sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "environment/env.py": {
        "torch": {
            "empty_cache_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gym_batgirl/gym_batgirl/utils/env.py": {
        "torch": {
            "empty_cache_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/autoencoder.py": {
        "torch": {
            "tensor_79": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.encode(x) for x in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.encode(x) for x in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[*self.encoder.parameters(), *self.decoder.parameters()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "fc[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "fc[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "LY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Y_hat - Y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__70": {
                "parameters": {
                    "value": "[*self.encoder.parameters(), *self.decoder.parameters()]",
                    "type": "List",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "in_channels": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "hidden // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "shape[0] * shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "(X_hat.view(X.shape) - X) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/bayesian.py": {
        "torch": {
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, w[0], w[1], padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, w[2], w[3], padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, w[4], w[5], padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ w[6] + w[7]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ w[8] + w[9]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu + self.rho",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_16": {
                "*size": {
                    "value": "*x",
                    "type": "Starred",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_33": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[0], w[1], padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[2], w[3], padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[4], w[5], padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[6] + w[7])",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[8] + w[9])",
                            "Call"
                        ],
                        [
                            "x @ w[10] + w[11]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "w[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_34": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[0], w[1], padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[2], w[3], padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[4], w[5], padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[6] + w[7])",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[8] + w[9])",
                            "Call"
                        ],
                        [
                            "x @ w[10] + w[11]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "w[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_35": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[0], w[1], padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[2], w[3], padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[4], w[5], padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[6] + w[7])",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[8] + w[9])",
                            "Call"
                        ],
                        [
                            "x @ w[10] + w[11]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "w[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_49": {
                "size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "x.detach().std().mul(sig_scale).exp().add(-1).log()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_55": {
                "loc": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "rho.exp().add(1).log() + self._eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[y for (x, y) in Di]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Normal_82": {
                "variable": {
                    "value": "p_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "Y_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "Y_sigma + self._eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "p_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(q_w - p_w) / M - p_D",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(loss, 0, 1 / self._eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1 / self._eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "input": {
                    "value": "result[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "input": {
                    "value": "result[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "np.array(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_87": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(q_w - p_w) / M - p_D",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(loss, 0, 1 / self._eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_76": {
                "input": {
                    "value": "pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_76": {
                "input": {
                    "value": "1 + torch.exp(pred[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__93": {
                "parameters": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mu + self.rho",
                            "BinOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_94": {
                "input": {
                    "value": "weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_81": {
                "loc": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_76": {
                "input": {
                    "value": "pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_95": {
                "input": {
                    "value": "weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/cnn.py": {
        "torch": {
            "Adam_79": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "fc[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_32": {
                "input": {
                    "value": "self.fc_layers(filtered.reshape(filtered.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__51": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "in_channels": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "(Y - self.model(X)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_35": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[self.encode(seq) for seq in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "models/embed.py": {
        "torch": {
            "Adam_65": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.5)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 100)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32 * shape[0], 100)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__34": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "input": {
                    "value": "self.score(self.fc_layers(filtered.reshape(filtered.shape[0], -1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "input": {
                    "value": "self.score(self.fc_layers(filtered.reshape(filtered.shape[0], -1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "(Y - self.model(X.float())) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_77": {
                "in_channels": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "32 * shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1d_116": {
                "in_channels": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_117": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_118": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "[self.encode(seq) for seq in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[self.encode(seq) for seq in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "models/exactgp.py": {
        "torch": {
            "Adam_26": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_32": {
                "input": {
                    "value": "result.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/featurizer.py": {
        "torch": {
            "tensor_108": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.encode(x) for x in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.encode(x) for x in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "fc[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "fc[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "fc[0]",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__102": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "in_channels": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_22": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_23": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32 * shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/fixed_bayesian.py": {
        "torch": {
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, w[0], w[1], padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, w[2], w[3], padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, w[4], w[5], padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ w[6] + w[7]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ w[8] + w[9]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mu + self.rho + [self.sigma]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_108": {
                "input": {
                    "value": "result[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "input": {
                    "value": "result[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_17": {
                "*size": {
                    "value": "[*x]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_34": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[0], w[1], padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[2], w[3], padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[4], w[5], padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[6] + w[7])",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[8] + w[9])",
                            "Call"
                        ],
                        [
                            "x @ w[10] + w[11]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "w[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_35": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[0], w[1], padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[2], w[3], padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[4], w[5], padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[6] + w[7])",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[8] + w[9])",
                            "Call"
                        ],
                        [
                            "x @ w[10] + w[11]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "w[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_36": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[0], w[1], padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[2], w[3], padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, w[4], w[5], padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[6] + w[7])",
                            "Call"
                        ],
                        [
                            "F.relu(x @ w[8] + w[9])",
                            "Call"
                        ],
                        [
                            "x @ w[10] + w[11]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "w[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_51": {
                "size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "(x.detach().std() if len(x) > 1 else torch.tensor(1.0)).mul(sig_scale).exp().add(-1).log()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_57": {
                "loc": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "rho.exp().add(1).log() + self._eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[y for (x, y) in Di]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "Y_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Normal_85": {
                "variable": {
                    "value": "p_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "Y_mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "Y_sigma + self._eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "p_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(q_w - p_w) / M - p_D",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(loss, 0, 1 / self._eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1 / self._eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "np.array(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_90": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(q_w - p_w) / M - p_D",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(loss, 0, 1 / self._eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__96": {
                "parameters": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mu + self.rho + [self.sigma]",
                            "BinOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_97": {
                "input": {
                    "value": "weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_84": {
                "loc": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_98": {
                "input": {
                    "value": "weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/gp.py": {
        "torch": {
            "sqrt_66": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma ** 2 + self.eps - K_star @ torch.inverse(K_XX + torch.eye(len(X)).to(self.embed.device).double() * self.eps) @ K_star.permute(1, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tau",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.embed.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mu + torch.squeeze(K_star @ torch.inverse(K_XX + torch.eye(len(X)).to(self.embed.device).double() * self.eps) @ (T(Y)[:, None] - self.mu))",
                            "BinOp"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.embed.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(self.sigma ** 2 + self.eps - K_star @ torch.inverse(K_XX + torch.eye(len(X)).to(self.embed.device).double() * self.eps) @ K_star.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.embed.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.embed.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.tau, self.mu, self.sigma, self.eps]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_23": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_48": {
                "input": {
                    "value": "-1 / (2 * self.tau ** 2) * T(squareform(pdist(X))) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_49": {
                "input": {
                    "value": "-1 / (2 * self.tau ** 2) * T(cdist(x, X)).view([len(x), len(X)]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "input": {
                    "value": "K_star @ torch.inverse(K_XX + torch.eye(len(X)).to(self.embed.device).double() * self.eps) @ (T(Y)[:, None] - self.mu)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_64": {
                "input": {
                    "value": "-1 / (2 * self.tau ** 2) * T(squareform(pdist(X))) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "-1 / (2 * self.tau ** 2) * T(cdist(x, X)).view([len(x), len(X)]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_28": {
                "input": {
                    "value": "-1 / (2 * self.tau ** 2) * T(squareform(pdist(X.cpu()))) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_29": {
                "n": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "det_30": {
                "input": {
                    "value": "K_XX + noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_30": {
                "input": {
                    "value": "K_XX + noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_50": {
                "input": {
                    "value": "K_XX + torch.eye(len(X)).to(self.embed.device).double() * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_66": {
                "input": {
                    "value": "K_XX + torch.eye(len(X)).to(self.embed.device).double() * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_51": {
                "n": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_67": {
                "n": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/spgp.py": {
        "torch": {
            "empty_25": {
                "variable": {
                    "value": "X_bar",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.embed.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_33": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_34": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X_bar, c, b, sig]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.zeta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mu + K_star @ torch.inverse(Q_M) @ K_MN @ torch.inverse(lam + I * sig.exp().add(1).log()) @ (Y[:, None] - self.mu)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_40": {
                "input": {
                    "value": "K_NM @ torch.inverse(K_M) @ K_MN",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.embed.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_70": {
                "input": {
                    "value": "sig_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T([K(x, x) for x in X_pred]) - K_star.view(K_star.size(0), 1, K_star.size(1)).bmm(((torch.inverse(K_M) - torch.inverse(Q_M)) @ K_star.permute(1, 0)).transpose(0, 1).view(K_star.size(0), K_star.size(1), 1)).view(X_pred.size(0)) + sig.exp().add(1).log()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_29": {
                "input": {
                    "value": "-1 / 2 * torch.sum(b * (x - y) ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "-1 / 2 * torch.sum(b[None, None, :] * (x[None, :, :] - y[:, None, :]) ** 2, dim=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_39": {
                "n": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_40": {
                "tensors": {
                    "value": "[K(x, x) for x in X]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "inverse_51": {
                "input": {
                    "value": "lam + I * sig.exp().add(1).log()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "b * (x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_54": {
                "input": {
                    "value": "lam + I * sig.exp().add(1).log()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_41": {
                "input": {
                    "value": "K_M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K_vec(X_bar, X_bar) + self.eps * torch.eye(M).to(self.embed.device).double()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_31": {
                "input": {
                    "value": "b[None, None, :] * (x[None, :, :] - y[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "inverse_40": {
                "input": {
                    "value": "K_M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K_vec(X_bar, X_bar) + self.eps * torch.eye(M).to(self.embed.device).double()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_53": {
                "input": {
                    "value": "Q_M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K_M + K_MN @ torch.inverse(lam + I * sig.exp().add(1).log()) @ K_NM",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_55": {
                "input": {
                    "value": "Q_M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K_M + K_MN @ torch.inverse(lam + I * sig.exp().add(1).log()) @ K_NM",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/uncertain.py": {
        "torch": {
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, self.W1_conv, self.B1_conv, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, self.W2_conv, self.B2_conv, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv1d(x, self.W3_conv, self.B3_conv, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ self.W1_fc + self.B1_fc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ self.W2_fc + self.B2_fc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "data": {
                    "value": "torch.empty(*x, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_32": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W1_conv, self.B1_conv, padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W2_conv, self.B2_conv, padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W3_conv, self.B3_conv, padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ self.W1_fc + self.B1_fc)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ self.W2_fc + self.B2_fc)",
                            "Call"
                        ],
                        [
                            "x @ self.W3_fc + self.B3_fc",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W1_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.B1_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_33": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W1_conv, self.B1_conv, padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W2_conv, self.B2_conv, padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W3_conv, self.B3_conv, padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ self.W1_fc + self.B1_fc)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ self.W2_fc + self.B2_fc)",
                            "Call"
                        ],
                        [
                            "x @ self.W3_fc + self.B3_fc",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.B2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_34": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W1_conv, self.B1_conv, padding=3))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W2_conv, self.B2_conv, padding=2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.conv1d(x, self.W3_conv, self.B3_conv, padding=1))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ self.W1_fc + self.B1_fc)",
                            "Call"
                        ],
                        [
                            "F.relu(x @ self.W2_fc + self.B2_fc)",
                            "Call"
                        ],
                        [
                            "x @ self.W3_fc + self.B3_fc",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.B3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[y for (x, y) in Di]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Normal_74": {
                "variable": {
                    "value": "p_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "Y_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "Y_rho + self._eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "p_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "input": {
                    "value": "result[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "result[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_92": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "np.array(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_16": {
                "*size": {
                    "value": "*x",
                    "type": "Starred",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "input": {
                    "value": "pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "1 + torch.exp(pred[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__82": {
                "parameters": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.params",
                            "Attribute"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Normal_73": {
                "loc": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_70": {
                "input": {
                    "value": "pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "seed[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "pos % torch.cuda.device_count()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}