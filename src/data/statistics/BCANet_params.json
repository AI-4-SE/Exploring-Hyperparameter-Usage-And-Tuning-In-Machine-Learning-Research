{
    "database/helper.py": {
        "tensorflow": {
            "shape_18": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[pad_before_h:pad_after_h]",
                            "Subscript"
                        ],
                        [
                            "image[:, pad_before_w:pad_after_w]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "range_24": {
                "variable": {
                    "value": "coord1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_25": {
                "variable": {
                    "value": "coord2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_28": {
                "variable": {
                    "value": "coord1_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(s[0])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[s[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_30": {
                "variable": {
                    "value": "coord2_vec_unordered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coord2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(s[1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[s[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "coord2_vec_unordered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coord2_vec_unordered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(coord2, [s[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord2_vec_unordered, [s[0], s[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[s[0], s[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "coord2_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(coord2_vec_unordered, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_38": {
                "variable": {
                    "value": "coord_new_centered",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([coord1_vec_centered, coord2_vec_centered])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_stitch_41": {
                "variable": {
                    "value": "rot_mat_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.cos(angle), tf.sin(angle), -tf.sin(angle), tf.cos(angle)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "rot_mat_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rot_mat_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dynamic_stitch([0, 1, 2, 3], [tf.cos(angle), tf.sin(angle), -tf.sin(angle), tf.cos(angle)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(rot_mat_inv, shape=[2, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "coord_old_centered",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rot_mat_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dynamic_stitch([0, 1, 2, 3], [tf.cos(angle), tf.sin(angle), -tf.sin(angle), tf.cos(angle)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(rot_mat_inv, shape=[2, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "coord_new_centered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.stack([coord1_vec_centered, coord2_vec_centered]), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_46": {
                "variable": {
                    "value": "coord1_old_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(coord_old_centered[0, :] + image_center[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "coord2_old_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(coord_old_centered[1, :] + image_center[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "coord_old_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(tf.stack([coord_old1_clipped, coord_old2_clipped]), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "coord_new",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.cast(tf.stack([coord1_vec, coord2_vec]), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_70": {
                "variable": {
                    "value": "image_channel_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[pad_before_h:pad_after_h]",
                            "Subscript"
                        ],
                        [
                            "image[:, pad_before_w:pad_after_w]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "image_rotated",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(image_rotated_channel_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_98": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.cast(tf.shape(img)[0], tf.float32), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_99": {
                "variable": {
                    "value": "w_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.cast(tf.shape(img)[1], tf.float32), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([h_new, w_new])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_102": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(label, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), axis=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(label, [1]), lambda : label)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "np.reshape(label, -1)",
                            "Call"
                        ],
                        [
                            "label[indice]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_118": {
                "variable": {
                    "value": "mirror_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "uniform_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], 0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_119": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mirror_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(uniform_random, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.reverse(img, [1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_122": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mirror_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(uniform_random, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.reverse(label, [1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : label",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_141": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(label, [1]), lambda : label)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "np.reshape(label, -1)",
                            "Call"
                        ],
                        [
                            "label[indice]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_143": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_144": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[pad_before_h:pad_after_h]",
                            "Subscript"
                        ],
                        [
                            "image[:, pad_before_w:pad_after_w]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cond_145": {
                "variable": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(image_shape[0], crop_h)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : (crop_h - image_shape[0]) // 2",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_148": {
                "variable": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(image_shape[1], crop_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : (crop_w - image_shape[1]) // 2",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "pad_to_bounding_box_153": {
                "variable": {
                    "value": "combined_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([image, label], 2)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(image_shape[0], crop_h), lambda : (crop_h - image_shape[0]) // 2, lambda : tf.constant(0))",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(image_shape[1], crop_w), lambda : (crop_w - image_shape[1]) // 2, lambda : tf.constant(0))",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "tf.maximum(crop_h, image_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "target_width": {
                    "value": "tf.maximum(crop_w, image_shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_crop_158": {
                "variable": {
                    "value": "combined_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "combined_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.pad_to_bounding_box(combined, offset_height=offset_height, offset_width=offset_width, target_height=tf.maximum(crop_h, image_shape[0]), target_width=tf.maximum(crop_w, image_shape[1]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[crop_h, crop_w, last_image_dim + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_51": {
                "variable": {
                    "value": "coord_old1_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(coord1_old_nn, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "s[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_52": {
                "variable": {
                    "value": "coord_old2_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(coord2_old_nn, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "s[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_or_54": {
                "variable": {
                    "value": "outside_ind1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(coord1_old_nn, s[0] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(coord1_old_nn, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_55": {
                "variable": {
                    "value": "outside_ind2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(coord2_old_nn, s[1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(coord2_old_nn, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_56": {
                "variable": {
                    "value": "outside_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outside_ind1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.greater(coord1_old_nn, s[0] - 1), tf.less(coord1_old_nn, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "outside_ind2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.greater(coord2_old_nn, s[1] - 1), tf.less(coord2_old_nn, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_58": {
                "variable": {
                    "value": "coord_old1_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coord1_old_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(coord_old_centered[0, :] + image_center[0]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(outside_ind)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_59": {
                "variable": {
                    "value": "coord_old2_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coord2_old_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(coord_old_centered[1, :] + image_center[1]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(outside_ind)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_61": {
                "variable": {
                    "value": "coord1_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coord1_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(coord1, [s[1]])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(coord1_vec, tf.logical_not(outside_ind))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(outside_ind)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_62": {
                "variable": {
                    "value": "coord2_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coord2_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(coord2_vec_unordered, [1, 0]), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(coord2_vec, tf.logical_not(outside_ind))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(outside_ind)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_74": {
                "variable": {
                    "value": "image_chan_new_values",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.squeeze(image_channel)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "coord_old_clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(tf.stack([coord_old1_clipped, coord_old2_clipped]), [1, 0]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_21": {
                "x": {
                    "value": "tf.cast(s[1] / 2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "a": {
                    "value": "coord2_vec_unordered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(coord2, [s[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord2_vec_unordered, [s[0], s[1]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_35": {
                "x": {
                    "value": "image_center[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_36": {
                "x": {
                    "value": "image_center[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_38": {
                "values": {
                    "value": "[coord1_vec_centered, coord2_vec_centered]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_46": {
                "x": {
                    "value": "coord_old_centered[0, :] + image_center[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_47": {
                "x": {
                    "value": "coord_old_centered[1, :] + image_center[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "a": {
                    "value": "tf.stack([coord_old1_clipped, coord_old2_clipped])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "tf.stack([coord1_vec, coord2_vec])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_88": {
                "values": {
                    "value": "image_rotated_channel_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_98": {
                "x": {
                    "value": "tf.cast(tf.shape(img)[0], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.5, maxval=2.0, seed=None)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([1], minval=scale_rate[0], maxval=scale_rate[1], seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_99": {
                "x": {
                    "value": "tf.cast(tf.shape(img)[1], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.5, maxval=2.0, seed=None)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([1], minval=scale_rate[0], maxval=scale_rate[1], seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_100": {
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(label, [1]), lambda : label)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "np.reshape(label, -1)",
                            "Call"
                        ],
                        [
                            "label[indice]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_145": {
                "x": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_148": {
                "x": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_157": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[pad_before_h:pad_after_h]",
                            "Subscript"
                        ],
                        [
                            "image[:, pad_before_w:pad_after_w]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_21": {
                "x": {
                    "value": "s[1] / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_41": {
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_41": {
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_51": {
                "x": {
                    "value": "coord1_old_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(coord_old_centered[0, :] + image_center[0]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_52": {
                "x": {
                    "value": "coord2_old_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(coord_old_centered[1, :] + image_center[1]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_54": {
                "x": {
                    "value": "coord1_old_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(coord_old_centered[0, :] + image_center[0]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_54": {
                "x": {
                    "value": "coord1_old_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(coord_old_centered[0, :] + image_center[0]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_55": {
                "x": {
                    "value": "coord2_old_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(coord_old_centered[1, :] + image_center[1]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_55": {
                "x": {
                    "value": "coord2_old_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.round(coord_old_centered[1, :] + image_center[1]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_not_58": {
                "x": {
                    "value": "outside_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(outside_ind1, outside_ind2)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_59": {
                "x": {
                    "value": "outside_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(outside_ind1, outside_ind2)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_61": {
                "x": {
                    "value": "outside_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(outside_ind1, outside_ind2)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_62": {
                "x": {
                    "value": "outside_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(outside_ind1, outside_ind2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_64": {
                "values": {
                    "value": "[coord_old1_clipped, coord_old2_clipped]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_67": {
                "values": {
                    "value": "[coord1_vec, coord2_vec]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "input": {
                    "value": "image_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_channel_list",
                            "Name"
                        ]
                    ]
                }
            },
            "sparse_to_dense_85": {
                "sparse_indices": {
                    "value": "coord_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.cast(tf.stack([coord1_vec, coord2_vec]), tf.int32), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[s[0], s[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "image_chan_new_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(tf.squeeze(image_channel), coord_old_clipped)",
                            "Call"
                        ]
                    ]
                },
                "default_value": {
                    "value": "background_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "255",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "validate_indices": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_98": {
                "x": {
                    "value": "tf.shape(img)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_99": {
                "x": {
                    "value": "tf.shape(img)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_120": {
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(img, [1]), lambda : img)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_123": {
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(label, [1]), lambda : label)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "np.reshape(label, -1)",
                            "Call"
                        ],
                        [
                            "label[indice]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_147": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_150": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_154": {
                "x": {
                    "value": "crop_h",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_155": {
                "x": {
                    "value": "crop_w",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(img, [1]), lambda : img)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_99": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(img, [1]), lambda : img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "database/reader.py": {
        "tensorflow": {
            "convert_to_tensor_144": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.image_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_145": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_147": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[self.images, self.labels]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'train' == self.data_list or 'train' in self.data_list",
                            "BoolOp"
                        ]
                    ]
                },
                "capacity": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_151": {
                "variable": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.queue[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_png_152": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_156": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.queue[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_image_157": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_203": {
                "variable": {
                    "value": "(image_batch, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "batch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "capacity": {
                    "value": "32 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "read_file_209": {
                "variable": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.queue[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_png_210": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_214": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.queue[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_image_215": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_217": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_301": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.image_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_302": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_344": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.image_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_345": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_brightness_162": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_163": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_164": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "split_173": {
                "variable": {
                    "value": "(img_r, img_g, img_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_174": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img_b, img_g, img_r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_221": {
                "variable": {
                    "value": "(img_r, img_g, img_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_222": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img_b, img_g, img_r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_249": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "read_file_250": {
                "variable": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "label_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_image_251": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_253": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_266": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_267": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "label - 1",
                            "BinOp"
                        ],
                        [
                            "rotate(label, angle, 'NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "rotate(label, angle, 'NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_324": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "read_file_325": {
                "variable": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "label_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_image_327": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_329": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_337": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_206": {
                "x": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_brightness_256": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_257": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_258": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "split_263": {
                "variable": {
                    "value": "(img_r, img_g, img_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_264": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img_b, img_g, img_r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_334": {
                "variable": {
                    "value": "(img_r, img_g, img_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ],
                        [
                            "rotate(img, angle, 'BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([img_b, img_g, img_r], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_335": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img_b, img_g, img_r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "demo_infer.py": {
        "tensorflow": {
            "GPUOptions_37": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_38": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=False)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_39": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False, gpu_options=gpu_options, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_43": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_25": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_image_26": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(image_filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_23": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, crop_size, crop_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/bcanet_mg.py": {
        "tensorflow": {
            "cast_386": {
                "variable": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([image_size // 8, image_size // 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.wd_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "utils.float_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.wd_rate2_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "utils.float_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "utils.float_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_136": {
                "variable": {
                    "value": "num_valide_pixel",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_valide_pixel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.cast(num_valide_pixel, tf.float32)",
                            "Call"
                        ],
                        [
                            "num_valide_pixel + tf.shape(label)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truediv_137": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(losses)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "num_valide_pixel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.cast(num_valide_pixel, tf.float32)",
                            "Call"
                        ],
                        [
                            "num_valide_pixel + tf.shape(label)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truediv_138": {
                "variable": {
                    "value": "aux_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(aux_losses)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "num_valide_pixel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.cast(num_valide_pixel, tf.float32)",
                            "Call"
                        ],
                        [
                            "num_valide_pixel + tf.shape(label)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "aux_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_167": {
                "variable": {
                    "value": "one_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "one_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(one_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_168": {
                "variable": {
                    "value": "shape_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(one_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "one_image_3D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "one_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(one_image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape_image[-3], shape_image[-2], shape_image[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "image_crops",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "reassemble_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(H, W, self.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_212": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.fully_connected(x, output_num_classes, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "utils.resize_images(logits, image_shape[1:3])",
                            "Call"
                        ],
                        [
                            "pspnet_with_list(list_input, self.num_classes, training=False, resnet=self.resnet, three_convs_beginning=self.three_convs_beginning, initializer=self.initializer, return_list_activations=False, verbo=False)",
                            "Call"
                        ],
                        [
                            "pspnet_with_list([image_crops], self.num_classes, training=False, resnet=self.resnet, three_convs_beginning=self.three_convs_beginning, initializer=self.initializer, return_list_activations=False, verbo=False)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_259": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "existing_weights + new_normal_weights + new_bias_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "colocate_gradients_with_ops": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_269": {
                "variable": {
                    "value": "apply_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_existing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_existing.apply_gradients(zip(grads_existing, existing_weights))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "train_new_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_new_norm.apply_gradients(zip(grads_new_norm, new_normal_weights))",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_31": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_214": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.multiply(xent, weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_215": {
                "input_tensor": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.multiply(xent, weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_237": {
                "variable": {
                    "value": "opt_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_238": {
                "variable": {
                    "value": "opt_new_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_239": {
                "variable": {
                    "value": "opt_new_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph * 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_368": {
                "x": {
                    "value": "tf.multiply(self.wd_rate_ph, losses_existing_layers)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(self.wd_rate2_ph, losses_new_layers)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_386": {
                "values": {
                    "value": "[image_size // 8, image_size // 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_508": {
                "name_or_scope": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_514": {
                "name_or_scope": {
                    "value": "up_sample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_33": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_109": {
                "variable": {
                    "value": "indice",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.less(label, self.num_classes), tf.greater_equal(label, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(label, indice)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "aux_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "aux_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_120": {
                "variable": {
                    "value": "aux_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "aux_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(aux_logits[i], [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.gather(aux_logit, indice)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.less(label, self.num_classes), tf.greater_equal(label, 0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_124": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits[i], [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.gather(logit, indice)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.less(label, self.num_classes), tf.greater_equal(label, 0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "aux_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MomentumOptimizer_241": {
                "variable": {
                    "value": "opt_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_242": {
                "variable": {
                    "value": "opt_new_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_243": {
                "variable": {
                    "value": "opt_new_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NewCheckpointReader_287": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "self.fine_tune_filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_368": {
                "x": {
                    "value": "self.wd_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "losses_existing_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "losses_existing_layers + (tf.nn.l2_loss(v) - 0.5 * tf.reduce_sum(tf.truediv(cos_square, norm)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_369": {
                "x": {
                    "value": "self.wd_rate2_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "losses_new_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "losses_new_layers + tf.nn.l2_loss(v)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_412": {
                "name_or_scope": {
                    "value": "conv1_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "conv1_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_424": {
                "name_or_scope": {
                    "value": "conv1_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_35": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_106": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "weights_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_114": {
                "variable": {
                    "value": "weights_i",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weights[i], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(weights_i, indice)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "indices": {
                    "value": "indice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.less(label, self.num_classes), tf.greater_equal(label, 0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_193": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.fully_connected(x, output_num_classes, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "utils.resize_images(logits, image_shape[1:3])",
                            "Call"
                        ],
                        [
                            "pspnet_with_list(list_input, self.num_classes, training=False, resnet=self.resnet, three_convs_beginning=self.three_convs_beginning, initializer=self.initializer, return_list_activations=False, verbo=False)",
                            "Call"
                        ],
                        [
                            "pspnet_with_list([image_crops], self.num_classes, training=False, resnet=self.resnet, three_convs_beginning=self.three_convs_beginning, initializer=self.initializer, return_list_activations=False, verbo=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_203": {
                "image": {
                    "value": "probas[i * len(crop_widths) + j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "offset_height": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "target_height": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_245": {
                "variable": {
                    "value": "opt_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_246": {
                "variable": {
                    "value": "opt_new_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_247": {
                "variable": {
                    "value": "opt_new_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NewCheckpointReader_307": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "self.fine_tune_filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_441": {
                "name_or_scope": {
                    "value": "'block%d/unit_%d' % (block_index + 1, unit_index + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_41": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_109": {
                "x": {
                    "value": "tf.less(label, self.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(label, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_110": {
                "params": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels[i], [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.gather(label, indice), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.less(label, self.num_classes), tf.greater_equal(label, 0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_111": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels[i], [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.gather(label, indice), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_125": {
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits[i], [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.gather(logit, indice)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_249": {
                "variable": {
                    "value": "opt_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_250": {
                "variable": {
                    "value": "opt_new_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_251": {
                "variable": {
                    "value": "opt_new_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_253": {
                "variable": {
                    "value": "opt_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_254": {
                "variable": {
                    "value": "opt_new_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_255": {
                "variable": {
                    "value": "opt_new_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate_ph * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_284": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NewCheckpointReader_336": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "self.fine_tune_filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_454": {
                "name_or_scope": {
                    "value": "'block%d/unit_%d' % (block_index + 1, unit_index + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_460": {
                "name_or_scope": {
                    "value": "aux_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_465": {
                "name_or_scope": {
                    "value": "aux_up_sample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_474": {
                "name_or_scope": {
                    "value": "psp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_496": {
                "name_or_scope": {
                    "value": "'block%d/unit_%d' % (block_index + 1, unit_index + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_109": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels[i], [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.gather(label, indice), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_109": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels[i], [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.gather(label, indice), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_loss_282": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_304": {
                "t": {
                    "value": "v - pre_trained_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_324": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(pre_trained_weights, pre_trained_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_326": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(v, pre_trained_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "truediv_327": {
                "variable": {
                    "value": "projection_v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(cos, pre_trained_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(pre_trained_weights, pre_trained_weights), axis=[0, 1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(pre_trained_weights, pre_trained_weights), axis=[0, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_367": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_293": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_354": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(v, pre_trained_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_355": {
                "variable": {
                    "value": "cos_square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(v, pre_trained_weights), axis=[0, 1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(v, pre_trained_weights), axis=[0, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_356": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(pre_trained_weights, pre_trained_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_476": {
                "name_or_scope": {
                    "value": "'pool%d' % pool_rates[pool_index]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_313": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_324": {
                "x": {
                    "value": "pre_trained_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pre_trained_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_326": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pre_trained_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_327": {
                "x": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(v, pre_trained_weights), axis=[0, 1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(v, pre_trained_weights), axis=[0, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pre_trained_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_333": {
                "t": {
                    "value": "perp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v - projection_v",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_loss_342": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_354": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pre_trained_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_356": {
                "x": {
                    "value": "pre_trained_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pre_trained_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ],
                        [
                            "reader.get_tensor(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_357": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_357": {
                "input_tensor": {
                    "value": "tf.truediv(cos_square, norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truediv_357": {
                "x": {
                    "value": "cos_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(cos)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(pre_trained_weights, pre_trained_weights), axis=[0, 1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(pre_trained_weights, pre_trained_weights), axis=[0, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/utils_mg.py": {
        "tensorflow": {
            "stack_450": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[in_shape[0], h, w, out_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_initializer_459": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(weights_shape)",
                            "Call"
                        ],
                        [
                            "get_transpose_weights(weights_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_107": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(2.0 / n)",
                            "Call"
                        ],
                        [
                            "he_init_std",
                            "Name"
                        ]
                    ]
                }
            },
            "get_variable_163": {
                "variable": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "shape_226": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "list_input[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_406": {
                "variable": {
                    "value": "list_output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "list_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_455": {
                "variable": {
                    "value": "init_conv2dt_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(weights_shape)",
                            "Call"
                        ],
                        [
                            "get_transpose_weights(weights_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_457": {
                "name": {
                    "value": "init_conv2dt_weights",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "init_conv2dt_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(weights, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_70": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ksize": {
                    "value": "stride_arr(ksize)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_arr(stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_160": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fused_batch_norm_210": {
                "variable": {
                    "value": "(xn, batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "list_input[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [n_out], initializer=tf.constant_initializer(1.0), trainable=True, dtype=float_type)",
                            "Call"
                        ],
                        [
                            "tf.ones([n_out], name='gamma')",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [n_out], initializer=tf.constant_initializer(), trainable=True, dtype=float_type)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_out], name='beta')",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "bn_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_220": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_221": {
                "variable": {
                    "value": "batch_square_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(list_input[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_225": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_256": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_266": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "bottleneck_v1/conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_297": {
                "name_or_scope": {
                    "value": "bottleneck_v1/conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "bottleneck_v1/conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "bottleneck_v2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_454": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_480": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool_490": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ksize": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_503": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "to_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_35": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_50": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_52": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "list_images[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_69": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_82": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_118": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(stddev=std)",
                            "Call"
                        ],
                        [
                            "'he'",
                            "MethodArgument"
                        ],
                        [
                            "'he'",
                            "MethodArgument"
                        ],
                        [
                            "'he'",
                            "MethodArgument"
                        ],
                        [
                            "'he'",
                            "MethodArgument"
                        ],
                        [
                            "'he'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_182": {
                "control_inputs": {
                    "value": "[update_op1, update_op2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_183": {
                "input": {
                    "value": "xn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "update_bn_ema(xn, batch_mean, batch_var, moving_mean, moving_var, bn_ema)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(list_input[i], moving_mean, moving_var, beta, gamma, bn_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(list_input[i], batch_mean, batch_var, beta, gamma, bn_epsilon)",
                            "Call"
                        ],
                        [
                            "update_bn_ema(xn, batch_mean, batch_var, moving_mean, moving_var, bn_ema)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weights'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'BatchNorm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_219": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_229": {
                "input_tensor": {
                    "value": "square_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_229": {
                "x": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(list_input[i], [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(means, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_230": {
                "x": {
                    "value": "num - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_234": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_238": {
                "variable": {
                    "value": "xn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(list_input[i], [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(means, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(square_means, axis=0) - tf.square(batch_mean)",
                            "BinOp"
                        ],
                        [
                            "batch_var * (tf.cast(num, float_type) / tf.cast(num - 1, float_type))",
                            "BinOp"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [n_out], initializer=tf.constant_initializer(), trainable=True, dtype=float_type)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_out], name='beta')",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [n_out], initializer=tf.constant_initializer(1.0), trainable=True, dtype=float_type)",
                            "Call"
                        ],
                        [
                            "tf.ones([n_out], name='gamma')",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "bn_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_255": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_265": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "bottleneck_v1/shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_318": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_360": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_368": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_385": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_387": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_388": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "list_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('', [out_channels], initializer=tf.constant_initializer(0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('', [out_channels], initializer=tf.constant_initializer(0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_400": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_402": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_403": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "list_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('', [out_channels], initializer=tf.constant_initializer(0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('', [out_channels], initializer=tf.constant_initializer(0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_463": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_465": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(value=weights, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_467": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', initializer=init, shape=weights.shape)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(new_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_479": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_489": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_499": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_36": {
                "x": {
                    "value": "list_inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "new_float_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float_type",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "resize_area_54": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "list_images[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weights'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'BatchNorm'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "pad_137": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_166": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_197": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_200": {
                "variable": {
                    "value": "xn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', [n_out], initializer=tf.constant_initializer(), trainable=False, dtype=float_type)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_variance', [n_out], initializer=tf.constant_initializer(1), trainable=False, dtype=float_type)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [n_out], initializer=tf.constant_initializer(), trainable=True, dtype=float_type)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_out], name='beta')",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [n_out], initializer=tf.constant_initializer(1.0), trainable=True, dtype=float_type)",
                            "Call"
                        ],
                        [
                            "tf.ones([n_out], name='gamma')",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "bn_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_221": {
                "x": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weights'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'BatchNorm'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_373": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_386": {
                "name_or_scope": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "variable_scope_401": {
                "name_or_scope": {
                    "value": "bias_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'biases'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "variable_scope_464": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "resize_bicubic_56": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "list_images[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "resize_bilinear_59": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "list_images[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "atrous_conv2d_127": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('', [kernel_size, kernel_size, in_channels, out_channels], initializer=initializer, dtype=float_type)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "list_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('', [kernel_size, kernel_size, in_channels, out_channels], initializer=initializer, dtype=float_type)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_arr(stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "atrous_conv2d_140": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(list_input[i], [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('', [kernel_size, kernel_size, in_channels, out_channels], initializer=initializer, dtype=float_type)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_143": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(list_input[i], [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('', [kernel_size, kernel_size, in_channels, out_channels], initializer=initializer, dtype=float_type)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_arr(stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_158": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weights'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'BatchNorm'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "constant_initializer_387": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_402": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "tensorflow": {
            "GPUOptions_51": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_52": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=False)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_53": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False, gpu_options=gpu_options, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_62": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Coordinator_56": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_57": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "run_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_32": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, crop_size, crop_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "tensorflow": {
            "GPUOptions_112": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_113": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=False)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_114": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False, gpu_options=gpu_options, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_124": {
                "variable": {
                    "value": "import_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_164": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Coordinator_117": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_118": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_136": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "fine_tune_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "allow_empty": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_58": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_69": {
                "variable": {
                    "value": "list_images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_images",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "gpu_num()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_70": {
                "variable": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "gpu_num()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_86": {
                "variable": {
                    "value": "list_images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_images",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "gpu_num()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_87": {
                "variable": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "gpu_num()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, crop_size, crop_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}