{
    "project/att.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.Wx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.Wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_18": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wx(x) + self.Wh(prev_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.Wg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.Wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wh(torch.tanh(content_v)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(z, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "alpha_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((z, how_much), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_61": {
                "variable": {
                    "value": "self.lstmCell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3 * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_19": {
                "input": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_46": {
                "input": {
                    "value": "mln",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Ws(s) + self.Wg(cur_hidden)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "(z, how_much)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "input": {
                    "value": "content_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wv(V) + self.Wg(cur_hidden).unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "project/data.py": {
        "torch": {
            "Tensor_153": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CXRDataset('Train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_134": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "project/main.py": {
        "torch": {
            "DataLoader_74": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CXRDataset('train', transform=[Resize((args.img_size, args.img_size)), ToTensor()], use_sample=args.use_sample)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'epochs': args.epochs, 'lr': args.lr, 'batch_size': args.batch_size, 'validate': True}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CXRDataset('test', transform=[Resize((args.img_size, args.img_size)), ToTensor()], use_sample=args.use_sample)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_50": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "device_52": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "project/models.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.d121",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(densenet121.features.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_18": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "img_size // 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.affine_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.affine_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedd_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedd_size",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_44": {
                "variable": {
                    "value": "v_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.affine_b(self.dropout(a_g))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.affine_a(self.dropout(V))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_57": {
                "variable": {
                    "value": "self.lstmCell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "img_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.topic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=hidden_dim, out_features=img_feature_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=hidden_dim, out_features=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "wv",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_vectors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embeddings, v_g, topic_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "img_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "project/train.py": {
        "torch": {
            "Adam_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(img_enc.module.affine_a.parameters()) + list(img_enc.module.affine_b.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(img_enc.affine_a.parameters()) + list(img_enc.affine_b.parameters())",
                            "BinOp"
                        ],
                        [
                            "params + list(sentence_dec.parameters()) + list(word_dec.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "train_params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_params",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_49": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, lr=train_params['lr'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[16, 32, 48, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_62": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'log/{}'.format(args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'save/{model}.pth'.format(model=args.model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_11": {
                "obj": {
                    "value": "{'epoch': epoch, 'encoder_state_dict': encoder.state_dict(), 'sentence_decoder_state_dict': sentence_decoder.state_dict(), 'word_decoder_state_dict': word_decoder.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path + args.model_name + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_25": {
                "variable": {
                    "value": "img_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "img_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageEncoder(args.embedd_size, args.hidden_size, args.img_size)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(img_enc, device_ids=args.gpus)",
                            "Call"
                        ],
                        [
                            "get_models(args, word_vectors)",
                            "Call"
                        ],
                        [
                            "get_models(args, word_vectors)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_26": {
                "variable": {
                    "value": "sentence_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "sentence_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SentenceDecoder(args.hidden_size)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(sentence_dec, device_ids=args.gpus)",
                            "Call"
                        ],
                        [
                            "get_models(args, word_vectors)",
                            "Call"
                        ],
                        [
                            "get_models(args, word_vectors)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_27": {
                "variable": {
                    "value": "word_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "word_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WordDecoder(args.vocab_size, args.hidden_size, args.img_feature_size, word_vectors)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(word_dec, device_ids=args.gpus)",
                            "Call"
                        ],
                        [
                            "get_models(args, word_vectors)",
                            "Call"
                        ],
                        [
                            "get_models(args, word_vectors)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'save/{model}.pth'.format(model=args.model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "num_sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(num_sentences).to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "prev_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.vocabulary['<start>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "h_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "curr_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(num_sentences)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "curr_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(num_sentences)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "word_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.vocabulary['<start>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_188": {
                "variable": {
                    "value": "word_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "h_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_120": {
                "variable": {
                    "value": "prev_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_dec(img_features, img_avg_features, topic, word_input, wStates)",
                            "Call"
                        ],
                        [
                            "scores[masky_mask.nonzero()].squeeze(1)",
                            "Call"
                        ],
                        [
                            "word_dec(img_features, img_avg_features, topic, word_input, wStates)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_202": {
                "variable": {
                    "value": "word_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_dec(img_features, img_avg_features, topic, word_input, wStates)",
                            "Call"
                        ],
                        [
                            "scores[masky_mask.nonzero()].squeeze(1)",
                            "Call"
                        ],
                        [
                            "word_dec(img_features, img_avg_features, topic, word_input, wStates)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}