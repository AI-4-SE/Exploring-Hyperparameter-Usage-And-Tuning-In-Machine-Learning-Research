{
    "examples/plot1516647610.py": {
        "tensorflow": {
            "run_99": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                },
                "argv": {
                    "value": "[sys.argv[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lnln_eval.py": {
        "tensorflow": {
            "run_44": {
                "main": {
                    "value": "wrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wrapper",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lnln_hyperopt.py": {
        "tensorflow": {
            "run_53": {
                "main": {
                    "value": "register_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "register_model",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runnet.py": {
        "tensorflow": {
            "placeholder_271": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, data.numcell)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_272": {
                "variable": {
                    "value": "meanpredict_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, data.numcell)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_276": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_277": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_314": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_315": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_50": {
                "filename": {
                    "value": "mansave_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "working_dir + '/manualsave'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MakeDirs_51": {
                "dirname": {
                    "value": "mansave_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "working_dir + '/manualsave'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, data.numpixx, data.numpixy, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "activity_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, data.numcell)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "keep_prob_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "baselineloss_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "data.numcell",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_151": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_154": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_319": {
                "variable": {
                    "value": "weights1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_321": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_330": {
                "variable": {
                    "value": "weights3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_332": {
                "variable": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_335": {
                "variable": {
                    "value": "weights4",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_337": {
                "variable": {
                    "value": "biases4",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_404": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_325": {
                "variable": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_327": {
                "variable": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_329": {
                "name_or_scope": {
                    "value": "dense1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_334": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/buildnet.py": {
        "tensorflow": {
            "GradientDescentOptimizer_601": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_603": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_20": {
                "variable": {
                    "value": "imgflat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_36": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "variable": {
                    "value": "self.dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense_1(flat_img)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.diagweights1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, self.biases1)",
                            "Call"
                        ],
                        [
                            "self.dense_2(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.diagweights2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.diagweights1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense_1(flat_img)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.diagweights1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, self.biases1)",
                            "Call"
                        ],
                        [
                            "self.dense_2(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.diagweights2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.biases1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense_1(flat_img)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.diagweights1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, self.biases1)",
                            "Call"
                        ],
                        [
                            "self.dense_2(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.diagweights2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.diagweights2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_72": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense_1(flat_img)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.diagweights1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, self.biases1)",
                            "Call"
                        ],
                        [
                            "self.dense_2(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.diagweights2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.biases2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_86": {
                "variable": {
                    "value": "imgflat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "images.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "images_flatbatch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[imgshape[0].value * imgshape[1].value, imgshape[2].value, imgshape[3].value, imgshape[4].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_145": {
                "variable": {
                    "value": "densein",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "Convmodel.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "RNNinput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Densemodel.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[imgshape[0].value, imgshape[1].value, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_240": {
                "variable": {
                    "value": "convout_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "current_conv_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled",
                            "variable"
                        ],
                        [
                            "pooled",
                            "variable"
                        ],
                        [
                            "pooled",
                            "variable"
                        ]
                    ]
                }
            },
            "flatten_333": {
                "variable": {
                    "value": "convout_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "current_conv_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled",
                            "variable"
                        ],
                        [
                            "pooled",
                            "variable"
                        ],
                        [
                            "pooled",
                            "variable"
                        ]
                    ]
                }
            },
            "flatten_421": {
                "variable": {
                    "value": "convout_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "current_conv_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled",
                            "variable"
                        ],
                        [
                            "pooled",
                            "variable"
                        ],
                        [
                            "pooled",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_471": {
                "variable": {
                    "value": "input_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[inputshape[0].value, inputshape[1].value, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_504": {
                "variable": {
                    "value": "input_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[imgshape[0].value, imgshape[1].value, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_551": {
                "input_tensor": {
                    "value": "tf.square(linear - y_)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "least_squares",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_568": {
                "input_tensor": {
                    "value": "tf.square(linear - y_)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "least_squares",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_587": {
                "input_tensor": {
                    "value": "lossvector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear - tf.multiply(y_, tf.log(linear + epsilon))",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "log_like",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "weights1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.1 + tf.truncated_normal([self.num_units], stddev=0.02)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "self.biases1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([self.num_units])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_46": {
                "variable": {
                    "value": "self.diagweights1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "weights1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([self.num_units], stddev=0.02))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.1 + tf.truncated_normal([self.num_cells], stddev=0.02)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "self.biases2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "biases2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([self.num_cells])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_52": {
                "variable": {
                    "value": "self.diagweights2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights2', initializer=0.1 + tf.truncated_normal([self.num_cells], stddev=0.02))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_99": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(imgflat, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.1 + tf.truncated_normal([ncell], stddev=0.02)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_115": {
                "variable": {
                    "value": "diagweights",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_120": {
                "variable": {
                    "value": "nonlindum",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(imgflat, weights), biases)",
                            "Call"
                        ],
                        [
                            "tf.reshape(linearFrontFlat, [LSTMoutshape[0].value, LSTMoutshape[1].value, ncell])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(tf.matmul(denseout_drop, weights), biases))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(tf.matmul(denseout, weights), biases))",
                            "Call"
                        ],
                        [
                            "tf.reshape(linearFrontFlat, [LSTMoutshape[0].value, LSTMoutshape[1].value, ncell])",
                            "Call"
                        ],
                        [
                            "linear",
                            "Method Argument"
                        ],
                        [
                            "linear",
                            "Method Argument"
                        ],
                        [
                            "linear",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "sigmatmul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "nonlindum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(linear)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diagweights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_122": {
                "variable": {
                    "value": "nonlinear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigmatmul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(nonlindum, diagweights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "LSTMoutFrontFlat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "LSTMout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RNNmodel.output",
                            "Attribute"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[LSTMoutshape[0].value * LSTMoutshape[1].value, LSTMoutshape[2].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_161": {
                "variable": {
                    "value": "linearFrontFlat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(LSTMoutFrontFlat, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linearFrontFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(LSTMoutFrontFlat, weights), biases)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(LSTMoutFrontFlat, weights), biases)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[LSTMoutshape[0].value, LSTMoutshape[1].value, ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_172": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_176": {
                "variable": {
                    "value": "linearpretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(Densemodel.output, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_261": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_264": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_265": {
                "variable": {
                    "value": "denseout_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "denseout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "previous_layer",
                            "variable"
                        ],
                        [
                            "previous_layer",
                            "variable"
                        ],
                        [
                            "previous_layer",
                            "variable"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_266": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(denseout_drop, weights), biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_354": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_357": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_360": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(denseout, weights), biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_526": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_529": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_532": {
                "variable": {
                    "value": "LSTMoutFrontFlat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "LSTMout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RNNmodel.output",
                            "Attribute"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[LSTMoutshape[0].value * LSTMoutshape[1].value, LSTMoutshape[2].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_533": {
                "variable": {
                    "value": "linearFrontFlat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(LSTMoutFrontFlat, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_534": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linearFrontFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(LSTMoutFrontFlat, weights), biases)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(LSTMoutFrontFlat, weights), biases)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[LSTMoutshape[0].value, LSTMoutshape[1].value, ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_551": {
                "x": {
                    "value": "linear - y_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_568": {
                "x": {
                    "value": "linear - y_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_586": {
                "x": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_",
                            "Method Argument"
                        ],
                        [
                            "y_",
                            "Method Argument"
                        ],
                        [
                            "y_",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(linear + epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "scaled_nonlinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(imgflat, weights), biases)",
                            "Call"
                        ],
                        [
                            "tf.reshape(linearFrontFlat, [LSTMoutshape[0].value, LSTMoutshape[1].value, ncell])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(tf.matmul(denseout_drop, weights), biases))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(tf.matmul(denseout, weights), biases))",
                            "Call"
                        ],
                        [
                            "tf.reshape(linearFrontFlat, [LSTMoutshape[0].value, LSTMoutshape[1].value, ncell])",
                            "Call"
                        ],
                        [
                            "linear",
                            "Method Argument"
                        ],
                        [
                            "linear",
                            "Method Argument"
                        ],
                        [
                            "linear",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "nonlinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "linearpretrain",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_215": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_219": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.0, shape=[num_filter_list[i]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_220": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "previous_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_227": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_229": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, pool_k_list[i], pool_k_list[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_stride_list[i], pool_stride_list[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_249": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_252": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([dense_list[i]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_253": {
                "variable": {
                    "value": "current_dense_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(previous_layer, W), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_308": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_312": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.0, shape=[num_filter_list[i]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_313": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "previous_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_320": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_322": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, pool_k_list[i], pool_k_list[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_stride_list[i], pool_stride_list[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_342": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_345": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([dense_list[i]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_346": {
                "variable": {
                    "value": "current_dense_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(previous_layer, W), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_396": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_399": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[num_filter_list[i]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_400": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "previous_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_407": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_409": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, pool_k_list[i], pool_k_list[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_stride_list[i], pool_stride_list[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_449": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_452": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([dense_list[i]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_453": {
                "variable": {
                    "value": "current_dense_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(previous_layer, weights), biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_483": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "LSTM_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_484": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(LSTM_list[i], forget_bias=1.0, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.BasicLSTMCell(LSTM_list[i], forget_bias=1.0, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "previous_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_516": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "LSTM_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_517": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(LSTM_list[i], forget_bias=1.0, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.BasicLSTMCell(LSTM_list[i], forget_bias=1.0, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "previous_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_522": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_586": {
                "x": {
                    "value": "linear + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "a": {
                    "value": "imgflat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(images)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(images.astype(np.float32))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_161": {
                "a": {
                    "value": "LSTMoutFrontFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(LSTMout, [LSTMoutshape[0].value * LSTMoutshape[1].value, LSTMoutshape[2].value])",
                            "Call"
                        ],
                        [
                            "tf.reshape(LSTMout, [LSTMoutshape[0].value * LSTMoutshape[1].value, LSTMoutshape[2].value])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "a": {
                    "value": "Densemodel.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "'conv%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "'dense%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_266": {
                "x": {
                    "value": "tf.matmul(denseout_drop, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "'conv%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "'dense%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_360": {
                "x": {
                    "value": "tf.matmul(denseout, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_391": {
                "name": {
                    "value": "'conv%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_446": {
                "name_or_scope": {
                    "value": "'dense%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_480": {
                "name_or_scope": {
                    "value": "'LSTM%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_513": {
                "name_or_scope": {
                    "value": "'LSTM%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_533": {
                "a": {
                    "value": "LSTMoutFrontFlat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(LSTMout, [LSTMoutshape[0].value * LSTMoutshape[1].value, LSTMoutshape[2].value])",
                            "Call"
                        ],
                        [
                            "tf.reshape(LSTMout, [LSTMoutshape[0].value * LSTMoutshape[1].value, LSTMoutshape[2].value])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "shape": {
                    "value": "[self.num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "shape": {
                    "value": "[self.num_cells]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_94": {
                "shape": {
                    "value": "[numin, ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(numin))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_157": {
                "shape": {
                    "value": "[numelements, ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(numelements))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_173": {
                "shape": {
                    "value": "[numelements, ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(numelements))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_227": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_filter_list[i]]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_253": {
                "x": {
                    "value": "tf.matmul(previous_layer, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_filter_list[i]]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_262": {
                "shape": {
                    "value": "[dim, ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_266": {
                "a": {
                    "value": "denseout_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(denseout, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_320": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_filter_list[i]]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_346": {
                "x": {
                    "value": "tf.matmul(previous_layer, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_filter_list[i]]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_355": {
                "shape": {
                    "value": "[dim, ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_360": {
                "a": {
                    "value": "denseout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "previous_layer",
                            "variable"
                        ],
                        [
                            "previous_layer",
                            "variable"
                        ],
                        [
                            "previous_layer",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_396": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ],
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ],
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_399": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter_list[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_407": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(previous_layer, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.0, shape=[num_filter_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_filter_list[i]]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_453": {
                "x": {
                    "value": "tf.matmul(previous_layer, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([dense_list[i]]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_527": {
                "shape": {
                    "value": "[numelements, ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_529": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_43": {
                "shape": {
                    "value": "[self.num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_49": {
                "shape": {
                    "value": "[self.num_cells]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_106": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_215": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ],
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ],
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_219": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter_list[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_250": {
                "shape": {
                    "value": "[dim, dense_list[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "shape": {
                    "value": "[dense_list[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_253": {
                "a": {
                    "value": "previous_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_308": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ],
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ],
                        [
                            "[filter_size_list[i], filter_size_list[i], num_channel_in[i], num_filter_list[i]]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_312": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter_list[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_343": {
                "shape": {
                    "value": "[dim, dense_list[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_345": {
                "shape": {
                    "value": "[dense_list[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_346": {
                "a": {
                    "value": "previous_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_450": {
                "shape": {
                    "value": "[dim, dense_list[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_452": {
                "shape": {
                    "value": "[dense_list[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_453": {
                "a": {
                    "value": "previous_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "convout_flat",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "current_conv_layer",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "current_dense_layer",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "input_flat",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(numelements))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([dim, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([dim, dense_list[i]], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numelements, ncell], stddev=0.1 / math.sqrt(float(dim))))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/layers.py": {
        "tensorflow": {
            "placeholder_10": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_25": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(input_var, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.1 + tf.truncated_normal([ncell], stddev=0.02)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([ncell])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_52": {
                "variable": {
                    "value": "diagweights",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_61": {
                "variable": {
                    "value": "nonlindum",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=input_shape)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "sigmatmul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "nonlindum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_var)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diagweights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_63": {
                "variable": {
                    "value": "nonlinear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigmatmul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(nonlindum, diagweights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([ncell]))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(input_var, weights), biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "nonlinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "a": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=input_shape)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', initializer=tf.truncated_normal([numin, ncell], stddev=0.1 / math.sqrt(float(numin))))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', initializer=0.1 + tf.truncated_normal([ncell], stddev=0.02))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_17": {
                "shape": {
                    "value": "[numin, ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1 / math.sqrt(float(numin))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_45": {
                "shape": {
                    "value": "[ncell]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/runnet_fast.py": {
        "tensorflow": {
            "placeholder_293": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, data.numcell)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_294": {
                "variable": {
                    "value": "meanpredict_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, data.numcell)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_298": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_299": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_339": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_340": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_49": {
                "filename": {
                    "value": "mansave_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "working_dir + '/manualsave'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MakeDirs_50": {
                "dirname": {
                    "value": "mansave_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "working_dir + '/manualsave'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, data.numpixx, data.numpixy, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "activity_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, data.numcell)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "keep_prob_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "baselineloss_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "data.numcell",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_108": {
                "variable": {
                    "value": "eval_images",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "data.xeval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_109": {
                "variable": {
                    "value": "eval_activity",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "data.yeval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "data.xtrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "train_activity",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "data.ytrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "estop_images",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "data.xstop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "estop_activity",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "data.ystop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_167": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_170": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_344": {
                "variable": {
                    "value": "weights1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_346": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_355": {
                "variable": {
                    "value": "weights3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_357": {
                "variable": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_360": {
                "variable": {
                    "value": "weights4",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_362": {
                "variable": {
                    "value": "biases4",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_429": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_350": {
                "variable": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_352": {
                "variable": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_354": {
                "name_or_scope": {
                    "value": "dense1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_359": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/.test_run_training.py": {
        "tensorflow": {}
    },
    "tests/lnln_test.py": {
        "tensorflow": {
            "run_41": {
                "main": {
                    "value": "register_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "register_model",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_buildnet.py": {
        "tensorflow": {}
    },
    "tests/test_models.py": {
        "tensorflow": {
            "run_16": {
                "main": {
                    "value": "register_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "register_model",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}