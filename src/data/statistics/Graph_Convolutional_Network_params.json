{
    "get_graph.py": {
        "sklearn": {
            "TfidfVectorizer_22": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_146": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model_train.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_167": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_input, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "idx_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_173": {
                "variable": {
                    "value": "A_hat_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "A_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_pickle('A_hat.pkl')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "A_hat_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "A_hat_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(A_hat, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(A_hat_tf)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_213": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn(X, weights, biases, A_hat_tf, dropout)",
                            "Call"
                        ],
                        [
                            "tf.gather(pred, indices=idx_selected)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_selected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_216": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(pred, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_217": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "equal_220": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_221": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_225": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_226": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_190": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A_hat_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(A_hat, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(A_hat_tf)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n_input, n_input])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(X, w), b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(A_hat_tf, X)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_198": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(X, A_hat_tf, weights['h1'], biases['b1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayer(X, A_hat_tf, weights['h1'], biases['b1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_204": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fully_connected(conv2, n_classes, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_178": {
                "initial_value": {
                    "value": "tf.random_normal([n_input, n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_179": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_184": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_185": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_216": {
                "labels": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn(X, weights, biases, A_hat_tf, dropout)",
                            "Call"
                        ],
                        [
                            "tf.gather(pred, indices=idx_selected)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, n_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_220": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, n_classes])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, axis=1), tf.argmax(y, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_190": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n_input, n_input])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(X, w), b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(A_hat_tf, X)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}