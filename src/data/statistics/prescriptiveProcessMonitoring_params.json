{
    "DatasetManager.py": {
        "sklearn": {
            "StratifiedKFold_160": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "22",
                            "Method Argument"
                        ],
                        [
                            "22",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StratifiedKFold_169": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "22",
                            "Method Argument"
                        ],
                        [
                            "22",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "calibration_wrappers.py": {
        "sklearn": {}
    },
    "get_accuracy_dataset.py": {
        "sklearn": {
            "confusion_matrix_53": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "optimize_2_thresholds_prefix.py": {
        "sklearn": {}
    },
    "optimize_2_thresholds_prefix_set_second_prefix.py": {
        "sklearn": {}
    },
    "optimize_3_thresholds_prefix.py": {
        "sklearn": {}
    },
    "optimize_alarm1_grid_search.py": {
        "sklearn": {}
    },
    "optimize_alarm1_threshold_compensation.py": {
        "sklearn": {}
    },
    "optimize_alarm2_grid_search.py": {
        "sklearn": {}
    },
    "optimize_alarm2_threshold_compensation.py": {
        "sklearn": {}
    },
    "optimize_alarm2_vs_alarm1_hierachical.py": {
        "sklearn": {}
    },
    "optimize_alarm2_vs_alarm1_threshold_compensation.py": {
        "sklearn": {}
    },
    "optimize_multi_alarms_same_time.py": {
        "sklearn": {}
    },
    "optimize_multiple_thresholds_compensation.py": {
        "sklearn": {}
    },
    "optimize_params_lgbm.py": {
        "sklearn": {
            "FeatureUnion_96": {
                "variable": {
                    "value": "feature_combiner",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[(method, EncoderFactory.get_encoder(method, **cls_encoder_args)) for method in ['static', 'agg']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "roc_auc_score_51": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_all[~train_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lgbm.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optimize_params_rf.py": {
        "sklearn": {
            "FeatureUnion_93": {
                "variable": {
                    "value": "feature_combiner",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[(method, EncoderFactory.get_encoder(method, **cls_encoder_args)) for method in ['static', 'agg']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_39": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "max_features": {
                    "value": "float(args['max_features'])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "args['max_depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "random_state": {
                    "value": "22",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "roc_auc_score_47": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_all[~train_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls.predict_proba(X_test)[:, preds_pos_label_idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "optimize_params_xgboost.py": {
        "sklearn": {
            "FeatureUnion_99": {
                "variable": {
                    "value": "feature_combiner",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[(method, EncoderFactory.get_encoder(method, **cls_encoder_args)) for method in ['static', 'agg']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "roc_auc_score_54": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_all[~train_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls.predict_proba(X_test)[:, preds_pos_label_idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "optimize_params_xgboost_alarms2.py": {
        "sklearn": {
            "FeatureUnion_152": {
                "variable": {
                    "value": "feature_combiner",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[(method, EncoderFactory.get_encoder(method, **cls_encoder_args)) for method in ['static', 'agg']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "optimize_perfect_alarm_threshold.py": {
        "sklearn": {}
    },
    "optimize_threshold.py": {
        "sklearn": {}
    },
    "optimize_threshold_compensation.py": {
        "sklearn": {}
    },
    "optimize_threshold_effectiveness.py": {
        "sklearn": {}
    },
    "test_2_threholds_prefix.py": {
        "sklearn": {
            "precision_recall_fscore_support_120": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_122": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_2_thresholds_set_prefixes.py": {
        "sklearn": {
            "precision_recall_fscore_support_131": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_133": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_3_thresholds_prefix.py": {
        "sklearn": {
            "precision_recall_fscore_support_121": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_123": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_alarm1_optimized_threshold.py": {
        "sklearn": {
            "precision_recall_fscore_support_96": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_98": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_alarm2_optimized_threshold_compensation.py": {
        "sklearn": {
            "precision_recall_fscore_support_99": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_101": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_fixed_thresholds.py": {
        "sklearn": {
            "precision_recall_fscore_support_60": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_61": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_fixed_thresholds_with_compensation.py": {
        "sklearn": {
            "precision_recall_fscore_support_69": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_71": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_multi_1_vs_1.py": {
        "sklearn": {
            "precision_recall_fscore_support_133": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_135": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_multi_1_vs_1_expected_utility.py": {
        "sklearn": {
            "precision_recall_fscore_support_148": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_150": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_multi_1_vs_1_hierachical.py": {
        "sklearn": {
            "precision_recall_fscore_support_133": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_135": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_multi_alarms_same_time.py": {
        "sklearn": {
            "precision_recall_fscore_support_137": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_139": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_multi_cost_sensitive_alarm2.py": {
        "sklearn": {
            "FeatureUnion_122": {
                "variable": {
                    "value": "feature_combiner",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[(method, EncoderFactory.get_encoder(method, **cls_encoder_args)) for method in ['static', 'agg']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_200": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "test_multi_optimized_thresholds_compensation.py": {
        "sklearn": {
            "precision_recall_fscore_support_180": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_182": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_optimized_threshold.py": {
        "sklearn": {
            "precision_recall_fscore_support_78": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_79": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_optimized_thresholds_compensation.py": {
        "sklearn": {
            "precision_recall_fscore_support_113": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_114": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_optimized_thresholds_effectiveness.py": {
        "sklearn": {
            "precision_recall_fscore_support_90": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_91": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_second_threshold.py": {
        "sklearn": {
            "precision_recall_fscore_support_135": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_137": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_threshold_nonmyopic_prefixnr.py": {
        "sklearn": {
            "precision_recall_fscore_support_128": {
                "variable": {
                    "value": "(prec, rec, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_130": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_final.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dt_final.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/AggregateTransformer.py": {
        "sklearn": {}
    },
    "transformers/IndexBasedExtractor.py": {
        "sklearn": {}
    },
    "transformers/IndexBasedTransformer.py": {
        "sklearn": {}
    },
    "transformers/LastStateTransformer.py": {
        "sklearn": {}
    },
    "transformers/PreviousStateTransformer.py": {
        "sklearn": {}
    },
    "transformers/StaticTransformer.py": {
        "sklearn": {}
    },
    "write_lgbm_predictions.py": {
        "sklearn": {
            "FeatureUnion_94": {
                "variable": {
                    "value": "feature_combiner",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[(method, EncoderFactory.get_encoder(method, **cls_encoder_args)) for method in ['static', 'agg']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CalibratedClassifierCV_39": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "wrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LGBMCalibrationWrapper(lgbm)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "prefit",
                    "type": "str",
                    "possible_values": []
                },
                "method": {
                    "value": "calibration_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'beta'",
                            "str"
                        ]
                    ]
                }
            },
            "roc_auc_score_162": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tmp.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "tmp.predicted_proba",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "brier_score_loss_124": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_manager.get_label_numeric(dt_train_prefixes)",
                            "Call"
                        ]
                    ]
                },
                "y_prob": {
                    "value": "preds_train_not_cal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm_uncalibrated.predict(X_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "brier_score_loss_125": {
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_manager.get_label_numeric(dt_val_prefixes)",
                            "Call"
                        ]
                    ]
                },
                "y_prob": {
                    "value": "preds_val_not_cal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm_uncalibrated.predict(X_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "brier_score_loss_126": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_manager.get_label_numeric(dt_test_prefixes)",
                            "Call"
                        ]
                    ]
                },
                "y_prob": {
                    "value": "preds_not_cal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm_uncalibrated.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "write_lgbm_predictions_random_split.py": {
        "sklearn": {
            "FeatureUnion_92": {
                "variable": {
                    "value": "feature_combiner",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[(method, EncoderFactory.get_encoder(method, **cls_encoder_args)) for method in ['static', 'agg']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CalibratedClassifierCV_38": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "wrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LGBMCalibrationWrapper(lgbm)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "prefit",
                    "type": "str",
                    "possible_values": []
                },
                "method": {
                    "value": "calibration_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'beta'",
                            "str"
                        ]
                    ]
                }
            },
            "roc_auc_score_161": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tmp.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "tmp.predicted_proba",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "brier_score_loss_124": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_manager.get_label_numeric(dt_train_prefixes)",
                            "Call"
                        ]
                    ]
                },
                "y_prob": {
                    "value": "preds_train_not_cal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm_uncalibrated.predict(X_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "brier_score_loss_126": {
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_manager.get_label_numeric(dt_val_prefixes)",
                            "Call"
                        ]
                    ]
                },
                "y_prob": {
                    "value": "preds_val_not_cal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm_uncalibrated.predict(X_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "brier_score_loss_128": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_manager.get_label_numeric(dt_test_prefixes)",
                            "Call"
                        ]
                    ]
                },
                "y_prob": {
                    "value": "preds_not_cal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm_uncalibrated.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "write_rf_predictions.py": {
        "sklearn": {
            "FeatureUnion_75": {
                "variable": {
                    "value": "feature_combiner",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[(method, EncoderFactory.get_encoder(method, **cls_encoder_args)) for method in ['static', 'agg']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_20": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "max_features": {
                    "value": "float(args['max_features'])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "args['max_depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "random_state": {
                    "value": "22",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "roc_auc_score_136": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tmp.actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "tmp.predicted_proba",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}