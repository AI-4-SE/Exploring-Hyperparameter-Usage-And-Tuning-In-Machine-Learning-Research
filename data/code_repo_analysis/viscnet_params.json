{
    "viscnet/cross_validation.py": {
        "sklearn": {
            "KFold_26": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "num_folds",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_52": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f'files/crossval/viscnet_cv_fold_{i}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(f'files/crossval/viscnet_cv_fold_{i}.pt')",
                            "Call"
                        ],
                        [
                            "ViscNet(hparams)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f'files/crossval/viscnet_cv_fold_{i}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "viscnet/data.py": {
        "sklearn": {
            "train_test_split_65": {
                "variable": {
                    "value": "(train, val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "IDs",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "len(IDs) // 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "72",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_28": {
                "variable": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats.assign(T=viscosity_df['T']).loc[train_idx].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "viscosity_df['log_visc'].loc[train_idx].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats.assign(T=viscosity_df['T']).loc[val_idx].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "viscosity_df['log_visc'].loc[val_idx].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_42": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_43": {
                "variable": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "viscnet/metrics.py": {
        "sklearn": {},
        "torch": {
            "load_51": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dict.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "viscnet/plots.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_371": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['T'].values",
                            "Attribute"
                        ],
                        [
                            "viscosity_df['T'].values",
                            "Attribute"
                        ],
                        [
                            "df['T'].values",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_337": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "min(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "max(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_583": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "min(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "max(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_643": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dict.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "viscnet/models.py": {
        "torch": {
            "DataLoader_445": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_ds",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(model.hparams['batch_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_452": {
                "variable": {
                    "value": "val_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_ds",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats.assign(T=T).values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_array",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_198": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_198": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_207": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss_step'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_207": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, len(self.parameters_range))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_367": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_374": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_405": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_320": {
                "variable": {
                    "value": "parameters[p_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(xf.shape[0]).mul(p_range[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xf[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "p_range[1] - p_range[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.hparams['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams['n_features']",
                            "Subscript"
                        ],
                        [
                            "int(hparams[f'layer_{n}_size'])",
                            "Call"
                        ],
                        [
                            "int(hparams[f\"layer_{hparams['num_layers']}_size\"])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(self.parameters_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams['n_features']",
                            "Subscript"
                        ],
                        [
                            "int(hparams[f'layer_{n}_size'])",
                            "Call"
                        ],
                        [
                            "int(hparams[f\"layer_{hparams['num_layers']}_size\"])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(hparams[f'layer_{n}_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False if hparams[f'layer_{n}_batchnorm'] else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "*l",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Adam_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_321": {
                "*size": {
                    "value": "xf.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_321": {
                "input": {
                    "value": "p_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_348": {
                "variable": {
                    "value": "parameters[p_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(xf.shape[0]).mul(p_range[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xf[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "p_range[1] - p_range[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_356": {
                "variable": {
                    "value": "parameters[p_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(xf.shape[0]).mul(p_range[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xf[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "p_range[1] - p_range[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "num_features": {
                    "value": "int(hparams[f'layer_{n}_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "p": {
                    "value": "hparams[f'layer_{n}_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamW_185": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_340": {
                "input": {
                    "value": "torch.ones(xf.shape[0]).mul(p_range[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xf[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "p_range[1] - p_range[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_349": {
                "*size": {
                    "value": "xf.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_349": {
                "input": {
                    "value": "p_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_341": {
                "*size": {
                    "value": "xf.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_341": {
                "input": {
                    "value": "p_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_357": {
                "*size": {
                    "value": "xf.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_357": {
                "input": {
                    "value": "p_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "viscnet/train.py": {
        "torch": {
            "save_35": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ViscNet(hparams)",
                            "Call"
                        ],
                        [
                            "ViscNet(hparams_huber)",
                            "Call"
                        ],
                        [
                            "ViscNetVFT(hparams)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "files/viscnet.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ViscNet(hparams)",
                            "Call"
                        ],
                        [
                            "ViscNet(hparams_huber)",
                            "Call"
                        ],
                        [
                            "ViscNetVFT(hparams)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "files/viscnet_huber.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ViscNet(hparams)",
                            "Call"
                        ],
                        [
                            "ViscNet(hparams_huber)",
                            "Call"
                        ],
                        [
                            "ViscNetVFT(hparams)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "files/viscnet_vft.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}