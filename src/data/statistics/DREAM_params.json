{
    "graphsage/supervised_train.py": {
        "sklearn": {},
        "tensorflow": {
            "set_random_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_97": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_185": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_191": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_192": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_193": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_77": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphsage/utils.py": {
        "sklearn": {
            "StandardScaler_89": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_117": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_172": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_235": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "controller_device.py": {
        "tensorflow": {
            "matmul_1298": {
                "variable": {
                    "value": "ifog",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([x, prev_h], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('decoder_lstm')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('decoder_lstm')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('decoder_lstm')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('decoder_lstm')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1299": {
                "variable": {
                    "value": "(i, f, o, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "ifog",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.concat([x, prev_h], axis=1), w_lstm)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1300": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "range(self.num_devices)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            [
                                0
                            ],
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1301": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f + forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_1302": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_1303": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_247": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_738": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_748": {
                "variable": {
                    "value": "ctr[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward * ctr['probs']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_795": {
                "variable": {
                    "value": "attn_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(attn_mem, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn_mem, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "self.node_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(attn_mem, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn_mem, [num_actions, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_796": {
                "variable": {
                    "value": "attn_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(attn_mem, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn_mem, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "self.node_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(attn_mem, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn_mem, [num_actions, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[sample_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_797": {
                "variable": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [sample_size, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [num_actions, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [num_actions, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_798": {
                "variable": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [sample_size, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [num_actions, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [num_actions, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[sample_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_799": {
                "variable": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [sample_size, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [num_actions, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [num_actions, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sample_size, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_819": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(self.features, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_821": {
                "variable": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[g_id, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_822": {
                "variable": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.features.shape[1], self.features.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_853": {
                "variable": {
                    "value": "attn_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(attn_mem, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn_mem, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "self.node_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(attn_mem, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn_mem, [num_actions, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_854": {
                "variable": {
                    "value": "attn_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(attn_mem, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn_mem, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "self.node_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(attn_mem, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn_mem, [num_actions, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_actions, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_855": {
                "variable": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [sample_size, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [num_actions, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [num_actions, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_856": {
                "variable": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [sample_size, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [num_actions, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [num_actions, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_actions, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_857": {
                "variable": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [sample_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [sample_size, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "self.graph_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(last_h, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(last_h, [num_actions, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_h, [num_actions, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_actions, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_870": {
                "variable": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[g_id, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_871": {
                "variable": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.features.shape[1], self.features.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_890": {
                "variable": {
                    "value": "node_sources",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ph['batch_sources']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_sources']",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, node_sources_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_891": {
                "variable": {
                    "value": "node_sources",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "node_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(sources, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_sources, [node_sources_num])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[node_sources_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_899": {
                "variable": {
                    "value": "source_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: actions.read(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "node_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(sources, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_sources, [node_sources_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_900": {
                "variable": {
                    "value": "source_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: actions.read(x), node_sources)",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_actions, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_actions, [node_sources_num * num_children])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_901": {
                "variable": {
                    "value": "source_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: actions.read(x), node_sources)",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_actions, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_actions, [node_sources_num * num_children])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[node_sources_num * num_children]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_902": {
                "variable": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.device_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "source_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: actions.read(x), node_sources)",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_actions, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_actions, [node_sources_num * num_children])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_904": {
                "variable": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_actions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(source_devices, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_devices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(node_sources_num * num_children, self.num_devices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_907": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_actions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(source_devices, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_devices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "device_aggregator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_aggregator')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_aggregator')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_908": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, node_sources_num, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_914": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_922": {
                "variable": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_actions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(source_devices, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_devices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children * node_sources_num, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_923": {
                "variable": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.device_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_actions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(source_devices, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_devices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_925": {
                "variable": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_actions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(source_devices, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_devices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(node_sources_num * num_children, self.num_devices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_931": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_actions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(source_devices, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.device_encoding, source_devices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices, (node_sources_num * num_children, self.num_devices))",
                            "Call"
                        ],
                        [
                            "source_weights * source_devices",
                            "BinOp"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_devices']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "device_aggregator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_aggregator')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_aggregator')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_932": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, node_sources_num, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_938": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_942": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(target_op, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : last_h",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : prev_h",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "slice_959": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.node_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[target_op, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_960": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.node_embeddings, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.node_embeddings, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_961": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.node_embeddings, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.node_embeddings, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_962": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.node_embeddings, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.node_embeddings, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_children, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_963": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.node_embeddings, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.node_embeddings, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_975": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o * tf.tanh(next_c)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "attn_w_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attn_w_2')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('attn_w_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_976": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, 1, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_977": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "query + attn_mem",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_978": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children * num_ops, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_979": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attn_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attn_v')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('attn_v')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_980": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, num_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_981": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_982": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, num_ops, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_983": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_mem * query",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_984": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[next_h, query]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_985": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "device_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_1005": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1006": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_1032": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.num_ops",
                            "Attribute"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "infer_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1089": {
                "variable": {
                    "value": "last_c",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_1096": {
                "variable": {
                    "value": "loop_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.constant(0, dtype=tf.int32), last_c, last_h, actions, tf.zeros([num_children], dtype=tf.float32)]",
                            "List"
                        ],
                        [
                            "[tf.constant(0, dtype=tf.int32), last_c, last_h, actions, tf.zeros([num_children], dtype=tf.float32)]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_1101": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack([s.action for s in train_samples])",
                            "Call"
                        ],
                        [
                            "self.placeholders['actions']",
                            "Subscript"
                        ],
                        [
                            "tensor_array_ops.TensorArray(tf.int32, size=num_ops, infer_shape=False, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-2].stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(actions, [1, 0])",
                            "Call"
                        ],
                        [
                            "actions.write(i, next_y)",
                            "Call"
                        ],
                        [
                            "tensor_array_ops.TensorArray(tf.int32, size=num_ops, infer_shape=False, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-2].stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(actions, [1, 0])",
                            "Call"
                        ],
                        [
                            "actions.write(i, next_y)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multinomial_1106": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "random_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.hparams.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_1107": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1108": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1121": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[target_op, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1122": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.hparams.feat_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1123": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1124": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_children, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1125": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, self.hparams.feat_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1130": {
                "variable": {
                    "value": "feature_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('node_embedding')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('node_embedding')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1142": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o * tf.tanh(next_c)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "device_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_1151": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1152": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_1168": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.num_ops",
                            "Attribute"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "infer_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1208": {
                "variable": {
                    "value": "last_c",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1211": {
                "variable": {
                    "value": "last_h",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_1218": {
                "variable": {
                    "value": "loop_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.constant(0, dtype=tf.int32), last_c, last_h, actions, tf.zeros([num_children], dtype=tf.float32)]",
                            "List"
                        ],
                        [
                            "[tf.constant(0, dtype=tf.int32), last_c, last_h, actions, tf.zeros([num_children], dtype=tf.float32)]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_1223": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack([s.action for s in train_samples])",
                            "Call"
                        ],
                        [
                            "self.placeholders['actions']",
                            "Subscript"
                        ],
                        [
                            "tensor_array_ops.TensorArray(tf.int32, size=num_ops, infer_shape=False, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-2].stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(actions, [1, 0])",
                            "Call"
                        ],
                        [
                            "actions.write(i, next_y)",
                            "Call"
                        ],
                        [
                            "tensor_array_ops.TensorArray(tf.int32, size=num_ops, infer_shape=False, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "loop_outputs[-2].stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(actions, [1, 0])",
                            "Call"
                        ],
                        [
                            "actions.write(i, next_y)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1266": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(global_step, start_decay_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_norm_1277": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[g for (g, v) in grads_and_vars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "maximum_1280": {
                "variable": {
                    "value": "clipped_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_norm / grad_bound",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_244": {
                "variable": {
                    "value": "self.device_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "device_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_devices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_250": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_253": {
                "variable": {
                    "value": "init_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_254": {
                "variable": {
                    "value": "init_l",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_255": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_888": {
                "variable": {
                    "value": "device_aggregator",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_aggregator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_893": {
                "variable": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.slice(source_weights, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, node_sources_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_894": {
                "variable": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.slice(source_weights, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[node_sources_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_895": {
                "variable": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.slice(source_weights, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_896": {
                "variable": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.slice(source_weights, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_children, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_897": {
                "variable": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.slice(source_weights, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children * node_sources_num, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_910": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_912": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_920": {
                "variable": {
                    "value": "device_aggregator",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_aggregator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_927": {
                "variable": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.slice(source_weights, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_928": {
                "variable": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.slice(source_weights, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_children, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_929": {
                "variable": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.slice(source_weights, [i, 0], [1, node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [node_sources_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(source_weights, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(source_weights, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_weights, [num_children * node_sources_num, 1])",
                            "Call"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['source_weights']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_source_weights']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children * node_sources_num, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_934": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_936": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(source_devices, device_aggregator)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, node_sources_num, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(source_devices_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_devices_embeddings, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(node_sources_num, 0), lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32), lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_950": {
                "variable": {
                    "value": "w_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_lstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_951": {
                "variable": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_forget_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_952": {
                "variable": {
                    "value": "device_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_953": {
                "variable": {
                    "value": "device_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_955": {
                "variable": {
                    "value": "device_go_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_go_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_956": {
                "variable": {
                    "value": "attn_w_2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attn_w_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_957": {
                "variable": {
                    "value": "attn_v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attn_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_971": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(node_sources_num, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_972": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[signal, source_devices_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_999": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.hparams.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_1023": {
                "variable": {
                    "value": "w_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_lstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1024": {
                "variable": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_forget_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1025": {
                "variable": {
                    "value": "device_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1026": {
                "variable": {
                    "value": "device_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1028": {
                "variable": {
                    "value": "device_go_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_go_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1029": {
                "variable": {
                    "value": "attn_w_2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attn_w_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1030": {
                "variable": {
                    "value": "attn_v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attn_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_1042": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.node_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1043": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.node_embeddings, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.node_embeddings, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1044": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.node_embeddings, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.node_embeddings, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1045": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.node_embeddings, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.node_embeddings, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_children, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1046": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.node_embeddings, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.node_embeddings, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attn, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(attn, [num_children, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn, [num_children, self.hparams.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1054": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o * tf.tanh(next_c)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "attn_w_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attn_w_2')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('attn_w_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1055": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, 1, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_1057": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "query + attn_mem",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1058": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children * num_ops, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1061": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attn_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attn_v')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('attn_v')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1062": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, num_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1063": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1064": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, num_ops, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_1065": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_mem * query",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1066": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[next_h, query]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1067": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, attn_w_2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, 1, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(query + attn_mem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children * num_ops, self.hparams.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, attn_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(query)",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, [num_children, num_ops, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_mem * query, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([next_h, query], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "device_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_1081": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_1083": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1084": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1115": {
                "variable": {
                    "value": "w_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_lstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1116": {
                "variable": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_forget_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1117": {
                "variable": {
                    "value": "device_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1118": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "node_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1119": {
                "variable": {
                    "value": "w_utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_utilization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_1128": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.hparams.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1132": {
                "variable": {
                    "value": "utilization_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "device_utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calculate_utilization(action, batch_loads)",
                            "Call"
                        ],
                        [
                            "np.zeros((num_children, self.num_devices), dtype=float)",
                            "Call"
                        ],
                        [
                            "np.zeros((num_children, self.num_devices), dtype=float)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(device_utilization)",
                            "Call"
                        ],
                        [
                            "self.placeholders['device_utilizations_forward']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['device_utilizations_forward']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "w_utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1133": {
                "variable": {
                    "value": "feature_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_embedding, utilization_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_1138": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(node_sources_num, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.aggregate_source_devices_forward(num_children, source_devices, source_weights, node_sources_num)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_1139": {
                "variable": {
                    "value": "feature_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_embedding, source_devices_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_1145": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.hparams.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_1162": {
                "variable": {
                    "value": "w_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_lstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1163": {
                "variable": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_forget_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1164": {
                "variable": {
                    "value": "device_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1165": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "node_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1166": {
                "variable": {
                    "value": "w_utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_utilization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_1178": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1179": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.hparams.feat_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1180": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1181": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_children, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1182": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, self.hparams.feat_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1186": {
                "variable": {
                    "value": "feature_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('node_embedding')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('node_embedding')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1198": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o * tf.tanh(next_c)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "device_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_softmax')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_1200": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_1202": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1203": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_1273": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(global_step, start_decay_step), f1, f2, name='learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1298": {
                "values": {
                    "value": "[x, prev_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_1305": {
                "x": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i * g + f * prev_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_635": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_636": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "num_samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_637": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_638": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "random_devices_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_639": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_640": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_642": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "num_actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_643": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_644": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_645": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "graph_idx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_646": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_sources",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_647": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_num_sources",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_648": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_source_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_649": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "device_utilization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_650": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "device_utilization_forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_651": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_652": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "prev_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_653": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "prev_c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_654": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "prev_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_655": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "source_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_656": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "source_devices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_657": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "node_sources_num",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_750": {
                "name_or_scope": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_819": {
                "value": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_887": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_919": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_942": {
                "x": {
                    "value": "target_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.placeholders['target_op']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['target_op']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_949": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_991": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits, device_utilizations]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_992": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_994": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_996": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_1001": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1022": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_1039": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "range(self.num_devices)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            [
                                0
                            ],
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.num_ops",
                            "Attribute"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_1050": {
                "variable": {
                    "value": "node_sources_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "num_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ph['batch_num_sources']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_num_sources']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "range(self.num_devices)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            [
                                0
                            ],
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_1051": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(node_sources_num, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_1052": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[signal, source_devices_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_1069": {
                "variable": {
                    "value": "utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "device_utilizations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.device_utilizations",
                            "Attribute"
                        ],
                        [
                            "self.placeholders['device_utilizations']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['device_utilizations']",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1070": {
                "variable": {
                    "value": "utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(current_utilization)",
                            "Call"
                        ],
                        [
                            "tf.slice(device_utilizations, [i, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(utilization, [num_children, self.num_devices])",
                            "Call"
                        ],
                        [
                            "tf.slice(device_utilization, [i, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(utilization, [num_children, self.num_devices])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, self.num_devices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_1086": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1093": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1094": {
                "shape": {
                    "value": "[num_children]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_1114": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_1147": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1161": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_1175": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "range(self.num_devices)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            [
                                0
                            ],
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.num_ops",
                            "Attribute"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dropout_1185": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "tf.concat([signal, source_devices_embeddings], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [target_op, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.slice(input_features, [i, 0], [1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(signal, [num_children, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [num_children, self.hparams.feat_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(signal, self.hparams.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.hparams.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_1189": {
                "variable": {
                    "value": "utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "device_utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calculate_utilization(action, batch_loads)",
                            "Call"
                        ],
                        [
                            "np.zeros((num_children, self.num_devices), dtype=float)",
                            "Call"
                        ],
                        [
                            "np.zeros((num_children, self.num_devices), dtype=float)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(device_utilization)",
                            "Call"
                        ],
                        [
                            "self.placeholders['device_utilizations_forward']",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['device_utilizations_forward']",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1190": {
                "variable": {
                    "value": "utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(current_utilization)",
                            "Call"
                        ],
                        [
                            "tf.slice(device_utilizations, [i, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(utilization, [num_children, self.num_devices])",
                            "Call"
                        ],
                        [
                            "tf.slice(device_utilization, [i, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(utilization, [num_children, self.num_devices])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_children, self.num_devices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1191": {
                "variable": {
                    "value": "utilization_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(current_utilization)",
                            "Call"
                        ],
                        [
                            "tf.slice(device_utilizations, [i, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(utilization, [num_children, self.num_devices])",
                            "Call"
                        ],
                        [
                            "tf.slice(device_utilization, [i, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(utilization, [num_children, self.num_devices])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1192": {
                "variable": {
                    "value": "feature_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_embedding, utilization_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1194": {
                "variable": {
                    "value": "node_sources_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "num_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ph['batch_num_sources']",
                            "Subscript"
                        ],
                        [
                            "ph['batch_num_sources']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "range(self.num_devices)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(sample_size)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_children)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(node_sources_num)",
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ],
                        [
                            [
                                0
                            ],
                            "Call"
                        ],
                        [
                            "range(num_ops)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_1195": {
                "variable": {
                    "value": "source_devices_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(node_sources_num, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([num_children, self.hparams.hidden_size], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.aggregate_source_devices(i, actions, num_children, sources, node_sources_num, source_weights)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_1196": {
                "variable": {
                    "value": "feature_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_embedding, source_devices_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_1205": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(random_logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [1])",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits, 1, seed=self.hparams.seed)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.slice(y, [0, i], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_y, [num_children])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1215": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1216": {
                "shape": {
                    "value": "[num_children]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1261": {
                "value": {
                    "value": "lr_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exponential_decay_1264": {
                "learning_rate": {
                    "value": "lr_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "lr_gstep",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "lr_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "less_1267": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "start_decay_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_1275": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(global_step, start_decay_step), f1, f2, name='learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1290": {
                "variable": {
                    "value": "all_grad_norms[v.name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(clipped * clipped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(clipped * clipped)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_236": {
                "name": {
                    "value": "decoder_lstm",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[w_lstm_dimension, 4 * self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_237": {
                "name": {
                    "value": "device_aggregator",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_devices, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_238": {
                "name": {
                    "value": "decoder_forget_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.hparams.forget_bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_755": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_971": {
                "x": {
                    "value": "node_sources_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_num_sources[op]",
                            "Subscript"
                        ],
                        [
                            "batch_num_sources[op]",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['node_sources_num']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(num_sources, i)",
                            "Call"
                        ],
                        [
                            "self.placeholders['node_sources_num']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(num_sources, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_990": {
                "variable": {
                    "value": "w_utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_utilization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1072": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits, utilization]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1075": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_utilization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('device_utilization')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1077": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1079": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * device_utilizations",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, device_utilizations], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.concat([logits, utilization], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits * utilization",
                            "BinOp"
                        ],
                        [
                            "tf.log(logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(logits, w_utilization)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ],
                        [
                            "tf.matmul(next_h, device_softmax)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_1138": {
                "x": {
                    "value": "node_sources_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_num_sources[op]",
                            "Subscript"
                        ],
                        [
                            "batch_num_sources[op]",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['node_sources_num']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(num_sources, i)",
                            "Call"
                        ],
                        [
                            "self.placeholders['node_sources_num']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(num_sources, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1285": {
                "variable": {
                    "value": "norm_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "clipped * clipped",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "IndexedSlices_1286": {
                "variable": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.values / clipped_rate",
                            "BinOp"
                        ],
                        [
                            "tf.IndexedSlices(clipped, g.indices)",
                            "Call"
                        ],
                        [
                            "g / clipped_rate",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "g.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1289": {
                "variable": {
                    "value": "norm_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "clipped * clipped",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_214": {
                "name": {
                    "value": "device_softmax",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.hparams.hidden_size, self.num_devices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_215": {
                "name": {
                    "value": "device_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_devices, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_216": {
                "name": {
                    "value": "device_go_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_217": {
                "name": {
                    "value": "attn_w_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hparams.hidden_size, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_218": {
                "name": {
                    "value": "attn_v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hparams.hidden_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_240": {
                "name": {
                    "value": "device_utilization",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.num_devices, self.num_devices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_971": {
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_989": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1051": {
                "x": {
                    "value": "node_sources_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_num_sources[op]",
                            "Subscript"
                        ],
                        [
                            "batch_num_sources[op]",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['node_sources_num']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(num_sources, i)",
                            "Call"
                        ],
                        [
                            "self.placeholders['node_sources_num']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(num_sources, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_1074": {
                "variable": {
                    "value": "w_utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "device_utilization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_1138": {
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1195": {
                "x": {
                    "value": "node_sources_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_num_sources[op]",
                            "Subscript"
                        ],
                        [
                            "batch_num_sources[op]",
                            "Subscript"
                        ],
                        [
                            "self.placeholders['node_sources_num']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(num_sources, i)",
                            "Call"
                        ],
                        [
                            "self.placeholders['node_sources_num']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(num_sources, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_232": {
                "name": {
                    "value": "device_softmax",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hparams.hidden_size, self.num_devices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_233": {
                "name": {
                    "value": "node_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hparams.feat_size, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_238": {
                "value": {
                    "value": "self.hparams.forget_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1051": {
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_1073": {
                "name_or_scope": {
                    "value": "self.hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1195": {
                "shape": {
                    "value": "[num_children, self.hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphsage/aggregators.py": {
        "tensorflow": {
            "dropout_46": {
                "variable": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "neigh_means",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(neigh_vecs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_104": {
                "variable": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_105": {
                "variable": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat([neigh_vecs, tf.expand_dims(self_vecs, axis=1)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.concat([neigh_vecs, tf.expand_dims(self_vecs, axis=1)], axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_173": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_vecs, (num_nodes, self.input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_182": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_245": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_vecs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "node_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_nodes, self.input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_254": {
                "variable": {
                    "value": "graph_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_vecs, (num_nodes, self.input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "graph_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "graph_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(h_reshaped, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(graph_h, (1, self.hidden_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_258": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "graph_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(h_reshaped, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(graph_h, (1, self.hidden_dim))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_319": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_vecs, (num_nodes, self.input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_328": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_330": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_331": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_407": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_411": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_415": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_vecs, (num_nodes, self.input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_416": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_418": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_419": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_472": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_477": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_480": {
                "variable": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(tf.abs(neigh_vecs), axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_481": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_max(tf.abs(neigh_vecs), axis=2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_482": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_483": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_501": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_502": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rnn_outputs, [-1, out_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size) * max_len + (length - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_504": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "Name"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_505": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_n_507": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_56": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_188": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_334": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_336": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_422": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_424": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_510": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_512": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_106": {
                "values": {
                    "value": "[neigh_vecs, tf.expand_dims(self_vecs, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_457": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_480": {
                "input_tensor": {
                    "value": "tf.abs(neigh_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_482": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_485": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_487": {
                "variable": {
                    "value": "(rnn_outputs, rnn_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cell.zero_state(batch_size, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_497": {
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_498": {
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_480": {
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_493": {
                "variable": {
                    "value": "(rnn_outputs, rnn_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cell.zero_state(batch_size, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphsage/inits.py": {
        "tensorflow": {
            "zeros_24": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_19": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_25": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_30": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "graphsage/layers.py": {
        "tensorflow": {
            "dropout_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "self.vars[weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_dim, output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(FLAGS.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_70": {
                "name": {
                    "value": "self.name + '/vars/' + var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_62": {
                "name": {
                    "value": "self.name + '/inputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_65": {
                "name": {
                    "value": "self.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._call(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graphsage/metrics.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_9": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_10": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_11": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_18": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_35": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(preds, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(preds, 1), tf.argmax(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_12": {
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_14": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_20": {
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_29": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_31": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_38": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "accuracy_all * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_12": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_12": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_20": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_35": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphsage/models.py": {
        "tensorflow": {
            "get_collection_55": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_62": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_69": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_120": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_177": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(features, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_187": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(self.placeholders['batch2'], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fixed_unigram_candidate_sampler_275": {
                "variable": {
                    "value": "(self.neg_samples, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "true_classes": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "FLAGS.neg_sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unique": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "range_max": {
                    "value": "len(self.degrees)",
                    "type": "Call",
                    "possible_values": []
                },
                "distortion": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "unigrams": {
                    "value": "self.degrees.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_307": {
                "variable": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_308": {
                "variable": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_309": {
                "variable": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "variable": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, FLAGS.neg_sample_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_338": {
                "variable": {
                    "value": "_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_339": {
                "variable": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.neg_aff, _aff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_341": {
                "variable": {
                    "value": "(_, indices_of_ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_342": {
                "variable": {
                    "value": "(_, self.ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-indices_of_ranks",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_343": {
                "variable": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.div(1.0, tf.cast(self.ranks[:, -1] + 1, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_370": {
                "variable": {
                    "value": "self.target_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([dict_size, nodevec_dim], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embeds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_373": {
                "variable": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([dict_size, nodevec_dim], stddev=1.0 / math.sqrt(nodevec_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "context_embeds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_377": {
                "variable": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([dict_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "context_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_381": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_386": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(self.placeholders['batch2'], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fixed_unigram_candidate_sampler_389": {
                "variable": {
                    "value": "(self.neg_samples, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "true_classes": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "FLAGS.neg_sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unique": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "range_max": {
                    "value": "len(self.degrees)",
                    "type": "Call",
                    "possible_values": []
                },
                "distortion": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "unigrams": {
                    "value": "self.degrees.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_398": {
                "variable": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.target_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_399": {
                "variable": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_400": {
                "variable": {
                    "value": "self.outputs2_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_401": {
                "variable": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_402": {
                "variable": {
                    "value": "self.neg_outputs_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_420": {
                "variable": {
                    "value": "true_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_422": {
                "variable": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.outputs1, tf.transpose(self.neg_outputs)) + self.neg_outputs_bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_433": {
                "variable": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, FLAGS.neg_sample_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_434": {
                "variable": {
                    "value": "_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_435": {
                "variable": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.neg_aff, _aff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_437": {
                "variable": {
                    "value": "(_, indices_of_ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_438": {
                "variable": {
                    "value": "(_, self.ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-indices_of_ranks",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_439": {
                "variable": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.div(1.0, tf.cast(self.ranks[:, -1] + 1, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_330": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_344": {
                "name": {
                    "value": "mrr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_426": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_440": {
                "name": {
                    "value": "mrr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_177": {
                "value": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_236": {
                "params": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "node_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_273": {
                "x": {
                    "value": "self.placeholders['batch2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_317": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_340": {
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_343": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.ranks[:, -1] + 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_374": {
                "shape": {
                    "value": "[dict_size, nodevec_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(nodevec_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_378": {
                "shape": {
                    "value": "[dict_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_387": {
                "x": {
                    "value": "self.placeholders['batch2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_418": {
                "input_tensor": {
                    "value": "tf.multiply(self.outputs1, self.outputs2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_419": {
                "a": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.neg_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_424": {
                "input_tensor": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(neg_aff), logits=neg_aff)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_425": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_436": {
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_439": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.ranks[:, -1] + 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "tensor": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler((self.g_id, samples[k], layer_infos[t].num_samples))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[support_size * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_343": {
                "x": {
                    "value": "self.ranks[:, -1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_418": {
                "x": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_419": {
                "a": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_421": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_423": {
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.outputs1, tf.transpose(self.neg_outputs)) + self.neg_outputs_bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_439": {
                "x": {
                    "value": "self.ranks[:, -1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_319": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_327": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_266": {
                "tensor": {
                    "value": "hidden[hop + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "neigh_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size * support_sizes[hop], num_samples[len(num_samples) - hop - 1], dim_mult * dims[layer]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "graphsage/neigh_samplers.py": {
        "tensorflow": {
            "slice_31": {
                "variable": {
                    "value": "cur_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.adj_ins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[g_id, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "cur_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cur_adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.adj_ins, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur_adj_info, [num_nodes, degrees])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.adj_outs, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur_adj_info, [num_nodes, degrees])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_nodes, degrees]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_33": {
                "variable": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.adj_ins, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur_adj_info, [num_nodes, degrees])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.adj_outs, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur_adj_info, [num_nodes, degrees])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_34": {
                "a": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(cur_adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(cur_adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_35": {
                "variable": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(cur_adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(cur_adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_38": {
                "variable": {
                    "value": "cur_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.adj_outs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[g_id, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "cur_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cur_adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.adj_ins, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur_adj_info, [num_nodes, degrees])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.adj_outs, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur_adj_info, [num_nodes, degrees])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_nodes, degrees]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_40": {
                "variable": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.adj_ins, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur_adj_info, [num_nodes, degrees])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.adj_outs, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur_adj_info, [num_nodes, degrees])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_41": {
                "a": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(cur_adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(cur_adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_42": {
                "variable": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(cur_adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(cur_adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "graphsage/prediction.py": {
        "tensorflow": {
            "matmul_91": {
                "variable": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, self.vars['weights'])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(neg_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_105": {
                "variable": {
                    "value": "true_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_107": {
                "variable": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_115": {
                "variable": {
                    "value": "neg_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.exp(neg_aff), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "aff - neg_cost",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.subtract(neg_aff, tf.expand_dims(aff, 1) - self.margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "diff",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.subtract(neg_aff, tf.expand_dims(aff, 1) - self.margin), name='diff')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_124": {
                "variable": {
                    "value": "self.neg_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.vars['weights'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs1 * prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs1 * inputs2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, self.vars['weights'])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "self.vars[weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_dim1, input_dim2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "a": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(neg_aff), logits=neg_aff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.exp(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_122": {
                "x": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(aff, 1) - self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "a": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_108": {
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_115": {
                "x": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_122": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphsage/supervised_models.py": {
        "tensorflow": {
            "Variable_47": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(features, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_95": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[g_id, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.features.shape[1], self.features.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_101": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate(samples1, [features], num_samples, support_sizes1, self.placeholders['batch_size'], concat=self.concat, model_size=self.model_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(outputs1, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_105": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[g_id, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.features.shape[1], self.features.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_115": {
                "variable": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate(samples2, [features], num_samples, support_sizes2, self.placeholders['batch_size'], concat=self.concat, model_size=self.model_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(outputs2, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_117": {
                "variable": {
                    "value": "self.node_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_47": {
                "value": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.slice(self.features, [g_id, 0, 0], [1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, [self.features.shape[1], self.features.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_168": {
                "params": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "node_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "tensor": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler((g_id, samples[k], self.layer_infos[t].num_samples, ins))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[support_size * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "tensor": {
                    "value": "hidden[hop + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "neigh_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size * support_sizes[hop], num_samples[len(num_samples) - hop - 1], dim_mult * self.dims[layer]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}