{
    "apwsj/apwsj_bilstm_mlp_baseline_ten_fold.py": {
        "sklearn": {
            "StratifiedKFold_63": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "9274",
                    "type": "int",
                    "possible_values": []
                }
            },
            "accuracy_score_120": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_121": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "accuracy_score_110": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(gold[test], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict([target_vecs[test], source_vecs[test]], verbose=1, batch_size=BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_111": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(gold[test], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict([target_vecs[test], source_vecs[test]], verbose=1, batch_size=BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_123": {
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "confusion_matrix_113": {
                "y_true": {
                    "value": "gold_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(gold[test], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict([target_vecs[test], source_vecs[test]], verbose=1, batch_size=BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_7": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_9": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apwsj/collect_apwsj_docs.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "apwsj/make_prc_curves.py": {
        "sklearn": {
            "StratifiedKFold_35": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "9274",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_recall_curve_54": {
                "variable": {
                    "value": "(pr1, re1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "[i[0] for cv in prb1 for i in cv]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_55": {
                "variable": {
                    "value": "(pr2, re2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "[i[0] for cv in prb2 for i in cv]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_56": {
                "variable": {
                    "value": "(pr3, re3, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "[i[0] for cv in prb3 for i in cv]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_57": {
                "variable": {
                    "value": "(pr4, re4, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "g4",
                    "type": "variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "[i[0] for cv in prb4 for i in cv]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "dlnd/analyze_cnn_output.py": {
        "sklearn": {
            "confusion_matrix_14": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[1]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "precision_recall_curve_20": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "invert_gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 - i for i in gold]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "class0_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j[0] for i in preds for j in i[0]]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "dlnd/dlnd_baselines.py": {
        "sklearn": {
            "TfidfVectorizer_20": {
                "variable": {
                    "value": "tfidf_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stopwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(string.punctuation) + list(set(stopwords.words('english')))",
                            "BinOp"
                        ]
                    ]
                },
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "smooth_idf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_21": {
                "variable": {
                    "value": "tfidf_vec1",
                    "type": "variable",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stopwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(string.punctuation) + list(set(stopwords.words('english')))",
                            "BinOp"
                        ]
                    ]
                },
                "smooth_idf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_22": {
                "variable": {
                    "value": "count_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stopwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(string.punctuation) + list(set(stopwords.words('english')))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LogisticRegression_56": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "confusion_matrix_87": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(labels)",
                            "BinOp"
                        ],
                        [
                            "np.array(predictions)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_score_88": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(labels)",
                            "BinOp"
                        ],
                        [
                            "np.array(predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_89": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(labels)",
                            "BinOp"
                        ],
                        [
                            "np.array(predictions)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cosine_similarity_112": {
                "X": {
                    "value": "doc_term[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "doc_term[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dlnd/dlnd_bilstm_mlp_baseline.py": {
        "sklearn": {
            "StratifiedKFold_57": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "9274",
                    "type": "int",
                    "possible_values": []
                }
            },
            "confusion_matrix_126": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_score_127": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_128": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "train_test_split_100": {
                "variable": {
                    "value": "(train_target_vecs, valid_target_vecs, train_source_vecs, valid_source_vecs, train_golds, valid_golds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "target_vecs[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "source_vecs[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "gold[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "956004",
                    "type": "int",
                    "possible_values": []
                },
                "stratify": {
                    "value": "np.argmax(gold[train], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_6": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_8": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dlnd/make_prc_curves.py": {
        "sklearn": {
            "precision_recall_curve_26": {
                "variable": {
                    "value": "(p_set_diff, r_set_diff, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_set_diff]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_27": {
                "variable": {
                    "value": "(p_geo_diff, r_geo_diff, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_geo_diff]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_28": {
                "variable": {
                    "value": "(p_tfidf_novelty_score, r_tfidf_novelty_score, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_tfidf_novelty_score]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_29": {
                "variable": {
                    "value": "(p_kl_div, r_kl_div, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_kl_div]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_30": {
                "variable": {
                    "value": "(p_pv, r_pv, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_pv]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_31": {
                "variable": {
                    "value": "(p_bilstm_mlp, r_bilstm_mlp, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_bilstm_mlp]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_32": {
                "variable": {
                    "value": "(p_cnn, r_cnn, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_cnn]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "webis_cpc/analyze_cnn_output.py": {
        "sklearn": {
            "confusion_matrix_23": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[1]]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_score_24": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[1]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_25": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[1]]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "webis_cpc/make_prc_curves.py": {
        "sklearn": {
            "precision_recall_curve_62": {
                "variable": {
                    "value": "(p_set_diff, r_set_diff, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_set_diff]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_63": {
                "variable": {
                    "value": "(p_geo_diff, r_geo_diff, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_geo_diff]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_64": {
                "variable": {
                    "value": "(p_tfidf_novelty_score, r_tfidf_novelty_score, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_tfidf_novelty_score]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_65": {
                "variable": {
                    "value": "(p_kl_div, r_kl_div, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_kl_div]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_66": {
                "variable": {
                    "value": "(p_pv, r_pv, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_pv]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_67": {
                "variable": {
                    "value": "(p_bilstm_mlp, r_bilstm_mlp, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_bilstm_mlp]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "precision_recall_curve_68": {
                "variable": {
                    "value": "(p_cnn, r_cnn, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[j for i in preds for j in i[2]]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "[i[1] for i in probs_cnn]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LogisticRegression_19": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "StratifiedKFold_23": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "9274",
                    "type": "int",
                    "possible_values": []
                }
            },
            "confusion_matrix_35": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([j for i in gold for j in i])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([j for i in predictions for j in i])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_score_36": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([j for i in gold for j in i])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([j for i in predictions for j in i])",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_37": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([j for i in gold for j in i])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([j for i in predictions for j in i])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "webis_cpc/webis_baselines.py": {
        "sklearn": {
            "TfidfVectorizer_19": {
                "variable": {
                    "value": "tfidf_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stopwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(string.punctuation) + list(set(stopwords.words('english')))",
                            "BinOp"
                        ]
                    ]
                },
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "smooth_idf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_20": {
                "variable": {
                    "value": "tfidf_vec1",
                    "type": "variable",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stopwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(string.punctuation) + list(set(stopwords.words('english')))",
                            "BinOp"
                        ]
                    ]
                },
                "smooth_idf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_21": {
                "variable": {
                    "value": "count_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stopwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(string.punctuation) + list(set(stopwords.words('english')))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LogisticRegression_102": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "confusion_matrix_133": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(labels)",
                            "BinOp"
                        ],
                        [
                            "np.array(predictions)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_score_134": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(labels)",
                            "BinOp"
                        ],
                        [
                            "np.array(predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_135": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(labels)",
                            "BinOp"
                        ],
                        [
                            "np.array(predictions)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cosine_similarity_38": {
                "X": {
                    "value": "doc_term[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "doc_term[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "webis_cpc/webis_bilstm_mlp_baseline.py": {
        "sklearn": {
            "StratifiedKFold_57": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "9274",
                    "type": "int",
                    "possible_values": []
                }
            },
            "confusion_matrix_126": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_score_127": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_128": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in golds for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i for l in predictions for i in l]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "train_test_split_100": {
                "variable": {
                    "value": "(train_target_vecs, valid_target_vecs, train_source_vecs, valid_source_vecs, train_golds, valid_golds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "target_vecs[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "source_vecs[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "gold[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "956004",
                    "type": "int",
                    "possible_values": []
                },
                "stratify": {
                    "value": "np.argmax(gold[train], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_22": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_24": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apwsj/make_apwsj_data.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "infersent",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../infersent/encoder/model_2048_attn.pickle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_45": {
                "variable": {
                    "value": "infersent",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../infersent/encoder/model_2048_attn.pickle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_2": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apwsj/make_sentence_embeddings.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "infersent",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "encoder/model_1024.pickle",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "dlnd/extract_sentence_embeddings.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "infersent",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../infersent/encoder/model_1024_attn.pickle",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "dlnd/make_dlnd_data.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "sentence_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../sentence_encoder/encoder/model_2048_attn.pickle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "sentence_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../sentence_encoder/encoder/model_2048_attn.pickle",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_encoder/data.py": {
        "torch": {
            "from_numpy_23": {
                "ndarray": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((max_len, len(batch), word_vec[batch[0][0]].shape[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sentence_encoder/models.py": {
        "torch": {}
    },
    "sentence_encoder/mutils.py": {
        "torch": {}
    },
    "sentence_encoder/train_nli.py": {
        "torch": {
            "CrossEntropyLoss_121": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(params.n_classes).fill_(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_290": {
                "variable": {
                    "value": "nli_net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_62": {
                "device": {
                    "value": "params.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_297": {
                "obj": {
                    "value": "nli_net.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "nli_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLINet(config_nli_model)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(params.outputdir, params.outputmodelname))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "webis_cpc/webis_sentence_embedding.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "infersent",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../infersent/encoder/model_2048_attn.pickle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "infersent",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../infersent/encoder/model_2048_attn.pickle",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}