{
    "image classification/src/cifar100_densenet.py": {
        "torch": {
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(self.inplanes // compressionRate))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_77": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_105": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_36": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "image classification/src/cifar10_resnet.py": {
        "torch": {
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_112": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_116": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_73": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "image classification/src/data_loader.py": {
        "torch": {
            "SubsetRandomSampler_69": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset(root=dataroot, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_74": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset(root=dataroot, train=True, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batchsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset(root=dataroot, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batchsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "image classification/src/evaluate.py": {
        "torch": {
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_29": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "image classification/src/load_optim.py": {
        "torch": {
            "SGD_32": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "eta0",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "nesterov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "eta0",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "image classification/src/main.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_55": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "image classification/src/metrics.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_63": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_73": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(torch.zeros_like(y), torch.ones_like(y) - torch.mul(y, logits)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_93": {
                "input": {
                    "value": "torch.zeros_like(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_93": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * labels - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_94": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * labels - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_94": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * labels - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "model(images).view(-1)",
                            "Call"
                        ],
                        [
                            "model(images).view(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(model(images)).view(-1)",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "image classification/src/mnist_cnn.py": {
        "torch": {
            "Conv2d_7": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_8": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_10": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "image classification/src/sgd_lr_decay.py": {
        "torch": {
            "clone_105": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "image classification/src/sls.py": {
        "torch": {
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "image classification/src/train.py": {
        "torch": {
            "ReduceLROnPlateau_37": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_optim(params=net.parameters(), optim_method=args.optim_method, eta0=args.eta0, alpha=args.alpha, c=args.c, milestones=args.milestones, T_max=args.train_epochs * len(train_loader), n_batches_per_epoch=len(train_loader), nesterov=args.nesterov, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "args.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold": {
                    "value": "args.threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "image classification/src/utils.py": {
        "torch": {
            "sqrt_83": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "torch.sqrt(grad_norm)",
                            "Call"
                        ],
                        [
                            "grad_norm + torch.sum(torch.mul(g, g))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_rng_state_101": {
                "variable": {
                    "value": "cpu_rng_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_102": {
                "variable": {
                    "value": "gpu_rng_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_106": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "torch.mul(g, g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_rng_state_111": {
                "new_state": {
                    "value": "cpu_rng_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_112": {
                "new_state": {
                    "value": "gpu_rng_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_82": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_list",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_list",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "nlp/src/data_util.py": {
        "torch": {
            "from_numpy_23": {
                "ndarray": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((max_len, len(batch), 300))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nlp/src/hinge_loss.py": {
        "torch": {
            "ne_35": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self._range",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_42": {
                "variable": {
                    "value": "(_, y_star)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "aug",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._augmented_scores(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_44": {
                "variable": {
                    "value": "xi_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_star[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self._range",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "xi_smooth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi_smooth * aug",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "aug * xi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ge_51": {
                "input": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(xi_smooth * aug, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_33": {
                "start": {
                    "value": "s.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nlp/src/models_nil.py": {
        "torch": {
            "LSTM_33": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_55": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_244": {
                "variable": {
                    "value": "(output, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_275": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_295": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_297": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hn[0], hn[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_320": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.proj_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_342": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_380": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_399": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_424": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_444": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_470": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_475": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_477": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_479": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_480": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_496": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_513": {
                "variable": {
                    "value": "sent_key_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_key_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ],
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_528": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_528": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_546": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_551": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_553": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_555": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_556": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_572": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_587": {
                "variable": {
                    "value": "sent_key_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_key_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ],
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_597": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas1 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_597": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_604": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas2 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_604": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_610": {
                "variable": {
                    "value": "emb3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas3 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_610": {
                "variable": {
                    "value": "emb3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_616": {
                "variable": {
                    "value": "emb4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas4 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_616": {
                "variable": {
                    "value": "emb4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emb1, emb2, emb3, emb4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_641": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_646": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_648": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_650": {
                "variable": {
                    "value": "self.proj_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_653": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_654": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_670": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_688": {
                "variable": {
                    "value": "sent_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_693": {
                "variable": {
                    "value": "sent_M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_keys + sent_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_723": {
                "variable": {
                    "value": "self.convnet1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(self.word_emb_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_728": {
                "variable": {
                    "value": "self.convnet2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_733": {
                "variable": {
                    "value": "self.convnet3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_738": {
                "variable": {
                    "value": "self.convnet4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_767": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u1, u2, u3, u4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_818": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u, v, torch.abs(u - v), u * v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_848": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_357": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_358": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_358": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_796": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=self.dpout_fc)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_807": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.fc_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_57": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_61": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_346": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_361": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_500": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_576": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_674": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_724": {
                "in_channels": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_726": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_729": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_731": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_734": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_736": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_739": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_741": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_756": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_759": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_762": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_765": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_849": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_850": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_526": {
                "input": {
                    "value": "sent_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_embedding(Variable(torch.LongTensor(bsize * [0]).cuda())).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.query_embedding(Variable(torch.LongTensor(bsize * [0]).cuda())).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_526": {
                "input": {
                    "value": "sent_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_embedding(Variable(torch.LongTensor(bsize * [0]).cuda())).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.query_embedding(Variable(torch.LongTensor(bsize * [0]).cuda())).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_797": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_798": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_799": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_800": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_801": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_802": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_803": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_804": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_808": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_809": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_810": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_818": {
                "input": {
                    "value": "u - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_70": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_688": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_361": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nlp/src/optim/__init__.py": {
        "torch": {}
    },
    "nlp/src/optim/bpgrad.py": {
        "torch": {
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "self.state[p][v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "input": {
                    "value": "grad_sqrd_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "grad_sqrd_norm + p.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nlp/src/optim/dfw.py": {
        "torch": {
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "self.state[p][momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "delta_t * r_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nlp/src/optim/sgd_lr_decay.py": {
        "torch": {
            "clone_105": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "nlp/src/train_nli.py": {
        "torch": {
            "set_device_66": {
                "device": {
                    "value": "params.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_139": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_309": {
                "variable": {
                    "value": "nli_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_317": {
                "obj": {
                    "value": "nli_net.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname + '.encoder')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_283": {
                "obj": {
                    "value": "nli_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NLINet(config_nli_model)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(params.outputdir, params.outputmodelname))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nlp/src/utils.py": {
        "torch": {
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_90": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_91": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eq(pred, targets).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_91": {
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred.t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}