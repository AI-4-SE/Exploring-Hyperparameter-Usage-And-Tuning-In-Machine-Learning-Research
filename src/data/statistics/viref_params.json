{
    "viref/comprehension_test.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_28": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'test_refexp.csv'), max_refexp_len=max_refexp_len, video_name_restriction=video_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_dataset.word_embed['<start>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query['decoder_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query['decoder_output']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "obj1_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj1_vgg_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "obj1_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "obj2_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj2_vgg_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "obj2_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "obj1_mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj1_mask_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "obj1_mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "obj2_mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj2_mask_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "variable": {
                    "value": "obj2_mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "scene_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['scene_vgg_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "variable": {
                    "value": "scene_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[torch.arange(decoder_output.size(0)), decoder_output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "(decoder_output != 0).int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_96": {
                "start": {
                    "value": "decoder_output.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "viref/dataset.py": {
        "torch": {}
    },
    "viref/generation_test.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'test_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_dataset.word_embed['<start>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "word_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(test_dataset.word_embed[word]).unsqueeze(0).to(device) for word in test_dataset.word_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "test_dataset.word_embed[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_84": {
                "*size": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_96": {
                "variable": {
                    "value": "maximum_idcs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ff2(decoder_out_i[:, 0, :], hn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "input": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_97": {
                "start": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_106": {
                "start": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "viref/model.py": {
        "torch": {
            "LSTM_14": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scaled_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_38": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(hidden_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(hidden_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_57": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_out",
                            "Name"
                        ],
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.fc1(inp)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ff1(decoder_out)",
                            "Call"
                        ],
                        [
                            "torch.cat(final_out_list, dim=0)",
                            "Call"
                        ],
                        [
                            "out.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_67": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_out",
                            "Name"
                        ],
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.fc1(inp)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ff1(decoder_out)",
                            "Call"
                        ],
                        [
                            "torch.cat(final_out_list, dim=0)",
                            "Call"
                        ],
                        [
                            "out.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * (num_layers + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "decoder_output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoder_hidden_state, inp2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_out",
                            "Name"
                        ],
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.fc1(inp)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ff1(decoder_out)",
                            "Call"
                        ],
                        [
                            "torch.cat(final_out_list, dim=0)",
                            "Call"
                        ],
                        [
                            "out.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_91": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_out",
                            "Name"
                        ],
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.fc1(inp)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ff1(decoder_out)",
                            "Call"
                        ],
                        [
                            "torch.cat(final_out_list, dim=0)",
                            "Call"
                        ],
                        [
                            "out.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_out",
                            "Name"
                        ],
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.fc1(inp)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.ff1(decoder_out)",
                            "Call"
                        ],
                        [
                            "torch.cat(final_out_list, dim=0)",
                            "Call"
                        ],
                        [
                            "out.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_out_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "viref/train.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'train_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'val_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "initial_scale_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(1, num_features) * math.sqrt(2.0 / num_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_layers, 1, hidden_size).to(device)",
                            "Call"
                        ],
                        [
                            "Parameter(h0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "initial_scale_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_scale_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(torch.randn(1, num_features) * math.sqrt(2.0 / num_features), dim=1).to(device)",
                            "Call"
                        ],
                        [
                            "Parameter(initial_scale_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters()) + [h0, initial_scale_weights]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nll_loss_76": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(features, initial_scale_weights.expand(current_batch_size, -1).contiguous(), decoder_input, h0.expand(-1, current_batch_size, -1).contiguous(), c0.expand(-1, current_batch_size, -1).contiguous())",
                            "Call"
                        ],
                        [
                            "out.contiguous().view(-1, out.size(-1))",
                            "Call"
                        ],
                        [
                            "model(features, initial_scale_weights.expand(current_batch_size, -1).contiguous(), decoder_input, h0.expand(-1, current_batch_size, -1).contiguous(), c0.expand(-1, current_batch_size, -1).contiguous())",
                            "Call"
                        ],
                        [
                            "out.contiguous().view(-1, out.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "decoder_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_114": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(features, initial_scale_weights.expand(current_batch_size, -1).contiguous(), decoder_input, h0.expand(-1, current_batch_size, -1).contiguous(), c0.expand(-1, current_batch_size, -1).contiguous())",
                            "Call"
                        ],
                        [
                            "out.contiguous().view(-1, out.size(-1))",
                            "Call"
                        ],
                        [
                            "model(features, initial_scale_weights.expand(current_batch_size, -1).contiguous(), decoder_input, h0.expand(-1, current_batch_size, -1).contiguous(), c0.expand(-1, current_batch_size, -1).contiguous())",
                            "Call"
                        ],
                        [
                            "out.contiguous().view(-1, out.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "decoder_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_115": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.nll_loss(out, decoder_output.view(-1))",
                            "Call"
                        ],
                        [
                            "F.nll_loss(out, decoder_output.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_120": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'h0': h0, 'initial_scale_weights': initial_scale_weights}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "viref_wo_a/comprehension_test.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'test_refexp.csv'), max_refexp_len=max_refexp_len, video_name_restriction=video_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_dataset.word_embed['<start>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query['decoder_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query['decoder_output']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "obj1_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj1_vgg_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "obj1_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "obj2_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj2_vgg_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "obj2_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "obj1_mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj1_mask_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_83": {
                "variable": {
                    "value": "obj1_mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "obj2_mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj2_mask_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "obj2_mask_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "scene_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['scene_vgg_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "variable": {
                    "value": "scene_vgg_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[obj1_vgg_input, obj2_vgg_input, obj1_mask_input, obj2_mask_input, scene_vgg_input]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[torch.arange(decoder_output.size(0)), decoder_output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "(decoder_output != 0).int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_103": {
                "start": {
                    "value": "decoder_output.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "viref_wo_a/dataset.py": {
        "torch": {}
    },
    "viref_wo_a/generation_test.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'test_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_dataset.word_embed['<start>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "word_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(test_dataset.word_embed[word]).unsqueeze(0).to(device) for word in test_dataset.word_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[obj1_vgg_input, obj2_vgg_input, obj1_mask_input, obj2_mask_input, scene_vgg_input]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "test_dataset.word_embed[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_86": {
                "*size": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_94": {
                "variable": {
                    "value": "maximum_idcs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_i.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "input": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_95": {
                "start": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_104": {
                "start": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "viref_wo_a/model.py": {
        "torch": {
            "LSTM_14": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_41": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "viref_wo_a/train.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'train_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'val_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_layers, 1, hidden_size).to(device)",
                            "Call"
                        ],
                        [
                            "Parameter(h0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters()) + [h0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[obj1_vgg_input, obj2_vgg_input, obj1_mask_input, obj2_mask_input, scene_vgg_input]",
                            "List"
                        ],
                        [
                            "[obj1_vgg_input, obj2_vgg_input, obj1_mask_input, obj2_mask_input, scene_vgg_input]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_78": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out.view(-1, out.size(-1))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "decoder_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[obj1_vgg_input, obj2_vgg_input, obj1_mask_input, obj2_mask_input, scene_vgg_input]",
                            "List"
                        ],
                        [
                            "[obj1_vgg_input, obj2_vgg_input, obj1_mask_input, obj2_mask_input, scene_vgg_input]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_115": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out.view(-1, out.size(-1))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "decoder_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.nll_loss(out, decoder_output.view(-1))",
                            "Call"
                        ],
                        [
                            "F.nll_loss(out, decoder_output.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_121": {
                "obj": {
                    "value": "{'encoder_state_dict': encoder.state_dict(), 'decoder_state_dict': decoder.state_dict(), 'h0': h0}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "viref_wo_e/comprehension_test.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'test_refexp.csv'), max_refexp_len=max_refexp_len, video_name_restriction=video_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_dataset.word_embed['<start>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query['decoder_input']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query['decoder_output']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "obj1_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj1_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "variable": {
                    "value": "obj1_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "obj2_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj2_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "obj2_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "obj1_vgg_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj1_vgg_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "obj1_vgg_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "obj2_vgg_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['obj2_vgg_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "obj2_vgg_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "pair_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['pair_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_83": {
                "variable": {
                    "value": "pair_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "pair_feature_blackened",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['pair_feature_blackened']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "pair_feature_blackened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[obj1_feature, obj2_feature, obj1_vgg_feature, obj2_vgg_feature, pair_feature, pair_feature_blackened]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[torch.arange(decoder_output.size(0)), decoder_output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "(decoder_output != 0).int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_103": {
                "start": {
                    "value": "decoder_output.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "viref_wo_e/dataset.py": {
        "torch": {}
    },
    "viref_wo_e/generation_test.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'test_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_dataset.word_embed['<start>']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "initial_decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "word_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(test_dataset.word_embed[word]).unsqueeze(0).to(device) for word in test_dataset.word_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[obj1_feature, obj2_feature, obj1_vgg_feature, obj2_vgg_feature, pair_feature, pair_feature_blackened]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "test_dataset.word_embed[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_87": {
                "*size": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_95": {
                "variable": {
                    "value": "maximum_idcs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_i.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "input": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_96": {
                "start": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_105": {
                "start": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "viref_wo_e/model.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size * num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(inp)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout1(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.dropout2(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.num_layers, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "out.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_31": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(inp)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout1(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.dropout2(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.num_layers, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "out.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_49": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(inp)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout1(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.dropout2(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.num_layers, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "out.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "out.contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(2))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, -1, out.size(1))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "viref_wo_e/train.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'train_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VirefDataset(args, os.path.join(dataset_split_dir, 'val_refexp.csv'), max_refexp_len=max_refexp_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_75": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[obj1_feature, obj2_feature, obj1_vgg_feature, obj2_vgg_feature, pair_feature, pair_feature_blackened]",
                            "List"
                        ],
                        [
                            "[obj1_feature, obj2_feature, obj1_vgg_feature, obj2_vgg_feature, pair_feature, pair_feature_blackened]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_82": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out.contiguous().view(-1, out.size(-1))",
                            "Call"
                        ],
                        [
                            "out.contiguous().view(-1, out.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "decoder_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_126": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out.contiguous().view(-1, out.size(-1))",
                            "Call"
                        ],
                        [
                            "out.contiguous().view(-1, out.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "decoder_output.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.nll_loss(out, decoder_output.view(-1))",
                            "Call"
                        ],
                        [
                            "F.nll_loss(out, decoder_output.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_133": {
                "obj": {
                    "value": "{'encoder_state_dict': encoder.state_dict(), 'decoder_state_dict': decoder.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}