{
    "dataloader.py": {
        "torch": {
            "DataLoader_20": {
                "dataset": {
                    "value": "H5Loader(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "dcgan_models.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_14": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_16": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "generate_h5.py": {
        "torch": {}
    },
    "generate_morph.py": {
        "torch": {
            "tensor_145": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.exp(-C / epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(range(kernel_size)).repeat(kernel_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_157": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-D.type(torch.double) / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a.reshape(1, 1, height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "b.reshape(1, 1, height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_212": {
                "variable": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(target_image).cuda().reshape(1, 3, pix2pix_img_size, pix2pix_img_size)",
                            "Call"
                        ],
                        [
                            "F.interpolate(target_image, scale_factor=dcgan_img_size / pix2pix_img_size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "target_image.clamp(min=0)",
                            "Call"
                        ],
                        [
                            "target_image / target_image.max()",
                            "BinOp"
                        ],
                        [
                            "(target_image - 0.5) / 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "dcgan_img_size / pix2pix_img_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_222": {
                "variable": {
                    "value": "pix_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dcgan_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G(z)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "pix2pix_img_size / dcgan_img_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_335": {
                "variable": {
                    "value": "out_ours",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor(im).reshape(3, *img_size) for im in out_ours]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "out_OT",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor(im).reshape(3, *img_size) for im in out_OT]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_337": {
                "variable": {
                    "value": "out_GAN",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor(im).reshape(3, *img_size) for im in out_GAN]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "interpolate_328": {
                "variable": {
                    "value": "GAN_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "GAN_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Generator((1 - t) * noise1 + t * noise2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(GAN_image, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "utils.denorm(pix_outputs.detach()).cpu().numpy().reshape(3, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(a.reshape(1, 1, height, width), dtype=torch.double).cuda()",
                            "Call"
                        ],
                        [
                            "a / a.sum()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_258": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_341": {
                "tensors": {
                    "value": "[out_OT, out_ours, out_GAN]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_171": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*a.shape)",
                            "Call"
                        ],
                        [
                            "b / K.T.dot(u)",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(a) / k.sum()",
                            "BinOp"
                        ],
                        [
                            "b / torch.nn.functional.conv2d(u, k, padding=kernel_size // 2)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-D.type(torch.double) / epsilon).cuda().reshape(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_173": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / K.dot(v)",
                            "BinOp"
                        ],
                        [
                            "a / torch.nn.functional.conv2d(v, k, padding=kernel_size // 2)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-D.type(torch.double) / epsilon).cuda().reshape(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_335": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "*img_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reshape_336": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "*img_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Tensor_337": {},
            "reshape_337": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "*img_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_177": {
                "input": {
                    "value": "u.reshape(-1, 1) * K * v.reshape(1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generate_pix_dataset.py": {
        "torch": {
            "interpolate_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "pix2pix_image_size / dcgan_image_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    },
    "train_dcgan.py": {
        "torch": {
            "BCELoss_75": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "G_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Method Argument"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Method Argument"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_82": {
                "variable": {
                    "value": "G_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "G_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(G.parameters(), lr=learning_rate, betas=betas, weight_decay=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[25, 50, 75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiStepLR_83": {
                "variable": {
                    "value": "D_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "D_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(D.parameters(), lr=learning_rate, betas=betas, weight_decay=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[25, 50, 75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "fixed_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_test_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6 * 6",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_181": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_184": {
                "variable": {
                    "value": "E_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "E.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Method Argument"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_248": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_251": {
                "variable": {
                    "value": "E_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "E.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Method Argument"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ],
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_328": {
                "variable": {
                    "value": "out_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(denorm(x), denorm(G(z)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_331": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_332": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[z]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "out_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_images, denorm(G(z)).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_146": {
                "variable": {
                    "value": "D_avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor(D_epoch_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_147": {
                "variable": {
                    "value": "G_avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor(G_epoch_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_216": {
                "variable": {
                    "value": "E_avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor(E_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_285": {
                "variable": {
                    "value": "E_avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor(E_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_104": {
                "variable": {
                    "value": "y_real",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size()[0]",
                            "Subscript"
                        ],
                        [
                            "images.size()[0]",
                            "Subscript"
                        ],
                        [
                            "images.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "y_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size()[0]",
                            "Subscript"
                        ],
                        [
                            "images.size()[0]",
                            "Subscript"
                        ],
                        [
                            "images.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_111": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size()[0]",
                            "Subscript"
                        ],
                        [
                            "images.size()[0]",
                            "Subscript"
                        ],
                        [
                            "images.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_126": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size()[0]",
                            "Subscript"
                        ],
                        [
                            "images.size()[0]",
                            "Subscript"
                        ],
                        [
                            "images.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(save_dir, 'generator')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(save_dir, 'discriminator')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_172": {
                "f": {
                    "value": "generator_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ],
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ],
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_198": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "E.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(save_dir, 'encoder')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_236": {
                "f": {
                    "value": "generator_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ],
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ],
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_244": {
                "f": {
                    "value": "encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(save_dir, 'encoder')",
                            "Call"
                        ],
                        [
                            "join(save_dir, 'encoder')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_258": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.cuda()",
                            "Call"
                        ],
                        [
                            "G(z)",
                            "Call"
                        ],
                        [
                            "images.cuda()",
                            "Call"
                        ],
                        [
                            "images.cuda()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_293": {
                "obj": {
                    "value": "E.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(save_dir, 'encoder')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_304": {
                "f": {
                    "value": "generator_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ],
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ],
                        [
                            "join(save_dir, 'generator')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_311": {
                "f": {
                    "value": "encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(save_dir, 'encoder')",
                            "Call"
                        ],
                        [
                            "join(save_dir, 'encoder')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_319": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.cuda()",
                            "Call"
                        ],
                        [
                            "G(z)",
                            "Call"
                        ],
                        [
                            "images.cuda()",
                            "Call"
                        ],
                        [
                            "images.cuda()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_20": {
                "f": {
                    "value": "generator_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'networks/generator'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_28": {
                "f": {
                    "value": "encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'networks/encoder'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_36": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}