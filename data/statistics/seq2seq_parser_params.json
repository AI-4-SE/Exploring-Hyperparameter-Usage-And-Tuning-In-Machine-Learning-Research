{
    "onmt/Highway.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.normal_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.gate_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_28": {
                "variable": {
                    "value": "multiplyed_gate_and_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_layer_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation_function(self.normal_layer(x))",
                            "Call"
                        ],
                        [
                            "self.activation_function(self.normal_layer(x))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gate_layer_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_activation(self.gate_layer(x), dim=0)",
                            "Call"
                        ],
                        [
                            "self.gate_activation(self.gate_layer(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_29": {
                "variable": {
                    "value": "multiplyed_gate_and_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - gate_layer_result",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.normal_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.gate_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_57": {
                "variable": {
                    "value": "multiplyed_gate_and_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_layer_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation_function(self.normal_layer(x))",
                            "Call"
                        ],
                        [
                            "self.activation_function(self.normal_layer(x))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gate_layer_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_activation(self.gate_layer(x), dim=0)",
                            "Call"
                        ],
                        [
                            "self.gate_activation(self.gate_layer(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_58": {
                "variable": {
                    "value": "multiplyed_gate_and_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - gate_layer_result",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_31": {
                "input": {
                    "value": "multiplyed_gate_and_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(normal_layer_result, gate_layer_result)",
                            "Call"
                        ],
                        [
                            "torch.mul(normal_layer_result, gate_layer_result)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "multiplyed_gate_and_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - gate_layer_result, x)",
                            "Call"
                        ],
                        [
                            "torch.mul(1 - gate_layer_result, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_60": {
                "input": {
                    "value": "multiplyed_gate_and_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(normal_layer_result, gate_layer_result)",
                            "Call"
                        ],
                        [
                            "torch.mul(normal_layer_result, gate_layer_result)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "multiplyed_gate_and_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - gate_layer_result, x)",
                            "Call"
                        ],
                        [
                            "torch.mul(1 - gate_layer_result, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "onmt/Loss.py": {
        "torch": {
            "KLDivLoss_168": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_169": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_174": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_176": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(len(tgt_vocab))",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_191": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tdata.eq(self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_191": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_192": {
                "variable": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tdata.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "backward_265": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*variables)",
                            "Call"
                        ]
                    ]
                },
                "grad_tensors": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_249": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "Variable(v.data, requires_grad=requires_grad, volatile=volatile)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shard_size",
                            "Method Argument"
                        ],
                        [
                            "shard_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "onmt/ModelConstructor.py": {
        "torch": {
            "load_132": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(model_opt.rnn_size, len(fields['tgt'].vocab))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "model_opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(fields['tgt'].vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_208": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Models.py": {
        "torch": {
            "ModuleList_404": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.total_hidden_dim, self.total_hidden_dim, bias=True) for i in range(number_of_states)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_488": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_560": {
                "variable": {
                    "value": "decoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_forward_pass(tgt, memory_bank, state, memory_lengths=memory_lengths)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "self.attn(rnn_output.transpose(0, 1).contiguous(), memory_bank.transpose(0, 1), memory_lengths=memory_lengths)",
                            "Call"
                        ],
                        [
                            "self.context_gate(emb.view(-1, emb.size(2)), rnn_output.view(-1, rnn_output.size(2)), decoder_outputs.view(-1, decoder_outputs.size(2)))",
                            "Call"
                        ],
                        [
                            "decoder_outputs.view(tgt_len, tgt_batch, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "self.dropout(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "decoder_outputs + [decoder_output]",
                            "BinOp"
                        ],
                        [
                            "self.decoder(tgt, memory_bank, enc_state if dec_state is None else dec_state, memory_lengths=lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_895": {
                "variable": {
                    "value": "self.input_feed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.elmo_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, self.elmo_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_257": {
                "variable": {
                    "value": "self.elmo_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5, 0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.elmo_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "self.subword_elmo_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, self.subword_elmo_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_276": {
                "variable": {
                    "value": "self.subword_elmo_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5, 0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_277": {
                "variable": {
                    "value": "self.subword_elmo_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_288": {
                "variable": {
                    "value": "self.n2v_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.nv2idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "node2vec_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_338": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.elmo_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_342": {
                "variable": {
                    "value": "elmo_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "elmo_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.elmo_gamma * (w[0] * elmo_representations[0] + w[1] * elmo_representations[1])",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(elmo_emb, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.elmo_mlp(elmo_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, elmo_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_357": {
                "variable": {
                    "value": "subword_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.subword_elmo_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_361": {
                "variable": {
                    "value": "subword_elmo_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subword_elmo_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.subword_elmo_gamma * (subword_w[0] * subword_elmo_representations[0] + subword_w[1] * subword_elmo_representations[1])",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(subword_elmo_emb, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.subword_elmo_mlp(subword_elmo_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, subword_elmo_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_375": {
                "variable": {
                    "value": "n2v_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n2v_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n2v_embeddings(n2v_ids)",
                            "Call"
                        ],
                        [
                            "torch.transpose(n2v_emb, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, n2v_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_562": {
                "variable": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_729": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_t, input_feed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_419": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(states.view(-1, self.total_hidden_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_571": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[0:h.size(0):2], h[1:h.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.elmo_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_258": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_275": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.subword_elmo_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_277": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_289": {
                "ndarray": {
                    "value": "self.n2v_emb_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_404": {
                "in_features": {
                    "value": "self.total_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.total_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Optim.py": {
        "torch": {
            "SGD_79": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_81": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_87": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseAdam_95": {
                "params": {
                    "value": "self.sparse_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/SubwordElmo.py": {
        "torch": {
            "Dropout_66": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_193": {
                "variable": {
                    "value": "subword_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.view(-1, max_subwords_per_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self._subword_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_208": {
                "variable": {
                    "value": "subword_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subword_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.embedding(inputs.view(-1, max_subwords_per_token), self._subword_embedding_weights)",
                            "Call"
                        ],
                        [
                            "torch.transpose(subword_embedding, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "token_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_242": {
                "variable": {
                    "value": "self._subword_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self._subword_weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ],
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(convolved, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "convolved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(subword_embedding)",
                            "Call"
                        ],
                        [
                            "torch.max(convolved, dim=-1)",
                            "Call"
                        ],
                        [
                            "activation(convolved)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_256": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "subword_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_options['embedding']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_351": {
                "input": {
                    "value": "lstm_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._elmo_lstm(type_representation, mask)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "lstm_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_349": {
                "tensors": {
                    "value": "[type_representation, type_representation]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Trainer.py": {
        "torch": {
            "save_278": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'generator': generator_state_dict, 'vocab': onmt.io.save_fields_to_vocab(fields), 'opt': opt, 'epoch': epoch, 'optim': self.optim}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s_acc_%.2f_ppl_%.2f_e%d.pt' % (opt.save_model, valid_stats.accuracy(), valid_stats.ppl(), epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/Utils.py": {
        "torch": {
            "arange_20": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_20": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/io/AudioDataset.py": {
        "torch": {
            "zeros_211": {
                "variable": {
                    "value": "sounds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nfft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[0].size(0)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(1) for t in data])",
                            "Call"
                        ],
                        [
                            "t in enumerate(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.max() for t in data]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/io/IO.py": {
        "torch": {
            "load_278": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset_files",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "[level.unsqueeze(2) for level in levels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/io/ImageDataset.py": {
        "torch": {
            "zeros_151": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[0].size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(1) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(2) for t in data])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.max() for t in data]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/io/TextDataset.py": {
        "torch": {
            "zeros_223": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "src_size + len(example.src)",
                            "BinOp"
                        ],
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.max() for t in data]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "blank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "fill",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/AudioEncoder.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(41, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(21, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_38": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidirectional",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "hardtanh_54": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norm1(self.layer1(input[:, :, :, :]))",
                            "Call"
                        ],
                        [
                            "F.hardtanh(input, 0, 20, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(self.layer2(input))",
                            "Call"
                        ],
                        [
                            "F.hardtanh(input, 0, 20, inplace=True)",
                            "Call"
                        ],
                        [
                            "input.view(batch_size, -1, length)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "hardtanh_61": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norm1(self.layer1(input[:, :, :, :]))",
                            "Call"
                        ],
                        [
                            "F.hardtanh(input, 0, 20, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(self.layer2(input))",
                            "Call"
                        ],
                        [
                            "F.hardtanh(input, 0, 20, inplace=True)",
                            "Call"
                        ],
                        [
                            "input.view(batch_size, -1, length)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/Conv2Conv.py": {
        "torch": {
            "unsqueeze_22": {
                "input": {
                    "value": "torch.transpose(x, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings.embedding_size",
                            "Attribute"
                        ],
                        [
                            "self.embeddings.embedding_size",
                            "Attribute"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings.embedding_size",
                            "Attribute"
                        ],
                        [
                            "self.embeddings.embedding_size",
                            "Attribute"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_115": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.attn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + conv(x)",
                            "BinOp"
                        ],
                        [
                            "x * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "linear_out.view(tgt_emb.size(0), tgt_emb.size(1), -1)",
                            "Call"
                        ],
                        [
                            "shape_transform(x)",
                            "Call"
                        ],
                        [
                            "(x + (c + out) * SCALE_WEIGHT) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state.previous_input, tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "new_target_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_var.split(int(x_var.size(1) / 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.cnn_kernel_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/ConvMultiStepAttention.py": {
        "torch": {
            "transpose_15": {
                "input": {
                    "value": "h.view(batch, length, hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_65": {
                "variable": {
                    "value": "pre_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_out_top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out_top",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(target, encoder_out_top)",
                            "Call"
                        ],
                        [
                            "pre_attn.transpose(0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pre_attn)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(encoder_out_combine, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(context_output, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_13": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "input": {
                    "value": "encoder_out_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out_combine",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "input": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn, torch.transpose(encoder_out_combine, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.unsqueeze(context_output, 3), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/CopyGenerator.py": {
        "torch": {
            "Linear_63": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(tgt_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_copy(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_96": {
                "variable": {
                    "value": "out_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - p_copy.expand_as(prob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_97": {
                "variable": {
                    "value": "mul_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "p_copy.expand_as(attn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_98": {
                "variable": {
                    "value": "copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_attn.view(-1, batch, slen).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_map.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "[out_prob, copy_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_214": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-out.log().mul(target.ne(self.pad).float())",
                            "UnaryOp"
                        ],
                        [
                            "self.criterion(scores, align, target)",
                            "Call"
                        ],
                        [
                            "loss.view(-1, batch.batch_size).sum(0)",
                            "Call"
                        ],
                        [
                            "torch.div(loss, tgt_lens).sum()",
                            "Call"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tgt_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.tgt.ne(pad_ix).float().sum(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_214": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/Embeddings.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_25": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_26": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_28": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_29": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.make_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_171": {
                "variable": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "emb_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_125": {
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_26": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(emb_dims)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_vec_size",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/Gate.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings_size + decoder_size + attention_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_31": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.source_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_size",
                            "Method Argument"
                        ],
                        [
                            "attention_size",
                            "Method Argument"
                        ],
                        [
                            "attention_size",
                            "Method Argument"
                        ],
                        [
                            "attention_size",
                            "Method Argument"
                        ],
                        [
                            "attention_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.target_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddings_size + decoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_37": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_emb, dec_state, attn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_53": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_69": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_84": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "(prev_emb, dec_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/GlobalAttention.py": {
        "torch": {
            "Linear_77": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "out_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_type == 'mlp'",
                            "Compare"
                        ]
                    ]
                }
            },
            "Softmax_79": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tanh_80": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_181": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sm(align.view(batch * targetL, sourceL))",
                            "Call"
                        ],
                        [
                            "align_vectors.view(batch, targetL, sourceL)",
                            "Call"
                        ],
                        [
                            "align_vectors.squeeze(1)",
                            "Call"
                        ],
                        [
                            "align_vectors.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank + self.linear_cover(cover).view_as(memory_bank)",
                            "BinOp"
                        ],
                        [
                            "self.tanh(memory_bank)",
                            "Call"
                        ],
                        [
                            "memory_bank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_184": {
                "variable": {
                    "value": "concat_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.linear_cover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.linear_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_112": {
                "input": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_t_.view(tgt_batch, tgt_len, tgt_dim)",
                            "Call"
                        ],
                        [
                            "h_t",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_s_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_s.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "onmt/modules/ImageEncoder.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.batch_norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_42": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidirectional",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "self.pos_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "relu_58": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(input[:, :, :, :] - 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_61": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(input[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(input)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(input)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(input)), True)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_68": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(input[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(input)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(input)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(input)), True)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm1(self.layer3(input))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_80": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(input[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(input)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(input)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(input)), True)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm2(self.layer5(input))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(input[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(input)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(input), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(input)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(input)), True)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm3(self.layer6(input))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_98": {
                "variable": {
                    "value": "row_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "with_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_emb.view(1, pos_emb.size(0), pos_emb.size(1)), inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/MultiHeadedAttn.py": {
        "torch": {
            "Linear_58": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_64": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.linear_query(query))",
                            "Call"
                        ],
                        [
                            "query_up / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key_up.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_135": {
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.linear_values(value))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "onmt/modules/SRU.py": {
        "torch": {
            "rand_353": {
                "variable": {
                    "value": "tmp_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_490": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_in, self.size_per_dir * 2 if bidirectional else self.size_per_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_494": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_out * 4 if bidirectional else n_out * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_582": {
                "variable": {
                    "value": "self.rnn_lst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "grad_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_last[0], grad_last[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_626": {
                "variable": {
                    "value": "fh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lstc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_628": {
                "variable": {
                    "value": "fh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lstc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_418": {
                "variable": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c[-1, :, :d], c[0, :, d:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "current_stream_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/StackedRNN.py": {
        "torch": {
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_14": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_32": {
                "variable": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_1)",
                            "Call"
                        ],
                        [
                            "c_1 + [c_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_17": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_46": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "onmt/modules/StructuredAttention.py": {
        "torch": {
            "rand_45": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_25": {
                "input": {
                    "value": "lap.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_39": {
                "input": {
                    "value": "roots_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[b].diag().exp().mul(inv_laplacian.transpose(0, 1)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_24": {
                "n": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ne_24": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/Transformer.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_66": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(hidden_size, dropout) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gt_186": {
                "variable": {
                    "value": "dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + self.mask[:, :tgt_pad_mask.size(1), :tgt_pad_mask.size(1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_220": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_262": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(hidden_size, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_329": {
                "variable": {
                    "value": "saved_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "saved_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(saved_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_192": {
                "variable": {
                    "value": "all_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(previous_input, input_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state.previous_input, tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/UtilClass.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_8": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_9": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f(x) for (f, x) in zip(self, inputs)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/modules/WeightNorm.py": {
        "torch": {
            "Parameter_45": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_153": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_162": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar.view(self.out_channels, *[1] * (len(v.size()) - 1)).expand_as(v) * v",
                            "BinOp"
                        ],
                        [
                            "scalar.view(self.in_channels, self.out_channels, *[1] * (len(V.size()) - 2)).expand_as(V) * V",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_236": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar.view(self.out_channels, *[1] * (len(v.size()) - 1)).expand_as(v) * v",
                            "BinOp"
                        ],
                        [
                            "scalar.view(self.in_channels, self.out_channels, *[1] * (len(V.size()) - 2)).expand_as(V) * V",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "self.V.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "self.V.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_69": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(v_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_90": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_127": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(v_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_135": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_201": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, V)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(v_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_212": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_231": {
                "input": {
                    "value": "V.transpose(0, 1).contiguous().view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_122": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/translate/Beam.py": {
        "torch": {
            "stack_214": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_269": {
                "input": {
                    "value": "beam.attn[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_269": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/translate/Penalties.py": {
        "torch": {
            "max_49": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cov",
                            "Method Argument"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_49": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_42": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cov",
                            "Method Argument"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/translate/Translation.py": {
        "torch": {
            "sort_63": {
                "variable": {
                    "value": "(inds, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.indices.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "onmt/translate/TranslationServer.py": {
        "torch": {
            "set_device_367": {
                "device": {
                    "value": "self.opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "onmt/translate/Translator.py": {
        "torch": {
            "set_device_21": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_280": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_298": {
                "tensors": {
                    "value": "[b.get_current_state() for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onmt.io.TextDataset(fields, src_iter, tgt_iter, src_iter.num_feats, tgt_iter.num_feats, src_seq_length=opt.src_seq_length, tgt_seq_length=opt.tgt_seq_length, dynamic_dict=opt.dynamic_dict)",
                            "Call"
                        ],
                        [
                            "onmt.io.build_dataset(fields, opt.data_type, src_corpus, tgt_corpus, src_dir=opt.src_dir, src_seq_length=opt.src_seq_length, tgt_seq_length=opt.tgt_seq_length, src_seq_length_trunc=opt.src_seq_length_trunc, tgt_seq_length_trunc=opt.tgt_seq_length_trunc, dynamic_dict=opt.dynamic_dict, sample_rate=opt.sample_rate, window_size=opt.window_size, window_stride=opt.window_stride, window=opt.window)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "pt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{:s}.{:s}.{:d}.pt'.format(opt.save_data, corpus_type, index)",
                            "Call"
                        ],
                        [
                            "'{:s}.{:s}.pt'.format(opt.save_data, corpus_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_169": {
                "obj": {
                    "value": "onmt.io.save_fields_to_vocab(fields)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_107": {
                "obj": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onmt.io.TextDataset(fields, src_iter, tgt_iter, src_iter.num_feats, tgt_iter.num_feats, src_seq_length=opt.src_seq_length, tgt_seq_length=opt.tgt_seq_length, dynamic_dict=opt.dynamic_dict)",
                            "Call"
                        ],
                        [
                            "onmt.io.build_dataset(fields, opt.data_type, src_corpus, tgt_corpus, src_dir=opt.src_dir, src_seq_length=opt.src_seq_length, tgt_seq_length=opt.tgt_seq_length, src_seq_length_trunc=opt.src_seq_length_trunc, tgt_seq_length_trunc=opt.tgt_seq_length_trunc, dynamic_dict=opt.dynamic_dict, sample_rate=opt.sample_rate, window_size=opt.window_size, window_stride=opt.window_stride, window=opt.window)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "pt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{:s}.{:s}.{:d}.pt'.format(opt.save_data, corpus_type, index)",
                            "Call"
                        ],
                        [
                            "'{:s}.{:s}.pt'.format(opt.save_data, corpus_type)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "subroot/dnn_pytorch/dnn_utils.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_variable(p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_60": {
                "input": {
                    "value": "torch.exp(x - xmax).sum(dim=dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_60": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "subroot/dnn_pytorch/nn.py": {
        "torch": {
            "Embedding_39": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['word_vocab_size']",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['word_dim']",
                            "Subscript"
                        ],
                        [
                            "word_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_102": {
                "variable": {
                    "value": "self.word_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "word_lstm_input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.tanh_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tanh_layer_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * word_lstm_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "word_lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['word_lstm_dim']",
                            "Subscript"
                        ],
                        [
                            "self.model_param['word_lstm_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "word_lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['word_lstm_dim']",
                            "Subscript"
                        ],
                        [
                            "self.model_param['word_lstm_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "label_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['label_size']",
                            "Subscript"
                        ],
                        [
                            "pred.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.word_emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_emb.weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_285": {
                "variable": {
                    "value": "word_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_lstm_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_lstm_input, dim=2)",
                            "Call"
                        ],
                        [
                            "self.word_lstm_dropout(word_lstm_input)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(word_lstm_input, seq_len, batch_first=True)",
                            "Call"
                        ],
                        [
                            "word_lstm_input + feat_emb",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_295": {
                "variable": {
                    "value": "word_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_lstm_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_lstm_input, dim=2)",
                            "Call"
                        ],
                        [
                            "self.word_lstm_dropout(word_lstm_input)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(word_lstm_input, seq_len, batch_first=True)",
                            "Call"
                        ],
                        [
                            "word_lstm_input + feat_emb",
                            "BinOp"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(seq_len)",
                            "Call"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_301": {
                "variable": {
                    "value": "(word_lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "word_lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_lstm(word_lstm_input, word_lstm_init_hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(word_lstm_out, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_368": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_383": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(init_variable((num_labels + 2, num_labels + 2))).type(FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred, Variable(small * torch.ones((batch_size, max_seq_len, 2)).type(FloatTensor))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b_s, observations, right_padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_557": {
                "variable": {
                    "value": "self.conv_nets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_nets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_558": {
                "variable": {
                    "value": "self.max_pool1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.max_pool1d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "self.char_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "char_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['char_vocab_size']",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "char_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['char_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LSTM_60": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "char_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "variable": {
                    "value": "self.word_lstm_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Softmax_123": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_239": {
                "variable": {
                    "value": "lstm_char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_emb[:, :char_len[0]]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(lstm_char_emb, char_len, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "char_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(char_len)",
                            "Call"
                        ],
                        [
                            "char_len",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_245": {
                "variable": {
                    "value": "(char_lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_lstm(lstm_char_emb, char_lstm_init_hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(char_lstm_out, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "char_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "char_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "char_repr + char_cnn_out",
                            "BinOp"
                        ],
                        [
                            "torch.cat(char_repr, dim=1)",
                            "Call"
                        ],
                        [
                            "char_repr[char_index_mapping]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(char_repr_padded_seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_265": {
                "variable": {
                    "value": "char_repr_padded_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "char_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "char_repr + char_cnn_out",
                            "BinOp"
                        ],
                        [
                            "torch.cat(char_repr, dim=1)",
                            "Call"
                        ],
                        [
                            "char_repr[char_index_mapping]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(char_repr_padded_seq)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "seq_len.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_266": {
                "variable": {
                    "value": "(char_repr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_repr_padded_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.PackedSequence(data=char_repr, batch_sizes=seq_len.tolist())",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_319": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.softmax(linear_out[i]) for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_436": {
                "variable": {
                    "value": "_previous",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "previous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observations[:, 0]",
                            "Subscript"
                        ],
                        [
                            "log_sum_exp(_previous + _obs + self.transitions, dim=1)",
                            "Call"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "p_score[-1].max(dim=0)",
                            "Call"
                        ],
                        [
                            "s[previous]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_437": {
                "variable": {
                    "value": "_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observations[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_495": {
                "variable": {
                    "value": "real_path_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_path_score * real_path_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_505": {
                "variable": {
                    "value": "padded_tags_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b_id, ref, right_padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_552": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(out_channels[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "int(kernel_size[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool1d_555": {
                "variable": {
                    "value": "max_pool1d",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "data": {
                    "value": "torch.randn(2, 1, word_lstm_dim).type(FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "data": {
                    "value": "torch.randn(2, 1, word_lstm_dim).type(FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "new_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pretrained[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_356": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_mask(seq_len)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(mask).type(FloatTensor))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_384": {
                "ndarray": {
                    "value": "init_variable((num_labels + 2, num_labels + 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_399": {
                "ndarray": {
                    "value": "b_s_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[small] * self.num_labels + [0, small]]] * batch_size).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_404": {
                "ndarray": {
                    "value": "right_padding_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0] * self.num_labels + [small, small]]] * batch_size).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_424": {
                "ndarray": {
                    "value": "e_s_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(observations.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_474": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq[::-1] + [p_score[-1].max(dim=0)[1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_530": {
                "input": {
                    "value": "real_transition_score * transition_score_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "data": {
                    "value": "torch.randn(2, 1, char_lstm_dim).type(FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "data": {
                    "value": "torch.randn(2, 1, char_lstm_dim).type(FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_83": {
                "num_embeddings": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['feat_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_98": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['word_lstm_dim']",
                            "Subscript"
                        ],
                        [
                            "self.model_param['word_lstm_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_99": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['word_lstm_dim']",
                            "Subscript"
                        ],
                        [
                            "self.model_param['word_lstm_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "new_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pretrained[word.lower()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_359": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_499": {
                "ndarray": {
                    "value": "np.array([[self.num_labels]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "char_lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['char_lstm_dim']",
                            "Subscript"
                        ],
                        [
                            "self.model_param['char_lstm_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_56": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "char_lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_param['char_lstm_dim']",
                            "Subscript"
                        ],
                        [
                            "self.model_param['char_lstm_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "new_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pretrained[re.sub('\\\\d', '0', word.lower())]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "ndarray": {
                    "value": "np.array([np.arange(batch_size)] * max_seq_len).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_363": {
                "ndarray": {
                    "value": "np.array([np.arange(max_seq_len)] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_487": {
                "ndarray": {
                    "value": "np.array([np.arange(batch_size)] * max_seq_len).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_490": {
                "ndarray": {
                    "value": "np.array([np.arange(max_seq_len)] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_409": {
                "*size": {
                    "value": "(batch_size, max_seq_len, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_484": {
                "ndarray": {
                    "value": "sequence_mask(seq_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_503": {
                "*size": {
                    "value": "b_id.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_515": {
                "ndarray": {
                    "value": "e_id_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(padded_tags_ids.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_520": {
                "ndarray": {
                    "value": "sequence_mask(seq_len + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_455": {
                "ndarray": {
                    "value": "np.arange(batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_456": {
                "ndarray": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(seq_len)",
                            "Call"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ],
                        [
                            "seq_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_524": {
                "ndarray": {
                    "value": "np.arange(max_seq_len + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_527": {
                "ndarray": {
                    "value": "np.arange(max_seq_len + 1) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "subroot/dnn_pytorch/tag.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "max_89": {
                "variable": {
                    "value": "(_, _preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "subroot/dnn_pytorch/train.py": {
        "torch": {
            "SGD_282": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_386": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'parameters': parameters, 'mappings': {'id_to_word': id_to_word, 'id_to_char': id_to_char, 'id_to_tag': id_to_tag, 'id_to_feat_list': id_to_feat_list}, 'state_dict': model.state_dict(), 'best_prec1': best_dev, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(model_dir, 'best_model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_347": {
                "variable": {
                    "value": "(_, _preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "subroot/dnn_pytorch/utils.py": {
        "torch": {}
    },
    "tools/average_models.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file in enumerate(model_files)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_43": {
                "obj": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'vocab': vocab, 'opt': opt, 'epoch': epoch, 'optim': None, 'generator': avg_generator, 'model': avg_model}",
                            "Dict"
                        ],
                        [
                            "average_models(opt.models)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/embeddings_to_torch.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "vocabs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_127": {
                "obj": {
                    "value": "filtered_enc_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "match_embeddings(enc_vocab, embeddings_enc, opt)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "enc_output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.output_file + '.enc.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tools/extract_embeddings.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_device_36": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/release_model.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_16": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(opt.model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_46": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_55": {
                "device": {
                    "value": "opt.gpuid[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_320": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_373": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onmt.ModelConstructor.make_base_model(model_opt, fields, use_gpu(opt), checkpoint)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=opt.gpuid, dim=1)",
                            "Call"
                        ],
                        [
                            "build_model(model_opt, opt, fields, checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpuid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_466": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_343": {
                "f": {
                    "value": "opt.data + '.vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_430": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}