{
    "3d-tracking/utils/tracking_utils.py": {
        "sklearn": {
            "pairwise_distances_692": {
                "X": {
                    "value": "featA",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "featB",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_152": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, points.new_ones((points.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_152": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection[:, 0:3].inverse().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_154": {
                "input": {
                    "value": "abs(corners[:, 2] - 1) < 0.01",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/model/utils/logger.py": {
        "tensorflow": {
            "FileWriter_15": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_19": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_42": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_52": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_69": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/utils/logger.py": {
        "tensorflow": {
            "FileWriter_17": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_21": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_46": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_56": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_73": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/model/faster_rcnn/faster_rcnn.py": {
        "torch": {
            "softmax_94": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_89": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_101": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "3d-tracking/lib/model/faster_rcnn/resnet.py": {
        "torch": {
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_113": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_120": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.RCNN_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.RCNN_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_234": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/model/faster_rcnn/vgg16.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.RCNN_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/model/roi_layers/__init__.py": {
        "torch": {}
    },
    "3d-tracking/lib/model/roi_layers/roi_align.py": {
        "torch": {}
    },
    "3d-tracking/lib/model/roi_layers/roi_pool.py": {
        "torch": {}
    },
    "3d-tracking/lib/model/rpn/anchor_target_layer.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(anchor_scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_88": {
                "variable": {
                    "value": "inds_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_100": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_101": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_107": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "sum_fg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_121": {
                "variable": {
                    "value": "sum_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_208": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_211": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_156": {
                "variable": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_126": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_140": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_147": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_136": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/model/rpn/bbox_transform.py": {
        "torch": {
            "log_28": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_29": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.view(1, -1).expand_as(gt_widths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.view(1, -1).expand_as(gt_heights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_90": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 2::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_91": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 3::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_155": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_156": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_159": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_160": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_201": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_202": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_205": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_206": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_240": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_241": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_244": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_245": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/model/rpn/proposal_layer.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_125": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/model/rpn/proposal_target_layer_cascade.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "all_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_rois, gt_boxes_append]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_124": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(all_rois, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss[b] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_143": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps[i] >= cfg.TRAIN.FG_THRESH",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_147": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(max_overlaps[i] < cfg.TRAIN.BG_THRESH_HI) & (max_overlaps[i] >= cfg.TRAIN.BG_THRESH_LO)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_batch.size(0)",
                            "Call"
                        ],
                        [
                            "ex_rois.size(0)",
                            "Call"
                        ],
                        [
                            "overlaps.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num_rois)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_176": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "3d-tracking/lib/model/rpn/rpn.py": {
        "torch": {
            "Conv2d_28": {
                "variable": {
                    "value": "self.RPN_Conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.din",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.RPN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_score_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.RPN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_bbox_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "rpn_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.RPN_Conv(base_feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "rpn_cls_prob_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reshape(rpn_cls_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_94": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_95": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_97": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_98": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/model/utils/net_utils.py": {
        "torch": {
            "sqrt_44": {
                "variable": {
                    "value": "totalnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "totalnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.sqrt(totalnorm).item()",
                            "Call"
                        ],
                        [
                            "totalnorm + modulenorm ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_76": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_161": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "affine_grid_128": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_131": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_132": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(crops, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_134": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_137": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_78": {
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/lib/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/loader/dataset.py": {
        "torch": {
            "from_numpy_286": {
                "ndarray": {
                    "value": "rois_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bh.get_box2d_array(predictions).astype(float)",
                            "Call"
                        ],
                        [
                            "rois_gt.copy()",
                            "Call"
                        ],
                        [
                            "np.vstack([rois_pd, np.zeros([self.n_box_limit, 5])])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_287": {
                "ndarray": {
                    "value": "rois_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bh.get_box2d_array(labels).astype(float)",
                            "Call"
                        ],
                        [
                            "np.vstack([rois_gt, np.zeros([self.n_box_limit, 5])])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_288": {
                "ndarray": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bh.get_label_array(labels, ['box3d', 'dimension'], (0, 3)).astype(float)",
                            "Call"
                        ],
                        [
                            "np.vstack([dim, np.zeros([self.n_box_limit, 3])])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_289": {
                "ndarray": {
                    "value": "bin_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.n_box_limit, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_290": {
                "ndarray": {
                    "value": "bin_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.n_box_limit, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_291": {
                "ndarray": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bh.get_label_array(labels, ['box3d', 'alpha'], 0).astype(float)",
                            "Call"
                        ],
                        [
                            "np.hstack([alpha, np.zeros(self.n_box_limit)])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_292": {
                "ndarray": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.maximum(0, location[:, 2])",
                            "Call"
                        ],
                        [
                            "np.hstack([depth, np.zeros(self.n_box_limit)])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_293": {
                "ndarray": {
                    "value": "center_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([cenx, ceny], axis=1)",
                            "Call"
                        ],
                        [
                            "bh.get_cen_array(predictions)",
                            "Call"
                        ],
                        [
                            "np.vstack([center_pd, np.zeros([self.n_box_limit, 2])])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_294": {
                "ndarray": {
                    "value": "center_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_loc[:, :2] / proj_loc[:, 2:3]",
                            "BinOp"
                        ],
                        [
                            "np.vstack([center_gt, np.zeros([self.n_box_limit, 2])])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_295": {
                "ndarray": {
                    "value": "loc_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tu.point3dcoord(center_gt, depth, cam_calib, pose)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_296": {
                "ndarray": {
                    "value": "tid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bh.get_label_array(labels, ['id'], 0).astype(int)",
                            "Call"
                        ],
                        [
                            "np.hstack([tid, np.zeros(self.n_box_limit)])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_297": {
                "ndarray": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bh.get_label_array(labels, ['attributes', 'ignore'], 0).astype(int)",
                            "Call"
                        ],
                        [
                            "np.hstack([ignore, np.zeros(self.n_box_limit)])[:self.n_box_limit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_300": {
                "ndarray": {
                    "value": "cam_calib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(frame['intrinsics']['cali'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_301": {
                "ndarray": {
                    "value": "pose.rotation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_302": {
                "ndarray": {
                    "value": "pose.position",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_305": {
                "ndarray": {
                    "value": "img_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.rollaxis(img, 2, 0)",
                            "Call"
                        ],
                        [
                            "img_patch.astype(float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "(img_patch - self.mean) / self.std",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "3d-tracking/model/dla.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.base_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, channels[0], kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_158": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(stride, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "data.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(torch.cat(x, 1))",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + children[0]",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.root(x2, x1, *children)",
                            "Call"
                        ],
                        [
                            "self.tree2(x1, children=children)",
                            "Call"
                        ],
                        [
                            "self.base_layer(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'level{}'.format(i))(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_174": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/model/dla_up.py": {
        "torch": {
            "interpolate_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode=self.mode, align_corners=self.align_corners)",
                            "Call"
                        ],
                        [
                            "layers[0]",
                            "Subscript"
                        ],
                        [
                            "node(torch.cat([x, layers[i]], 1))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.dla_up(x[self.first_level:])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_dim * 2, out_dim, kernel_size=node_kernel, stride=1, padding=node_kernel // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c, out_dim, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "node_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "node_kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "[x, layers[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * f - 1 - f % 2) / (2.0 * f)",
                            "BinOp"
                        ],
                        [
                            "range(1, w.size(0))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/model/model.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channel, num_channel, kernel_size=3, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.rot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channel, num_channel, kernel_size=3, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.dep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channel, num_channel, kernel_size=3, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "n_pd_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, :, 4] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_det, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "cen",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_det, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "rois_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_det, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "rois_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "dim_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "dep_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "cen_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "loc_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "tid_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "bin_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "res_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "alpha_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_184": {
                "variable": {
                    "value": "divider1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orient_[:, 2:3] ** 2 + orient_[:, 3:4] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_189": {
                "variable": {
                    "value": "divider2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orient_[:, 6:7] ** 2 + orient_[:, 7:8] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[orient_[:, 0:2], b1sin, b1cos, orient_[:, 4:6], b2sin, b2cos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "loc_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loc_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "image.new_zeros(1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(loc_pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/model/model_cen.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channel, num_channel, kernel_size=3, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.rot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channel, num_channel, kernel_size=3, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.dep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channel, num_channel, kernel_size=3, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.cen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channel, num_channel, kernel_size=3, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "n_pd_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, :, 4] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_det, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "cen_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_det, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "rois_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_det, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "rois_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "dim_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "dep_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "cen_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "loc_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "tid_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "bin_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "res_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "alpha_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_200": {
                "variable": {
                    "value": "divider1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orient_[:, 2:3] ** 2 + orient_[:, 3:4] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_205": {
                "variable": {
                    "value": "divider2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orient_[:, 6:7] ** 2 + orient_[:, 7:8] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[orient_[:, 0:2], b1sin, b1cos, orient_[:, 4:6], b2sin, b2cos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "loc_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loc_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "image.new_zeros(1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(loc_pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.channels[int(np.log2(down_ratio))]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/model/motion_model.py": {
        "torch": {
            "zeros_21": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, loc_dim, loc_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.pred2loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.Q_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.R_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_38": {
                "variable": {
                    "value": "self.pred_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_44": {
                "variable": {
                    "value": "self.Q_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_50": {
                "variable": {
                    "value": "self.R_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_89": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Q_noise(q_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_126": {
                "variable": {
                    "value": "R_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.R_noise(r_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "R_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_136": {
                "variable": {
                    "value": "inv_S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inv_S_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_140": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P.detach().to(R_)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(inv_S_).view(B, self.loc_dim, self.loc_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.loc2feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.pred2loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.vel2feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "loc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_199": {
                "variable": {
                    "value": "self.pred_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_206": {
                "variable": {
                    "value": "self.refine_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2 * feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc_embed, obs_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(P_, inv_S)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_.view(B, self.loc_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_146": {
                "n": {
                    "value": "self.loc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_148": {
                "input": {
                    "value": "P_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P.detach().to(R_)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "I_KH.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(R_l).view(B, self.loc_dim, self.loc_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_93": {
                "input": {
                    "value": "Q[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_133": {
                "input": {
                    "value": "R_[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_134": {
                "input": {
                    "value": "P_[i] + R_l[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/model/tracker_3d.py": {
        "torch": {
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoint/803_kitti_300_linear.pth'",
                            "str"
                        ],
                        [
                            "'./checkpoint/723_linear.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/model/tracker_model.py": {
        "torch": {
            "no_grad_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_239": {
                "ndarray": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_240": {
                "ndarray": {
                    "value": "coord3d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "np.array(self.history)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "ndarray": {
                    "value": "np.array(self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_327": {
                "ndarray": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "ndarray": {
                    "value": "coord3d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_344": {
                "ndarray": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/mono_3d_estimation.py": {
        "torch": {
            "device_107": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_418": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(args.json_path, 'test', args.data_split, args.set == 'kitti', args.percent, args.is_tracking, args.is_normalizing, args.n_box_limit)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_528": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(args.arch, args.roi_name, args.down_ratio, args.roi_kernel)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_245": {
                "variable": {
                    "value": "loss_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses_[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_246": {
                "variable": {
                    "value": "loss_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses_[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_247": {
                "variable": {
                    "value": "loss_dep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses_[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_248": {
                "variable": {
                    "value": "loss_cen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses_[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_461": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool2d(box_output['feat'], (7, 7)).view(-1, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_num_threads_515": {
                "int": {
                    "value": "multiprocessing.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "dataset": {
                    "value": "Dataset(args.json_path, phase, phase, args.set == 'kitti', args.percent, args.is_tracking, args.is_normalizing, args.n_box_limit)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_462": {
                "input": {
                    "value": "box_output['feat']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "3d-tracking/motion_lstm.py": {
        "torch": {
            "device_120": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_359": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dataset_384": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_args()",
                            "Call"
                        ],
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "**kwds": {
                    "value": "paths[:dsize]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_389": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(args, paths[:dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[part * dsize:part * dsize + dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[:dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[part * dsize:part * dsize + dsize])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dataset_573": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_args()",
                            "Call"
                        ],
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "**kwds": {
                    "value": "paths[:dsize]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_578": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(args, paths[:dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[part * dsize:part * dsize + dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[:dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[part * dsize:part * dsize + dsize])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_num_threads_784": {
                "int": {
                    "value": "multiprocessing.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_643": {
                "variable": {
                    "value": "loc_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loc_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_preds, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_preds, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "loc_refines",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loc_refines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_refines, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_refines, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dataset_768": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_args()",
                            "Call"
                        ],
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "**kwds": {
                    "value": "paths[part * dsize:part * dsize + dsize]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_774": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(args, paths[:dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[part * dsize:part * dsize + dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[:dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[part * dsize:part * dsize + dsize])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "ndarray": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[1] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "feat[:-1]",
                            "Subscript"
                        ],
                        [
                            "np.vstack([feat, np.zeros([seq_len, 128])])[:seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_249": {
                "ndarray": {
                    "value": "objs_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([tu.point3dcoord(cen_gt[i], depth_gt[i], cam_calib[i], pose[i]) for i in range(len(depth_gt))]).reshape(-1, 3)",
                            "Call"
                        ],
                        [
                            "np.vstack([objs_gt, np.zeros([self.seq_len, 3])])[:self.seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "objs_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([tu.point3dcoord(cen_pd[i], depth_pd[i], cam_calib[i], pose[i]) for i in range(len(depth_pd))]).reshape(-1, 3)",
                            "Call"
                        ],
                        [
                            "np.vstack([objs_pd, np.zeros([self.seq_len, 3])])[:self.seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_251": {
                "ndarray": {
                    "value": "depth_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[6] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "depth_gt[1:]",
                            "Subscript"
                        ],
                        [
                            "np.hstack([depth_gt, np.zeros([seq_len])])[:seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "ndarray": {
                    "value": "depth_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[2] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "depth_pd[:-1]",
                            "Subscript"
                        ],
                        [
                            "np.hstack([depth_pd, np.zeros([seq_len])])[:seq_len]",
                            "Subscript"
                        ],
                        [
                            "frame['depth_pd'][idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_253": {
                "ndarray": {
                    "value": "alpha_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[7] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "alpha_gt[1:]",
                            "Subscript"
                        ],
                        [
                            "np.hstack([alpha_gt, np.zeros([seq_len])])[:seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_254": {
                "ndarray": {
                    "value": "alpha_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[3] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "alpha_pd[:-1]",
                            "Subscript"
                        ],
                        [
                            "np.hstack([alpha_pd, np.zeros([seq_len])])[:seq_len]",
                            "Subscript"
                        ],
                        [
                            "frame['alpha_pd'][idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_255": {
                "ndarray": {
                    "value": "dim_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[8] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "dim_gt[1:]",
                            "Subscript"
                        ],
                        [
                            "np.vstack([dim_gt, np.zeros([seq_len, 3])])[:seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "dim_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[4] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "dim_pd[:-1]",
                            "Subscript"
                        ],
                        [
                            "np.vstack([dim_pd, np.zeros([seq_len, 3])])[:seq_len]",
                            "Subscript"
                        ],
                        [
                            "frame['dim_pd'][idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_257": {
                "ndarray": {
                    "value": "cen_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[9] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "cen_gt[1:]",
                            "Subscript"
                        ],
                        [
                            "np.vstack([cen_gt, np.zeros([seq_len, 2])])[:seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_258": {
                "ndarray": {
                    "value": "cen_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[5] for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "cen_pd[:-1]",
                            "Subscript"
                        ],
                        [
                            "np.vstack([cen_pd, np.zeros([seq_len, 2])])[:seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_259": {
                "ndarray": {
                    "value": "cam_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([fr[12].flatten() for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "cam_rot[1:]",
                            "Subscript"
                        ],
                        [
                            "np.vstack([cam_rot, np.zeros([seq_len, 3])])[:seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_260": {
                "ndarray": {
                    "value": "cam_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['cam_loc'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['cam_loc'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.array([fr[11].flatten() for fr in data_seq])",
                            "Call"
                        ],
                        [
                            "cam_loc[1:]",
                            "Subscript"
                        ],
                        [
                            "np.vstack([cam_loc, np.zeros([seq_len, 3])])[:seq_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_261": {
                "ndarray": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_446": {
                "variable": {
                    "value": "loc_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loc_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_preds, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_preds, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "loc_refines",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loc_refines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_refines, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_refines, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dataset_534": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_args()",
                            "Call"
                        ],
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "**kwds": {
                    "value": "paths[part * dsize:part * dsize + dsize]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_541": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(args, paths[:dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[part * dsize:part * dsize + dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[:dsize])",
                            "Call"
                        ],
                        [
                            "Dataset(args, paths[part * dsize:part * dsize + dsize])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "vel_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vel_history[1:], (loc_obs[:, i] - loc_refine).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_433": {
                "variable": {
                    "value": "vel_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vel_history[1:], (loc_obs[:, i + 1] - loc_pred).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__478": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_519": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': model.state_dict(), 'session': args.session}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt_path.format(args.session, args.set, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_658": {
                "input": {
                    "value": "loc_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_preds, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_preds, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_gt * valid_mask.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_659": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_660": {
                "input": {
                    "value": "loc_refines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_refines, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_refines, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_gt * valid_mask.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_662": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_664": {
                "input": {
                    "value": "loc_preds_kf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "valid_mask.new(loc_preds_kf).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds_kf * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_gt * valid_mask.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_665": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_666": {
                "input": {
                    "value": "loc_refines_kf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "valid_mask.new(loc_refines_kf).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines_kf * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_gt * valid_mask.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_668": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_455": {
                "input": {
                    "value": "loc_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_preds, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_preds, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_preds * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_gt * valid_mask.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_457": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_459": {
                "input": {
                    "value": "loc_refines",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_refines, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loc_refines, dim=1).view(valid_mask.shape[0], -1, 3)",
                            "Call"
                        ],
                        [
                            "loc_refines * valid_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_gt * valid_mask.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_461": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_686": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_688": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_690": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_692": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_695": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_697": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_699": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_701": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_484": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_486": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_488": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_490": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "traj_out['valid_mask'].to(args.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(seq_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "3d-tracking/utils/network_utils.py": {
        "torch": {
            "cross_entropy_30": {
                "variable": {
                    "value": "loss_bin1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_bin[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_31": {
                "variable": {
                    "value": "loss_bin2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, 4:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_bin[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "variable": {
                    "value": "loss_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_bin1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(output[:, 0:2], target_bin[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_151": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(state['save_path'], '{}_gta_checkpoint_latest.pth.tar'.format(session))",
                            "Call"
                        ],
                        [
                            "ckpt_path.replace('gta', 'kitti')",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_13": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l1_loss_17": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l1_loss_21": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_35": {
                "variable": {
                    "value": "valid_output1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx1.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_36": {
                "variable": {
                    "value": "valid_target_res1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_res",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx1.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_37": {
                "variable": {
                    "value": "loss_sin1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_output1[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.sin(valid_target_res1[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_39": {
                "variable": {
                    "value": "loss_cos1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_output1[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.cos(valid_target_res1[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_44": {
                "variable": {
                    "value": "valid_output2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_45": {
                "variable": {
                    "value": "valid_target_res2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_res",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_46": {
                "variable": {
                    "value": "loss_sin2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_output2[:, 6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.sin(valid_target_res2[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_48": {
                "variable": {
                    "value": "loss_cos2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_output2[:, 7]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.cos(valid_target_res2[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_181": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(state['save_path'], '{}_gta_checkpoint_latest.pth.tar'.format(session))",
                            "Call"
                        ],
                        [
                            "ckpt_path.replace('gta', 'kitti')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_68": {
                "input": {
                    "value": "1.0 - F.cosine_similarity(past_motion, curr_motion)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_69": {
                "input": {
                    "value": "past_motion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(outputs[:, idx - 1] - outputs[:, idx - 2]) * motion_mask",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "curr_motion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(outputs[:, idx] - outputs[:, idx - 1]) * motion_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_70": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_38": {
                "input": {
                    "value": "valid_target_res1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_40": {
                "input": {
                    "value": "valid_target_res1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_47": {
                "input": {
                    "value": "valid_target_res2[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_49": {
                "input": {
                    "value": "valid_target_res2[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cosine_similarity_68": {
                "x1": {
                    "value": "past_motion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(outputs[:, idx - 1] - outputs[:, idx - 2]) * motion_mask",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "curr_motion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(outputs[:, idx] - outputs[:, idx - 1]) * motion_mask",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "faster-rcnn.pytorch/demo.py": {
        "torch": {
            "load_194": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_196": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_277": {
                "variable": {
                    "value": "im_data_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_blob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blobs",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_279": {
                "variable": {
                    "value": "im_info_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[im_blob.shape[1], im_blob.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_343": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_347": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/faster_rcnn/faster_rcnn.py": {
        "torch": {
            "softmax_106": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_91": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_95": {
                "variable": {
                    "value": "center_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_pred.view(center_pred.size(0), int(center_pred.size(1) / 2), 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_114": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "l1_loss_121": {
                "variable": {
                    "value": "RCNN_loss_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RCNN_center_pred(pooled_feat) / 100",
                            "BinOp"
                        ],
                        [
                            "center_pred_select.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fixed_center_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(fixed_center_target.view(-1, fixed_center_target.size(2)))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "unsqueeze_127": {
                "variable": {
                    "value": "rpn_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_loss_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.unsqueeze(rpn_loss_cls, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "rpn_loss_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_loss_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.unsqueeze(rpn_loss_bbox, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RCNN_loss_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "F.cross_entropy(cls_score, rois_label)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(RCNN_loss_cls, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "RCNN_loss_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RCNN_loss_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "_smooth_l1_loss(bbox_pred, rois_target, rois_inside_ws, rois_outside_ws)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(RCNN_loss_bbox, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "RCNN_loss_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RCNN_loss_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "F.l1_loss(center_pred, fixed_center_target)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(RCNN_loss_center, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/faster_rcnn/resnet.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_114": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_122": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.RCNN_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "self.RCNN_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_238": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.RCNN_center_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.RCNN_center_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/faster_rcnn/vgg16.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.RCNN_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/roi_layers/__init__.py": {
        "torch": {}
    },
    "faster-rcnn.pytorch/lib/model/roi_layers/roi_align.py": {
        "torch": {}
    },
    "faster-rcnn.pytorch/lib/model/roi_layers/roi_pool.py": {
        "torch": {}
    },
    "faster-rcnn.pytorch/lib/model/rpn/anchor_target_layer.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(anchor_scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_93": {
                "variable": {
                    "value": "inds_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_107": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_108": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_114": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "sum_fg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "sum_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_246": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_249": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_134": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_154": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_164": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_150": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/rpn/bbox_transform.py": {
        "torch": {
            "log_27": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_28": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.view(1, -1).expand_as(gt_widths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_54": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.view(1, -1).expand_as(gt_heights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_70": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_71": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_94": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 2::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_95": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 3::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_183": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_184": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_187": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_188": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_230": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_231": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_234": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_235": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_274": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_275": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_278": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_279": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/rpn/proposal_layer.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_121": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/rpn/proposal_target_layer_cascade.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "all_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_rois, gt_boxes_append]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(all_rois, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_98": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss[b] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "[ex_x_offset, ex_y_offset]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_166": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps[i] >= cfg.TRAIN.FG_THRESH",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_172": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(max_overlaps[i] < cfg.TRAIN.BG_THRESH_HI) & (max_overlaps[i] >= cfg.TRAIN.BG_THRESH_LO)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_151": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_batch.size(0)",
                            "Call"
                        ],
                        [
                            "overlaps.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num_rois)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_220": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/rpn/rpn.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.RPN_Conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.din",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.RPN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_score_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.RPN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_bbox_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "rpn_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.RPN_Conv(base_feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "rpn_cls_prob_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reshape(rpn_cls_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_98": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_100": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_102": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/model/utils/net_utils.py": {
        "torch": {
            "sqrt_46": {
                "variable": {
                    "value": "totalnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "totalnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.sqrt(totalnorm).item()",
                            "Call"
                        ],
                        [
                            "totalnorm + modulenorm ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_91": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_181": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "affine_grid_144": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_149": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_150": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(crops, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_152": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_157": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_93": {
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/roi_data_layer/roibatchLoader.py": {
        "torch": {
            "Tensor_36": {
                "variable": {
                    "value": "self.ratio_list_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['gt_boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['center']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_204": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_keep == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "permute_226": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['gt_boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_231": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['center']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_234": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_95": {
                "input": {
                    "value": "gt_boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_96": {
                "input": {
                    "value": "gt_boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_133": {
                "input": {
                    "value": "gt_boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_134": {
                "input": {
                    "value": "gt_boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/lib/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/test_net.py": {
        "torch": {
            "load_222": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, 1, imdb.num_classes, training=False, normalize=False, vis=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_349": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_353": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_362": {
                "variable": {
                    "value": "cls_dets_with_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_centers, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_367": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cls_dets.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn.pytorch/trainval_net.py": {
        "torch": {
            "DataLoader_341": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, args.batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler(train_size, args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_126": {
                "variable": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_311": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_322": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_336": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg16(imdb.classes, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "resnet(imdb.classes, 101, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "resnet(imdb.classes, 50, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "resnet(imdb.classes, 152, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_129": {
                "variable": {
                    "value": "self.leftover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_per_batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(roidb)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_142": {
                "variable": {
                    "value": "self.rand_num_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.rand_num_view, self.leftover)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_314": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_134": {
                "n": {
                    "value": "self.num_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_403": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_411": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}