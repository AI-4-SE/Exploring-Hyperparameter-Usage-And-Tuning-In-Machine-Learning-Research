{
    "evaluation.py": {
        "torch": {
            "Upsample_40": {
                "variable": {
                    "value": "interpolate_bicubic_fullsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "original_image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[480, 640]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_41": {
                "variable": {
                    "value": "interpolate_bicubic_inputsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "input_image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[288, 384]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "network_model.create_model(args.backbone).half()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "model_path + '/' + model_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "networks/model.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.convA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.convB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_19": {
                "variable": {
                    "value": "x_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(2) * 2, x.size(3) * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv_d32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels_d32_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4320",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels_d32_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_scale",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels_d32_out // 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/pnasnet.py": {
        "torch": {
            "MaxPool2d_38": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if is_reduction else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.depthwise_conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "dw_kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "dw_stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "dw_padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.pointwise_conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn_sep_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "middle_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels if stem_cell else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn_sep_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if is_reduction else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.path_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('avgpool', nn.AvgPool2d(1, stride=2, count_include_pad=False)), ('conv', nn.Conv2d(in_channels, out_channels // 2, kernel_size=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.path_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('pad', nn.ZeroPad2d((0, 1, 0, 1))), ('avgpool', nn.AvgPool2d(1, stride=2, count_include_pad=False)), ('conv', nn.Conv2d(in_channels, out_channels // 2, kernel_size=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "variable": {
                    "value": "self.final_path_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_0, x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.comb_iter_0_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('max_pool', MaxPool(3, stride=2)), ('conv', nn.Conv2d(in_channels_left, out_channels_left, kernel_size=1, bias=False)), ('bn', nn.BatchNorm2d(out_channels_left, eps=0.001))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(3, 96, kernel_size=3, stride=2, bias=False, padding=1)), ('bn', nn.BatchNorm2d(96, eps=0.001))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_335": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_336": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_337": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "variable": {
                    "value": "self.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1001",
                            "MethodArgument"
                        ],
                        [
                            "1001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_423": {
                "variable": {
                    "value": "new_last_linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.last_linear.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_37": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPad2d_74": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "[x_path1, x_path2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_123": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ZeroPad2d_128": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_129": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "in_channels_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "out_channels_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_296": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_297": {
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "prediction.py": {
        "torch": {
            "Upsample_36": {
                "variable": {
                    "value": "interpolate_bicubic_fullsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "original_image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[480, 640]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_37": {
                "variable": {
                    "value": "interpolate_bicubic_inputsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "input_image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[288, 384]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "network_model.create_model(args.backbone).half()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "model_path + '/' + model_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Upsample_48": {
                "variable": {
                    "value": "interpolate_bicubic_fullsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "original_image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[480, 640]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_105": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network_model.create_model(args.backbone, args.decoder_scale)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_image_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input_image_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'model/epoch01_iter00000.pth'",
                            "Constant"
                        ],
                        [
                            "model_path + '/model/epoch' + str(0 + 1).zfill(2) + '_iter' + str(0).zfill(5) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "model_path + '/model/epoch' + str(epoch + 1).zfill(2) + '_iter' + str(i).zfill(5) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_117": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'model/epoch01_iter00000.pth'",
                            "Constant"
                        ],
                        [
                            "model_path + '/model/epoch' + str(0 + 1).zfill(2) + '_iter' + str(0).zfill(5) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "model_path + '/model/epoch' + str(epoch + 1).zfill(2) + '_iter' + str(i).zfill(5) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'model/epoch01_iter00000.pth'",
                            "Constant"
                        ],
                        [
                            "model_path + '/model/epoch' + str(0 + 1).zfill(2) + '_iter' + str(0).zfill(5) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "model_path + '/model/epoch' + str(epoch + 1).zfill(2) + '_iter' + str(i).zfill(5) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/data.py": {
        "torch": {
            "from_numpy_127": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/get_data.py": {
        "torch": {
            "DataLoader_45": {
                "dataset": {
                    "value": "transformed_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transforms.Compose([Scale(288), RandomHorizontalFlip(), RandomRotate(5), ToTensor_with_RandomZoom(ratio=1.0), Lighting(0.1, __imagenet_pca['eigval'], __imagenet_pca['eigvec']), ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4), Normalize(__imagenet_stats['mean'], __imagenet_stats['std'])])",
                            "Call"
                        ],
                        [
                            "depthDatasetMemoryTrain(data, train, transform=transformed_training)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "dataset": {
                    "value": "transformed_testing",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depthDatasetMemoryTrain(data, test, transform=autransformed_testing)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "tensor_13": {
                "variable": {
                    "value": "kernel_dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_dx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((channel, 1, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel_dx, device=img.device).float()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_14": {
                "variable": {
                    "value": "img2kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pad(img, pad=(0, 1, 0, 0), mode='replicate')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel_dx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((channel, 1, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel_dx, device=img.device).float()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "kernel_dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel_dy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((channel, 1, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel_dy, device=img.device).float()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "variable": {
                    "value": "img2kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pad(img, pad=(0, 0, 0, 1), mode='replicate')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel_dy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((channel, 1, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel_dy, device=img.device).float()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_32": {
                "variable": {
                    "value": "loss_l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pred - gt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_47": {
                "variable": {
                    "value": "norm_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_loss_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - inner_gt_pred / (torch.pow(inner_pred, 0.5) * torch.pow(inner_gt, 0.5) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_61": {
                "input": {
                    "value": "pred - gt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_62": {
                "input": {
                    "value": "torch.log(pred) - torch.log(gt)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "l_abs_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pred - gt) / gt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "l_sqr_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(torch.abs(pred - gt), 2) / gt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "l_log10",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.log10(pred) - torch.log10(gt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_67": {
                "variable": {
                    "value": "error_for_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.log(pred / gt))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_72": {
                "variable": {
                    "value": "l_metric3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_rmse * l_abs_rel * l_delta1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_73": {
                "variable": {
                    "value": "l_metric8",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_rmse * l_rmse_log * l_abs_rel * l_sqr_rel * l_log10 * l_delta1 * l_delta2 * l_delta3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_110": {
                "variable": {
                    "value": "img_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_115": {
                "variable": {
                    "value": "img_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(range, range, range, range)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_116": {
                "variable": {
                    "value": "img_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_padded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(img, padding, mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * range + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_14": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_26": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_32": {
                "input": {
                    "value": "pred - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_61": {
                "input": {
                    "value": "torch.pow(pred - gt, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_62": {
                "input": {
                    "value": "torch.pow(torch.log(pred) - torch.log(gt), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_65": {
                "input": {
                    "value": "torch.log10(pred) - torch.log10(gt)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "torch.log(pred / gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_68": {
                "input": {
                    "value": "torch.le(error_for_delta, 1.25 ** 1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "torch.le(error_for_delta, 1.25 ** 2).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_70": {
                "input": {
                    "value": "torch.le(error_for_delta, 1.25 ** 3).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_63": {
                "input": {
                    "value": "pred - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_64": {
                "input": {
                    "value": "torch.abs(pred - gt)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "pred / gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "le_68": {
                "input": {
                    "value": "error_for_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.abs(torch.log(pred / gt)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.25 ** 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "le_69": {
                "input": {
                    "value": "error_for_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.abs(torch.log(pred / gt)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.25 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "le_70": {
                "input": {
                    "value": "error_for_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.abs(torch.log(pred / gt)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.25 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "pred - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log10_65": {
                "input": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_46": {
                "input": {
                    "value": "inner_gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_dx[:, :, 0:height, 0:width] * gt_dx[:, :, 0:height, 0:width] + gt_dy[:, :, 0:height, 0:width] * gt_dy[:, :, 0:height, 0:width] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_62": {
                "input": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/multi_loss.py": {
        "torch": {
            "Upsample_90": {
                "variable": {
                    "value": "interpolate_bicubic_div02",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_91": {
                "variable": {
                    "value": "interpolate_bicubic_div04",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_92": {
                "variable": {
                    "value": "interpolate_bicubic_div08",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_93": {
                "variable": {
                    "value": "interpolate_bicubic_div16",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_94": {
                "variable": {
                    "value": "interpolate_bicubic_div32",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_95": {
                "variable": {
                    "value": "interpolate_bicubic_1by1",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "invalid_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_gt_for_loss.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "l_custom",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "current_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_gt_for_loss.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_138": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_251": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transform.py": {
        "torch": {
            "randperm_101": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "prod_60": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.data.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_62": {
                "input": {
                    "value": "torch.LongTensor(list(output.size())[2:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_65": {
                "input": {
                    "value": "torch.LongTensor(list(output.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}