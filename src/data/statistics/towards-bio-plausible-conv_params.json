{
    "datasets.py": {
        "torch": {
            "DataLoader_209": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dataset(root='./data', train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "full_train_class(n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SubsetDeterministicSampler(indices[split_size:])",
                            "Call"
                        ],
                        [
                            "SequentialSampler(full_train_set)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_222": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "mean / n_iter",
                            "BinOp"
                        ],
                        [
                            "mean + data[0].mean(dim=(0, 2, 3)) * data[0].shape[0]",
                            "BinOp"
                        ],
                        [
                            "data[0].mean(dim=(0, 2, 3)) * data[0].shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_283": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_class(indices[split_size:], n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "full_train_class(n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "MultiplePointImageFolder(n_repetitions, train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(train_set, [len(train_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_285": {
                "variable": {
                    "value": "validation_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "val_class(indices[:split_size], root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torch_dataset(root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(validation_set, [len(validation_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[1]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_287": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dataset(root='data', train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(val_dir, transforms_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_366": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_class(indices[split_size:], n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "full_train_class(n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "MultiplePointImageFolder(n_repetitions, train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(train_set, [len(train_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DistributedSampler(train_set, num_replicas=world_size, rank=rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_set, num_replicas=world_size, rank=rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_369": {
                "variable": {
                    "value": "validation_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "val_class(indices[:split_size], root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torch_dataset(root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(validation_set, [len(validation_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[1]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DistributedSampler(validation_set, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(validation_set, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "valid_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_372": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dataset(root='data', train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(val_dir, transforms_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DistributedSampler(test_set, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(test_set, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "test_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_207": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "full_train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dataset(root='./data', train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "full_train_class(n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_270": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_class(indices[split_size:], n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "full_train_class(n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "MultiplePointImageFolder(n_repetitions, train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(train_set, [len(train_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_271": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "val_class(indices[:split_size], root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torch_dataset(root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(validation_set, [len(validation_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_272": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dataset(root='data', train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(val_dir, transforms_test)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_class(indices[split_size:], n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "full_train_class(n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "MultiplePointImageFolder(n_repetitions, train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(train_set, [len(train_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DistributedSampler(train_set, num_replicas=world_size, rank=rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_set, num_replicas=world_size, rank=rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "validation_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "val_class(indices[:split_size], root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torch_dataset(root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(validation_set, [len(validation_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[1]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DistributedSampler(validation_set, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(validation_set, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dataset(root='data', train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(val_dir, transforms_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DistributedSampler(test_set, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(test_set, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_358": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_class(indices[split_size:], n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "full_train_class(n_repetitions, root='data', train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "MultiplePointImageFolder(n_repetitions, train_dir, transforms_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(train_set, [len(train_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_359": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "val_class(indices[:split_size], root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torch_dataset(root='data', train=True, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transforms_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(validation_set, [len(validation_set) - validation_size, validation_size], generator=torch.Generator().manual_seed(train_validation_split_seed))[1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_360": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dataset(root='data', train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(val_dir, transforms_test)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Generator_39": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_41": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.subset_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_23": {
                "start": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Generator_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_352": {
                "seed": {
                    "value": "train_validation_split_seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Generator_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_355": {
                "seed": {
                    "value": "train_validation_split_seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments.py": {
        "torch": {
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_83": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer_class(net.parameters(), **optimizer_arguments_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_116": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks/locally_connected_utils.py": {
        "torch": {
            "Parameter_58": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "weight_std * torch.randn(in_channels // groups, out_channels, self.out_size[0], self.out_size[1], self.kernel_size, self.kernel_size)",
                            "BinOp"
                        ],
                        [
                            "weight_std / np.sqrt(1.0 + conv_deviation_eps ** 2) * (channel_init_weight[:, :, None, None, :, :] + conv_deviation_eps * torch.randn(in_channels // groups, out_channels, self.out_size[0], self.out_size[1], self.kernel_size, self.kernel_size))",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConstantPad2d_60": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgihwkc,igjhwkc->bgjhw",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.padding(x)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, self.kernel_size, self.stride).unfold(3, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], self.groups, self.in_channels // self.groups, x.shape[2], x.shape[3], x.shape[4], x.shape[5])",
                            "Call"
                        ],
                        [
                            "self.padding(x)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, self.kernel_size, self.stride).unfold(3, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], self.groups, self.in_channels // self.groups, x.shape[2], x.shape[3], x.shape[4], x.shape[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_107": {
                "variable": {
                    "value": "weights_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights_combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_non_padded_weights()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-4, -3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "std_108": {
                "variable": {
                    "value": "weights_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights_combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_non_padded_weights()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-4, -3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "channel_init_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_channels).uniform_(-bias_std, bias_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgihwkc,igjhwkc->bgjhw",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.padding(x)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, self.kernel_size, self.stride).unfold(3, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], self.groups, self.in_channels // self.groups, x.shape[2], x.shape[3], x.shape[4], x.shape[5])",
                            "Call"
                        ],
                        [
                            "self.padding(x)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, self.kernel_size, self.stride).unfold(3, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], self.groups, self.in_channels // self.groups, x.shape[2], x.shape[3], x.shape[4], x.shape[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_138": {
                "input": {
                    "value": "z_non_padded",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "z_sum[:, :, self.left_border_h:self.right_border_h, self.left_border_w:self.right_border_w]",
                            "Subscript"
                        ],
                        [
                            "torch.kron(torch.ones(1, 1, full_size // dilation_size, full_size // dilation_size, device=z.device), z_non_padded_sum)[:, :, :z_non_padded.shape[-1], :z_non_padded.shape[-1]]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.ones(self.out_channels, 1, full_size // dilation_size, full_size // dilation_size, device=z.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "(full_size - z_non_padded.shape[-1], full_size - z_non_padded.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kron_147": {
                "input": {
                    "value": "torch.ones(1, 1, full_size // dilation_size, full_size // dilation_size, device=z.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z_non_padded_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.conv2d(z_non_padded, torch.ones(self.out_channels, 1, full_size // dilation_size, full_size // dilation_size, device=z.device), bias=None, dilation=dilation_size, padding=(full_size - z_non_padded.shape[-1], full_size - z_non_padded.shape[-1]), groups=self.out_channels)[:, :, full_size - z_non_padded.shape[-1]:, full_size - z_non_padded.shape[-1]:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "in_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.out_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_122": {
                "equation": {
                    "value": "boihwkg,bohw->iohwkg",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.padding(x)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, self.kernel_size, self.stride).unfold(3, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], self.groups, self.in_channels // self.groups, x.shape[2], x.shape[3], x.shape[4], x.shape[5])",
                            "Call"
                        ],
                        [
                            "self.padding(x)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, self.kernel_size, self.stride).unfold(3, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], self.groups, self.in_channels // self.groups, x.shape[2], x.shape[3], x.shape[4], x.shape[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_139": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "full_size // dilation_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "full_size // dilation_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "full_size // dilation_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "full_size // dilation_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_49": {
                "*size": {
                    "value": "in_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.out_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.out_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "networks/network_utils.py": {
        "torch": {
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "networks/resnet.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_130": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_138": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base_width * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_195": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_233": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base_width * 4 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_290": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "unit_tests.py": {
        "torch": {
            "all_9": {
                "input": {
                    "value": "torch.isclose(x, y, atol=atol, rtol=rtol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isclose_9": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, in_ch, data_size[0], data_size[1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "atol": {
                    "value": "atol",
                    "type": "Variable",
                    "possible_values": []
                },
                "rtol": {
                    "value": "rtol",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channels_grid",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_channels_grid",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel_size_grid",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stride_grid",
                            "Name"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "groups_grid",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[False, True]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channels_grid",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "data_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_161": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradScaler_268": {
                "variable": {
                    "value": "grad_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((single_input.to(device, non_blocking=True) for single_input in data[:-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((labels for _ in range(len(data) - 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_285": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./checkpoint.pt'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_338": {
                "obj": {
                    "value": "{'epoch': n_epochs + 1, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./checkpoint.pt'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_172": {
                "enabled": {
                    "value": "with_amp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_322": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./checkpoint.pt'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_204": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "module.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "module.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "module.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_187": {
                "input": {
                    "value": "net_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_188": {
                "input": {
                    "value": "net_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_228": {
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_229": {
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "kron_206": {
                "input": {
                    "value": "torch.ones(1, 1, int(np.ceil(module.in_size[0] / module.kernel_size)), int(np.ceil(module.in_size[0] / module.kernel_size)), device=images.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(tuple((single_input.to(device, non_blocking=True) for single_input in data[:-1])), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.randn(128, module.in_channels, module.kernel_size, module.kernel_size, device=images.device)",
                            "Call"
                        ],
                        [
                            "torch.kron(torch.ones(1, 1, int(np.ceil(module.in_size[0] / module.kernel_size)), int(np.ceil(module.in_size[0] / module.kernel_size)), device=images.device), images)[:, :, :module.in_size[0], :module.in_size[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_206": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(np.ceil(module.in_size[0] / module.kernel_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(np.ceil(module.in_size[0] / module.kernel_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}