{
    "ap/models/cluster.py": {
        "sklearn": {
            "KMeans_27": {
                "variable": {
                    "value": "self.kmeans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2019",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_319": {
                "variable": {
                    "value": "self.pca",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "num_components",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ap/utils/dataset.py": {
        "sklearn": {
            "shuffle_121": {
                "variable": {
                    "value": "arrays_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "*arrays_list",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_186": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_208": {
                "*arrays_0": {
                    "value": "sampled_x",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "sampled_y",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/data_runner.py": {
        "torch": {
            "from_numpy_109": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(states).astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "hand_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(hand_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(dones).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "valids",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(valids).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(states).astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "hand_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(hand_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(states).astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "hand_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(hand_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "steps_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(steps_left)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "did_block_fall",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(did_block_fall)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/rl_runner.py": {
        "torch": {
            "from_numpy_161": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(states).astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "hand_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(hand_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(dones).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(states).astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "hand_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(hand_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(states).astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_200": {
                "variable": {
                    "value": "hand_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(hand_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_260": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_277": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(states).astype(float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "hand_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(hand_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_279": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_287": {
                "variable": {
                    "value": "did_block_fall",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(did_block_fall)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_298": {
                "variable": {
                    "value": "hand_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(hand_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/test_block_picking_planner.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/test_block_stacking_planner.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/test_brick_stacking_planner.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/test_np_block_picking_planner.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/test_np_block_stacking_planner.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/test_numpy_cylinder_env.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/test_numpy_env.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[i * 10, i * 10]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/test_play_planner.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/test_random_planner.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/test_ur5_robotiq.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_block_stacking.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_brick_stacking.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_house1.py": {
        "torch": {
            "tensor_32": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_32": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_42": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_54": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_60": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[1 + num_random_o][0], position[1 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_house_1_deconstruct.py": {
        "torch": {
            "nonzero_51": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_51": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_house_2.py": {
        "torch": {
            "tensor_31": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, positions[2 + num_random_o][0], positions[2 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, positions[1 + num_random_o][0], positions[1 + num_random_o][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_31": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, positions[2 + num_random_o][0], positions[2 + num_random_o][1], 0]",
                            "List"
                        ],
                        [
                            "[0, positions[1 + num_random_o][0], positions[1 + num_random_o][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_41": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_house_3.py": {
        "torch": {
            "tensor_66": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, position[2 + num_random_o][0], position[2 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, position[3 + num_random_o][0], position[3 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, position[3 + num_random_o][0], position[3 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, position[2 + num_random_o][0], position[2 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_122": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_126": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, position[3 + num_random_o][0], position[3 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, position[2 + num_random_o][0], position[2 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, position[2 + num_random_o][0], position[2 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_206": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, position[3 + num_random_o][0], position[3 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_210": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, position[3 + num_random_o][0], position[3 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_244": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_248": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, position[2 + num_random_o][0], position[2 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_262": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, position[0 + num_random_o][0], position[0 + num_random_o][1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_266": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_house_4.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_house_4_deconstruct.py": {
        "torch": {
            "nonzero_52": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_52": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_house_5.py": {
        "torch": {
            "tensor_30": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1][0], position[1][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[3][0], position[3][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[4][0], position[4][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_30": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1][0], position[1][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[3][0], position[3][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[4][0], position[4][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_36": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1][0], position[1][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[3][0], position[3][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[4][0], position[4][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_42": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1][0], position[1][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[3][0], position[3][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[4][0], position[4][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1][0], position[1][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[3][0], position[3][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[4][0], position[4][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_54": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1][0], position[1][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[3][0], position[3][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[4][0], position[4][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_60": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1][0], position[1][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[3][0], position[3][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[4][0], position[4][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "action",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[0][0], position[0][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[1][0], position[1][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[3][0], position[3][1], 0]",
                            "List"
                        ],
                        [
                            "[0, position[2][0], position[2][1], 0]",
                            "List"
                        ],
                        [
                            "[1, position[4][0], position[4][1], 0]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_72": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_improvise_house_2.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_improvise_house_3.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_improvise_house_3_deconstruct.py": {
        "torch": {
            "nonzero_51": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_51": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_improvise_house_4.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_improvise_house_4_deconstruct.py": {
        "torch": {
            "nonzero_51": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_51": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_random_pick.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_random_stack.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_bullet_save_file.py": {
        "torch": {}
    },
    "ap/helping_hands_rl_envs/tests/unittests/test_numpy_block_stacking.py": {
        "torch": {}
    },
    "ap/models/dqn/DQN.py": {
        "torch": {
            "SmoothL1Loss_41": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_76": {
                "variable": {
                    "value": "td_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qs - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "fc_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "fc_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "fc_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.loss(qs, target)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(weights * loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_82": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_166": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ap/models/dqn/DQNH.py": {
        "torch": {
            "abs_58": {
                "variable": {
                    "value": "td_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qs - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "m_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loss(mqs, m_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.loss(qs, target)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(weights * loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_65": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/models/dqn/expert/DQNX.py": {
        "torch": {
            "Adam_13": {
                "variable": {
                    "value": "self.fcn_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.fcn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "action_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pixel_x, pixel_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_76": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, obs)[torch.arange(0, batch_size), pixel[:, 0], pixel[:, 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "q",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.gamma ** rewards",
                            "BinOp"
                        ],
                        [
                            "rewards + self.gamma * q_prime * non_final_masks",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_83": {
                "variable": {
                    "value": "td_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_output - q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "plan[:, 2:3]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_106": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_109": {
                "variable": {
                    "value": "xy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_110": {
                "variable": {
                    "value": "rewards_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rewards",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_111": {
                "variable": {
                    "value": "next_states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_112": {
                "variable": {
                    "value": "next_obs_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_113": {
                "variable": {
                    "value": "dones_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_115": {
                "variable": {
                    "value": "step_lefts_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_lefts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(weights).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_131": {
                "obj": {
                    "value": "self.fcn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_fcn.pt'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "fcn_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path_pre + '_fcn.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_31": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "states.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_40": {
                "input": {
                    "value": "q_value_maps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fcn(obs)[torch.arange(0, states.size(0)), states.long()]",
                            "Subscript"
                        ],
                        [
                            "q_value_maps.cpu()",
                            "Call"
                        ],
                        [
                            "self.forwardFCN(states, obs, to_cpu=True)",
                            "Call"
                        ],
                        [
                            "q_value_maps + torch.randn_like(q_value_maps) * eps * coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_75": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "obs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_72": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "obs.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ap/models/dqn/expert/DQNXRot.py": {
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "affine_mats_before",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "affine_mats_before",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(affine_mats_before)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_48": {
                "variable": {
                    "value": "affine_mats_after",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "affine_mats_after",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(affine_mats_after)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_62": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs.to(self.device)",
                            "Call"
                        ],
                        [
                            "F.pad(obs, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "obs.unsqueeze(1).repeat(1, len(rotations[0]), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "obs.reshape(obs.size(0) * obs.size(1), obs.size(2), obs.size(3), obs.size(4))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_width, padding_width, padding_width, padding_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_69": {
                "variable": {
                    "value": "flow_grid_before",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine_mats_before",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(affine_mats_before)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "obs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_70": {
                "variable": {
                    "value": "rotated_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs.to(self.device)",
                            "Call"
                        ],
                        [
                            "F.pad(obs, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "obs.unsqueeze(1).repeat(1, len(rotations[0]), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "obs.reshape(obs.size(0) * obs.size(1), obs.size(2), obs.size(3), obs.size(4))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_mats_before, obs.size())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_74": {
                "variable": {
                    "value": "flow_grid_after",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine_mats_after",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(affine_mats_after)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_output.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_75": {
                "variable": {
                    "value": "unrotate_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fcn(rotated_obs)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid_after",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_mats_after, conv_output.size())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, rot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "action_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pixels, rot_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_108": {
                "variable": {
                    "value": "pixel_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((x - self.workspace[0][0]) / self.heightmap_resolution).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(pixel_x, 0, self.heightmap_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "self.heightmap_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "variable": {
                    "value": "pixel_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((y - self.workspace[1][0]) / self.heightmap_resolution).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(pixel_y, 0, self.heightmap_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "self.heightmap_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, rot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "action_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pixel_x, pixel_y, rot_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_142": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, obs, specific_rotations=action_idx[:, 2:3].cpu())[torch.arange(0, batch_size), 0, action_idx[:, 0], action_idx[:, 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "q",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.gamma ** step_lefts",
                            "BinOp"
                        ],
                        [
                            "s_rewards + self.gamma * q_prime * s_non_final_masks",
                            "BinOp"
                        ],
                        [
                            "torch.cat(qs)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_149": {
                "variable": {
                    "value": "td_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_output - q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "self.rotations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.pi / self.num_rotations * i for i in range(self.num_rotations)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.rotations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 * np.pi / self.num_rotations * i for i in range(self.num_rotations)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "affine_mat_before",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "affine_mat_before",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray([[np.cos(rotate_theta), np.sin(rotate_theta), 0], [-np.sin(rotate_theta), np.cos(rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_before).permute(2, 0, 1).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_38": {
                "variable": {
                    "value": "affine_mat_before",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "affine_mat_after",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "affine_mat_after",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray([[np.cos(-rotate_theta), np.sin(-rotate_theta), 0], [-np.sin(-rotate_theta), np.cos(-rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat_after).permute(2, 0, 1).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_44": {
                "variable": {
                    "value": "affine_mat_after",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_80": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "states.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_89": {
                "input": {
                    "value": "q_value_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, obs, to_cpu=True)",
                            "Call"
                        ],
                        [
                            "q_value_maps + torch.randn_like(q_value_maps) * eps * coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_141": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "states.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ap/models/dqn/expert/DQNXRotInHand.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "self.empty_in_hand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.patch_size, self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "self.his",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_processes, 1, self.patch_size, self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_28": {
                "variable": {
                    "value": "affine_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "variable": {
                    "value": "affine_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "affine_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(affine_mat, transition_scaled.unsqueeze(2).float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_32": {
                "variable": {
                    "value": "flow_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.eye(2).unsqueeze(0).expand(batch_size, -1, -1).float()",
                            "Call"
                        ],
                        [
                            "affine_mat.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat((affine_mat, transition_scaled.unsqueeze(2).float()), dim=2)",
                            "Call"
                        ],
                        [
                            "np.asarray([[np.cos(rotate_theta), np.sin(rotate_theta), 0], [-np.sin(rotate_theta), np.cos(rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat).permute(2, 0, 1).float().to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "obs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_33": {
                "variable": {
                    "value": "transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs.to(self.device)",
                            "Call"
                        ],
                        [
                            "F.pad(obs, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "obs.unsqueeze(1).repeat(1, len(rotations[0]), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "obs.reshape(obs.size(0) * obs.size(1), obs.size(2), obs.size(3), obs.size(4))",
                            "Call"
                        ],
                        [
                            "obs.to(self.device)",
                            "Call"
                        ],
                        [
                            "obs.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_mat, obs.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(affine_mats, patch.size())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_105": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs.to(self.device)",
                            "Call"
                        ],
                        [
                            "F.pad(obs, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "obs.unsqueeze(1).repeat(1, len(rotations[0]), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "obs.reshape(obs.size(0) * obs.size(1), obs.size(2), obs.size(3), obs.size(4))",
                            "Call"
                        ],
                        [
                            "obs.to(self.device)",
                            "Call"
                        ],
                        [
                            "obs.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_width, padding_width, padding_width, padding_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_114": {
                "variable": {
                    "value": "flow_grid_before",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine_mats_before",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "obs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_115": {
                "variable": {
                    "value": "rotated_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs.to(self.device)",
                            "Call"
                        ],
                        [
                            "F.pad(obs, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "obs.unsqueeze(1).repeat(1, len(rotations[0]), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "obs.reshape(obs.size(0) * obs.size(1), obs.size(2), obs.size(3), obs.size(4))",
                            "Call"
                        ],
                        [
                            "obs.to(self.device)",
                            "Call"
                        ],
                        [
                            "obs.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid_before",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_mats_before, obs.size())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_119": {
                "variable": {
                    "value": "flow_grid_after",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine_mats_after",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "conv_output.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_120": {
                "variable": {
                    "value": "unrotate_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fcn(rotated_obs, in_hand)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid_after",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_mats_after, conv_output.size())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.uniform(0, 1, states.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_like_152": {
                "variable": {
                    "value": "rand_phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty(rand_mask.sum())",
                    "type": "Call",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_rotations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, rot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "action_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pixels, rot_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.uniform(0, 1, states.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_like_186": {
                "variable": {
                    "value": "rand_phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty(rand_mask.sum())",
                    "type": "Call",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_rotations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, rot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "action_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pixels, rot_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_200": {
                "variable": {
                    "value": "next_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zip(*next_obs)",
                            "Call"
                        ],
                        [
                            "torch.stack(next_obs)",
                            "Call"
                        ],
                        [
                            "next_obs.reshape(batch_size, next_obs.shape[-3], next_obs.shape[-2], next_obs.shape[-1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_201": {
                "variable": {
                    "value": "next_in_hand",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_in_hand",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(next_in_hand)",
                            "Call"
                        ],
                        [
                            "next_in_hand.reshape(batch_size, next_in_hand.shape[-3], next_in_hand.shape[-2], next_in_hand.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_230": {
                "variable": {
                    "value": "states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_231": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_234": {
                "variable": {
                    "value": "in_hand_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "in_hands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_237": {
                "variable": {
                    "value": "xy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_238": {
                "variable": {
                    "value": "rewards_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rewards",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_239": {
                "variable": {
                    "value": "next_states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_240": {
                "variable": {
                    "value": "next_obs_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zip(*next_obs)",
                            "Call"
                        ],
                        [
                            "torch.stack(next_obs)",
                            "Call"
                        ],
                        [
                            "next_obs.reshape(batch_size, next_obs.shape[-3], next_obs.shape[-2], next_obs.shape[-1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_243": {
                "variable": {
                    "value": "next_in_hands_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_in_hands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_246": {
                "variable": {
                    "value": "dones_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_248": {
                "variable": {
                    "value": "step_lefts_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_lefts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_249": {
                "variable": {
                    "value": "is_experts_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "is_experts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_271": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, obs, specific_rotations=action_idx[:, 2:3].cpu())[torch.arange(0, batch_size), 0, action_idx[:, 0], action_idx[:, 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "q",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.gamma ** step_lefts",
                            "BinOp"
                        ],
                        [
                            "rewards + self.gamma * q_prime * non_final_masks",
                            "BinOp"
                        ],
                        [
                            "q.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_278": {
                "variable": {
                    "value": "td_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_output - q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "resized_in_hand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_hand_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_img.size(2), input_img.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "(input_img, resized_in_hand)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_74": {
                "variable": {
                    "value": "patch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "transformed[:, :, int(img_size / 2 - self.patch_size / 2):int(img_size / 2 + self.patch_size / 2), int(img_size / 2 - self.patch_size / 2):int(img_size / 2 + self.patch_size / 2)]",
                            "Subscript"
                        ],
                        [
                            "patch.to(self.device)",
                            "Call"
                        ],
                        [
                            "F.pad(patch, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_width, padding_width, padding_width, padding_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "affine_mats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "affine_mats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(affine_mats)",
                            "Call"
                        ]
                    ]
                }
            },
            "affine_grid_86": {
                "variable": {
                    "value": "flow_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine_mats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(affine_mats)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "patch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_87": {
                "variable": {
                    "value": "depth_heightmap_rotated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "transformed[:, :, int(img_size / 2 - self.patch_size / 2):int(img_size / 2 + self.patch_size / 2), int(img_size / 2 - self.patch_size / 2):int(img_size / 2 + self.patch_size / 2)]",
                            "Subscript"
                        ],
                        [
                            "patch.to(self.device)",
                            "Call"
                        ],
                        [
                            "F.pad(patch, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "flow_grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.affine_grid(affine_mat, obs.size())",
                            "Call"
                        ],
                        [
                            "F.affine_grid(affine_mats, patch.size())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "(input_img, in_hand_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "affine_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "affine_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.eye(2).unsqueeze(0).expand(batch_size, -1, -1).float()",
                            "Call"
                        ],
                        [
                            "affine_mat.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat((affine_mat, transition_scaled.unsqueeze(2).float()), dim=2)",
                            "Call"
                        ],
                        [
                            "np.asarray([[np.cos(rotate_theta), np.sin(rotate_theta), 0], [-np.sin(rotate_theta), np.cos(rotate_theta), 0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(affine_mat).permute(2, 0, 1).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_82": {
                "variable": {
                    "value": "affine_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_152": {
                "*size": {
                    "value": "rand_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "pixels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(action, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "pixels[i].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_186": {
                "*size": {
                    "value": "rand_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_125": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "states.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_136": {
                "input": {
                    "value": "q_value_maps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, (obs, in_hand), to_cpu=True)",
                            "Call"
                        ],
                        [
                            "q_value_maps + torch.randn_like(q_value_maps) * eps * coef",
                            "BinOp"
                        ],
                        [
                            "self.forwardFCN(states, (obs, in_hand), to_cpu=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_146": {
                "variable": {
                    "value": "pixel_candidates",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs[i, 0] > -100.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_148": {
                "variable": {
                    "value": "pixel_candidates",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs[i, 0] > 0.01",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randn_like_168": {
                "input": {
                    "value": "q_value_maps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, (obs, in_hand), to_cpu=True)",
                            "Call"
                        ],
                        [
                            "q_value_maps + torch.randn_like(q_value_maps) * eps * coef",
                            "BinOp"
                        ],
                        [
                            "self.forwardFCN(states, (obs, in_hand), to_cpu=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_270": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs.size(0)",
                            "Call"
                        ],
                        [
                            "states.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ap/models/dqn/expert/DQNXRotInHandMargin.py": {
        "torch": {
            "stack_43": {
                "variable": {
                    "value": "states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_44": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_47": {
                "variable": {
                    "value": "in_hand_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "in_hands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_50": {
                "variable": {
                    "value": "xy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_51": {
                "variable": {
                    "value": "rewards_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rewards",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_52": {
                "variable": {
                    "value": "next_states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_53": {
                "variable": {
                    "value": "next_obs_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_56": {
                "variable": {
                    "value": "next_in_hands_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_in_hands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_59": {
                "variable": {
                    "value": "dones_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_61": {
                "variable": {
                    "value": "step_lefts_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_lefts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_62": {
                "variable": {
                    "value": "is_experts_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "is_experts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_94": {
                "variable": {
                    "value": "td_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_map[torch.arange(0, batch_size), action_idx[:, 2], action_idx[:, 0], action_idx[:, 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "q",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.gamma ** step_lefts",
                            "BinOp"
                        ],
                        [
                            "rewards + self.gamma * q_prime * non_final_masks",
                            "BinOp"
                        ],
                        [
                            "q.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "total_td_errors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cross_entropy_104": {
                "variable": {
                    "value": "margin_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.softmax_beta * expert_q_map.reshape(expert_q_map.size(0), -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "action_idx[is_experts, 2] * heightmap_size * heightmap_size + action_idx[is_experts, 0] * heightmap_size + action_idx[is_experts, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_167": {
                "input": {
                    "value": "q_output - q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_93": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(total_batch_size / divide_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_112": {
                "variable": {
                    "value": "margin_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.softmax_beta * expert_q_map.reshape(is_experts.sum(), -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expert_q_map.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_116": {
                "variable": {
                    "value": "margin_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(self.softmax_beta * expert_q_map.reshape(is_experts.sum(), -1), dim=1).reshape(expert_q_map.shape)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "margin_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(q_map)",
                            "Call"
                        ],
                        [
                            "margin_map[is_experts]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(q_map)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(q_map) * self.margin_l",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "variable": {
                    "value": "margin_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_122": {
                "variable": {
                    "value": "margin_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.softmax_beta * q_map[is_experts]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "margin_map[is_experts]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_123": {
                "input": {
                    "value": "margin_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "F.cross_entropy(self.softmax_beta * expert_q_map.reshape(expert_q_map.size(0), -1), target)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "F.binary_cross_entropy(softmax, margin_map)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(self.softmax_beta * q_map[is_experts], margin_map[is_experts])",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(margin_q_max - q_output)[is_experts]",
                            "Subscript"
                        ],
                        [
                            "margin_loss.mean()",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "torch.stack(margin_losses).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_161": {
                "variable": {
                    "value": "margin_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "margin_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_161": {
                "variable": {
                    "value": "margin_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_133": {
                "input": {
                    "value": "margin_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "F.cross_entropy(self.softmax_beta * expert_q_map.reshape(expert_q_map.size(0), -1), target)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "F.binary_cross_entropy(softmax, margin_map)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(self.softmax_beta * q_map[is_experts], margin_map[is_experts])",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(margin_q_max - q_output)[is_experts]",
                            "Subscript"
                        ],
                        [
                            "margin_loss.mean()",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "torch.stack(margin_losses).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_113": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(total_batch_size / divide_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_121": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(total_batch_size / divide_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_127": {
                "input": {
                    "value": "q_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forwardFCN(states, obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_128": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(total_batch_size / divide_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_150": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_158": {
                "input": {
                    "value": "over_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "qm[qm > qe - self.margin_l]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ap/models/dqn/expert/utils/ReplayBuffer.py": {
        "torch": {
            "stack_55": {
                "variable": {
                    "value": "obs_t_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "action_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "reward_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "obs_tp1_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "mask_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ap/models/homo/AAF.py": {
        "torch": {
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_19": {
                "variable": {
                    "value": "self.decoder_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.conv_pi.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_63": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder_loss(predictions, labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_100": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "torch.sum(loss * weights, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_73": {
                "input": {
                    "value": "torch.sum(loss, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "labels == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "labels == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "loss * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder_loss(predictions, labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/models/homo/AAFFruits.py": {
        "torch": {
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_16": {
                "variable": {
                    "value": "self.decoder_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_35": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(pred == labels.type(torch.int32)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.fc_prob.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_47": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder_loss(predicted_probs, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_62": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ap/models/homo/MultiHeadPolicy.py": {
        "torch": {
            "Softmax_22": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_23": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.multi_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_heads * self.num_actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/models/misc/SoftmaxClassifier.py": {
        "torch": {
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_17": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_31": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.softmax(pred)",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_44": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.loss(input=pred, target=y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ap/modules/ConvEncoder.py": {
        "torch": {
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.pads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "pads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.make_bns_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.convs[i](self.pads[i](x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.norms[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_128": {
                "padding": {
                    "value": "(p1, p2, p1, p2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "channels",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.input_size[2]",
                            "Subscript"
                        ],
                        [
                            "self.filter_counts[i - 1]",
                            "Subscript"
                        ],
                        [
                            "self.input_size[2]",
                            "Subscript"
                        ],
                        [
                            "self.filter_counts[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.filter_counts[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.use_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "num_features": {
                    "value": "self.filter_counts[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/FCEncoder.py": {
        "torch": {
            "ReLU_22": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.make_fcs_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_84": {
                "num_features": {
                    "value": "self.neurons[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_98": {
                "normalized_shape": {
                    "value": "self.neurons[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.neurons[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.use_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "self.neurons[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.neurons[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.use_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/FCEncoderColumnLast.py": {
        "torch": {
            "cat_40": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/FCEncoderColumnSimple.py": {
        "torch": {
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.make_fcs_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_119": {
                "num_features": {
                    "value": "self.neurons[i] + self.column.neurons[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_133": {
                "normalized_shape": {
                    "value": "self.neurons[i] + self.column.neurons[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.neurons[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.use_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "self.neurons[i - 1] + self.column.neurons[i - 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.neurons[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.use_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/FlatStatesMultipleConcant.py": {
        "torch": {
            "flatten_22": {
                "input": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/FlatStatesOneHotActions.py": {
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(actions.size()[0], self.num_actions)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "actions.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_25": {
                "input": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "(states, actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/SplitConcat.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.branches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "branches",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_22": {
                "tensors": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.concat_axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/View.py": {
        "torch": {}
    },
    "ap/modules/hand_obs/BasicBlock.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray((3, 3))",
                            "Call"
                        ],
                        [
                            "np.asarray((1, 1))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "full_padding",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(upsampled_kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "(upsampled_kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray((3, 3))",
                            "Call"
                        ],
                        [
                            "np.asarray((1, 1))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "full_padding",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(upsampled_kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "(upsampled_kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/hand_obs/InHandConv.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.in_hand_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('cnn_conv1', nn.Conv2d(patch_shape[0], 64, kernel_size=3)), ('cnn_relu1', nn.ReLU(inplace=True)), ('cnn_conv2', nn.Conv2d(64, 128, kernel_size=3)), ('cnn_relu2', nn.ReLU(inplace=True)), ('cnn_pool2', nn.MaxPool2d(2)), ('cnn_conv3', nn.Conv2d(128, 256, kernel_size=3)), ('cnn_relu3', nn.ReLU(inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "patch_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_14": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/hand_obs/ResUBase.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.conv_down_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-conv0', nn.Conv2d(n_input_channel, 32, kernel_size=3, stride=1, padding=1)), ('enc-relu0', nn.ReLU(inplace=True)), ('enc-res1', BasicBlock(32, 32, dilation=1, batch_norm=batch_norm))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv_down_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-pool2', nn.MaxPool2d(2)), ('enc-res2', BasicBlock(32, 64, downsample=nn.Sequential(nn.Conv2d(32, 64, kernel_size=1, bias=False)), dilation=1, batch_norm=batch_norm))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.conv_down_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-pool3', nn.MaxPool2d(2)), ('enc-res3', BasicBlock(64, 128, downsample=nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, bias=False)), dilation=1, batch_norm=batch_norm))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.conv_down_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-pool4', nn.MaxPool2d(2)), ('enc-res4', BasicBlock(128, 256, downsample=nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, bias=False)), dilation=1, batch_norm=batch_norm))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.conv_down_16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-pool5', nn.MaxPool2d(2)), ('enc-res5', BasicBlock(256, 512, downsample=nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, bias=False)), dilation=1, batch_norm=batch_norm)), ('enc-conv5', nn.Conv2d(512, 256, kernel_size=1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.conv_up_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dec-res1', BasicBlock(512, 256, downsample=nn.Sequential(nn.Conv2d(512, 256, kernel_size=1, bias=False)), dilation=1, batch_norm=batch_norm)), ('dec-conv1', nn.Conv2d(256, 128, kernel_size=1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.conv_up_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dec-res2', BasicBlock(256, 128, downsample=nn.Sequential(nn.Conv2d(256, 128, kernel_size=1, bias=False)), dilation=1, batch_norm=batch_norm)), ('dec-conv2', nn.Conv2d(128, 64, kernel_size=1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.conv_up_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dec-res3', BasicBlock(128, 64, downsample=nn.Sequential(nn.Conv2d(128, 64, kernel_size=1, bias=False)), dilation=1, batch_norm=batch_norm)), ('dec-conv3', nn.Conv2d(64, 32, kernel_size=1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.conv_up_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dec-res1', BasicBlock(64, 32, downsample=nn.Sequential(nn.Conv2d(64, 32, kernel_size=1, bias=False)), dilation=1, batch_norm=batch_norm))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "n_input_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_97": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "nn.Conv2d(128, 256, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "nn.Conv2d(256, 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "nn.Conv2d(512, 256, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "nn.Conv2d(256, 128, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "*args": {
                    "value": "nn.Conv2d(128, 64, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "*args": {
                    "value": "nn.Conv2d(64, 32, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/hand_obs/ResUBaseDown.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.conv_down_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-conv0', nn.Conv2d(n_input_channel, 32, kernel_size=3, stride=1, padding=1)), ('enc-relu0', nn.ReLU(inplace=True)), ('enc-res1', BasicBlock(32, 32, dilation=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv_down_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-pool2', nn.MaxPool2d(2)), ('enc-res2', BasicBlock(32, 64, downsample=nn.Sequential(nn.Conv2d(32, 64, kernel_size=1, bias=False)), dilation=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.conv_down_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-pool3', nn.MaxPool2d(2)), ('enc-res3', BasicBlock(64, 128, downsample=nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, bias=False)), dilation=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.conv_down_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-pool4', nn.MaxPool2d(2)), ('enc-res4', BasicBlock(128, 256, downsample=nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, bias=False)), dilation=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.conv_down_16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-pool5', nn.MaxPool2d(2)), ('enc-res5', BasicBlock(256, 512, downsample=nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, bias=False)), dilation=1)), ('enc-conv5', nn.Conv2d(512, 256, kernel_size=1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "n_input_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_97": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "nn.Conv2d(128, 256, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "nn.Conv2d(256, 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/hand_obs/ResUCat.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.conv_cat_in_hand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-res6', BasicBlock(512, 256, downsample=nn.Sequential(nn.Conv2d(512, 256, kernel_size=1, bias=False)), dilation=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.pick_q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.place_q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pick_q_values, place_q_values)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "(feature_map_16, in_hand_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "(feature_map_8, F.interpolate(feature_map_16, size=feature_map_8.shape[-1], mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(feature_map_4, F.interpolate(feature_map_up_8, size=feature_map_4.shape[-1], mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "(feature_map_2, F.interpolate(feature_map_up_4, size=feature_map_2.shape[-1], mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "(feature_map_1, F.interpolate(feature_map_up_2, size=feature_map_1.shape[-1], mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_56": {
                "input": {
                    "value": "feature_map_16",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_down_16(feature_map_8)",
                            "Call"
                        ],
                        [
                            "self.conv_cat_in_hand(torch.cat((feature_map_16, in_hand_out), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feature_map_8.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "input": {
                    "value": "feature_map_up_8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_up_8(torch.cat((feature_map_8, F.interpolate(feature_map_16, size=feature_map_8.shape[-1], mode='bilinear', align_corners=False)), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feature_map_4.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_62": {
                "input": {
                    "value": "feature_map_up_4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_up_4(torch.cat((feature_map_4, F.interpolate(feature_map_up_8, size=feature_map_4.shape[-1], mode='bilinear', align_corners=False)), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feature_map_2.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "input": {
                    "value": "feature_map_up_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_up_2(torch.cat((feature_map_2, F.interpolate(feature_map_up_4, size=feature_map_2.shape[-1], mode='bilinear', align_corners=False)), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feature_map_1.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(512, 256, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/hand_obs/ResUCatDown.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.conv_cat_in_hand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-res6', BasicBlock(512, 256, downsample=nn.Sequential(nn.Conv2d(512, 256, kernel_size=1, bias=False)), dilation=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_53": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "states[0]",
                            "Subscript"
                        ],
                        [
                            "F.pad(obs, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_width, padding_width, padding_width, padding_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "(feature_map_16, in_hand_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "*args": {
                    "value": "nn.Conv2d(512, 256, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/modules/hand_obs/ResUCatEncoder.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.conv_cat_in_hand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('enc-res6', BasicBlock(512, 256, downsample=nn.Sequential(nn.Conv2d(512, 256, kernel_size=1, bias=False)), dilation=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_58": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "states[0]",
                            "Subscript"
                        ],
                        [
                            "F.pad(obs, (padding_width, padding_width, padding_width, padding_width), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_width, padding_width, padding_width, padding_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "(feature_map_16, in_hand_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "(feature_map_8, F.interpolate(feature_map_16, size=feature_map_8.shape[-1], mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(feature_map_4, F.interpolate(feature_map_up_8, size=feature_map_4.shape[-1], mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "(feature_map_2, F.interpolate(feature_map_up_4, size=feature_map_2.shape[-1], mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "(feature_map_1, F.interpolate(feature_map_up_2, size=feature_map_1.shape[-1], mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "input": {
                    "value": "feature_map_16",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_down_16(feature_map_8)",
                            "Call"
                        ],
                        [
                            "self.conv_cat_in_hand(torch.cat((feature_map_16, in_hand_out), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feature_map_8.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "input": {
                    "value": "feature_map_up_8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_up_8(torch.cat((feature_map_8, F.interpolate(feature_map_16, size=feature_map_8.shape[-1], mode='bilinear', align_corners=False)), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feature_map_4.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "input": {
                    "value": "feature_map_up_4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_up_4(torch.cat((feature_map_4, F.interpolate(feature_map_up_8, size=feature_map_4.shape[-1], mode='bilinear', align_corners=False)), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feature_map_2.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_79": {
                "input": {
                    "value": "feature_map_up_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_up_2(torch.cat((feature_map_2, F.interpolate(feature_map_up_4, size=feature_map_2.shape[-1], mode='bilinear', align_corners=False)), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feature_map_1.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.Conv2d(512, 256, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/offline/blocks/RunAAF.py": {
        "torch": {
            "Adam_91": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.encoder_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.encoder_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/offline/fruits/RunAAF.py": {
        "torch": {
            "Adam_61": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(self.encoder.parameters()) + [*self.model.fc_prob.parameters()]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.encoder_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.encoder_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "reshape_encoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/offline/fruits/RunActorMimicV2.py": {
        "torch": {
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_encoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_317": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.student.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_321": {
                "obj": {
                    "value": "self.student.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_257": {
                "input": {
                    "value": "qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "teacher(state)",
                            "Call"
                        ],
                        [
                            "qs / self.tau",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/offline/fruits_seq/RunAAF.py": {
        "torch": {
            "Sequential_75": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "reshape_encoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/offline/fruits_seq/RunActorMimicV2.py": {
        "torch": {
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "flatten_states",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_70": {
                "input": {
                    "value": "qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "teacher(state)",
                            "Call"
                        ],
                        [
                            "qs / self.tau",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/online/blocks/RunDQN.py": {
        "torch": {
            "no_grad_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "actions_star",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(actions_star, states.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_157": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "actions_star",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(actions_star, states.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_240": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_240": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "actions_star",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(actions_star, states.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_322": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_322": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_726": {
                "obj": {
                    "value": "self.agent.fcn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_697": {
                "variable": {
                    "value": "steps_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset[Constants.STEPS_LEFT][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_699": {
                "variable": {
                    "value": "steps_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_718": {
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "is_expert[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "tmp_is_expert",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_689": {
                "data": {
                    "value": "dataset[Constants.OBS][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_690": {
                "data": {
                    "value": "dataset[Constants.HAND_OBS][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_691": {
                "data": {
                    "value": "dataset[Constants.NEXT_OBS][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_692": {
                "data": {
                    "value": "dataset[Constants.NEXT_HAND_OBS][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_706": {
                "data": {
                    "value": "dataset[Constants.HAND_BITS][i].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_707": {
                "data": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset[Constants.ACTIONS][i]",
                            "Subscript"
                        ],
                        [
                            "[action // 90, action % 90]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_708": {
                "data": {
                    "value": "[float(dataset[Constants.REWARDS][i])]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_709": {
                "data": {
                    "value": "dataset[Constants.NEXT_HAND_BITS][i].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_710": {
                "data": {
                    "value": "dataset[Constants.DONES][i].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_711": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_591": {
                "data": {
                    "value": "list(zip(*batch))[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_591": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_585": {
                "data": {
                    "value": "list(zip(*batch))[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/online/blocks/RunDeconstruct.py": {
        "torch": {
            "clamp_154": {
                "variable": {
                    "value": "pixel_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((x - self.workspace[0][0]) / self.heightmap_resolution).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(pixel_x, 0, self.heightmap_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "self.heightmap_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_155": {
                "variable": {
                    "value": "pixel_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((y - self.workspace[1][0]) / self.heightmap_resolution).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(pixel_y, 0, self.heightmap_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "self.heightmap_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, rot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "action_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pixel_x, pixel_y, rot_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "actions_star",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(actions_star, states.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_80": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "done_idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "[np.pi / self.num_rotations * i for i in range(self.num_rotations)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/online/blocks/RunTaskClassifier.py": {
        "torch": {
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_224": {
                "variable": {
                    "value": "conv_obs_avg_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "conv_obs_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_obs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "conv_hand_obs_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_hand_obs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_encoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_265": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_322": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_326": {
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/online/fruits/RunDQN.py": {
        "torch": {
            "arange_276": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "next_actions.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_encoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_437": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_encoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_470": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_461": {
                "params": {
                    "value": "q_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dqn.head_parameters()",
                            "Call"
                        ],
                        [
                            "self.dqn.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_465": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/online/fruits/RunDQNAAF.py": {
        "torch": {
            "Sequential_66": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_encoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/online/fruits_seq/RunDQN.py": {
        "torch": {
            "arange_282": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "next_actions.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "flatten_states",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_428": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "flatten_states",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_454": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_445": {
                "params": {
                    "value": "q_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dqn.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_449": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/run/online/fruits_seq/RunDQNAAF.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "flatten_states",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/scr/envs/blocks/interact.py": {
        "torch": {}
    },
    "ap/scr/online/blocks/run_DQN_AAF.py": {
        "torch": {
            "sigmoid_75": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.forward(state)[0]",
                            "Subscript"
                        ],
                        [
                            "functional.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "(pred >= prob_threshold).int()",
                            "Call"
                        ],
                        [
                            "pred.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/scr/online/fruits/run_DQNAAF.py": {
        "torch": {
            "Sequential_58": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "reshape_encoder",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/scr/online/fruits_seq/run_DQNAAF.py": {
        "torch": {
            "Sequential_58": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "reshape_encoder",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ap/utils/dist.py": {
        "torch": {
            "MultivariateNormal_19": {
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_diag_cov(diag_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_9": {
                "tensors": {
                    "value": "[torch.diag(x) for x in var.unbind(0)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_11": {
                "tensors": {
                    "value": "[torch.diag(y) for y in x.unbind(0)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "diag_9": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "diag_11": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ap/utils/runner.py": {
        "torch": {
            "from_numpy_34": {
                "ndarray": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(list(range(len(losses[0]))), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "x * epoch_size",
                            "BinOp"
                        ],
                        [
                            "task_string.split(',')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ap/utils/torch.py": {
        "torch": {
            "zeros_like_95": {
                "variable": {
                    "value": "clipped_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.cos(angles), torch.sin(angles))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_209": {
                "variable": {
                    "value": "states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_210": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_213": {
                "variable": {
                    "value": "xy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_214": {
                "variable": {
                    "value": "rewards_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rewards",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_215": {
                "variable": {
                    "value": "next_states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_216": {
                "variable": {
                    "value": "next_obs_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_217": {
                "variable": {
                    "value": "dones_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_219": {
                "variable": {
                    "value": "step_lefts_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_lefts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_9": {
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(1, 16, kernel_size=7)), ('relu0', nn.ReLU(True)), ('pool0', nn.MaxPool2d(2)), ('conv1', nn.Conv2d(16, 32, kernel_size=7)), ('relu1', nn.ReLU(True)), ('pool1', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(32, 64, kernel_size=5)), ('relu2', nn.ReLU(True)), ('pool2', nn.MaxPool2d(2))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_40": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_41": {
                "variable": {
                    "value": "self.rotation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_42": {
                "variable": {
                    "value": "self.translation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_52": {
                "variable": {
                    "value": "rotation_matrix[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_54": {
                "variable": {
                    "value": "rotation_matrix[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_55": {
                "variable": {
                    "value": "rotation_matrix[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_97": {
                "variable": {
                    "value": "clipped_tensor[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(tensor[:, i], torch.tensor(max[i]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "((m / d).view(-1, 1), (m % d).view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "((m / (d * d)).view(-1, 1), (m % (d * d) / d).view(-1, 1), (m % (d * d) % d).view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "(d0, d1, d2, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_60": {
                "input": {
                    "value": "rotation_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.rotation.repeat(rotation.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "scale_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.scale.repeat(scale.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_161": {
                "tensors": {
                    "value": "torch.meshgrid(torch.arange(0, res[0], delta[0]), torch.arange(0, res[1], delta[1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_162": {
                "*size": {
                    "value": "res[0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "res[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lerp_177": {
                "input": {
                    "value": "n01",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dot(tile_grads([0, -1], [1, None]), [0, -1])",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "n11",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dot(tile_grads([1, None], [1, None]), [-1, -1])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "t[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_53": {
                "input": {
                    "value": "rotation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_97": {
                "input": {
                    "value": "tensor[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "max[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_161": {
                "*tensors": {
                    "value": "torch.arange(0, res[0], delta[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, res[1], delta[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_163": {
                "input": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * math.pi * torch.rand(res[0] + 1, res[1] + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_163": {
                "input": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * math.pi * torch.rand(res[0] + 1, res[1] + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_161": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "res[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "delta[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_77": {
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_169": {
                "tensors": {
                    "value": "(grid[:shape[0], :shape[1], 0] + shift[0], grid[:shape[0], :shape[1], 1] + shift[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_76": {
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}