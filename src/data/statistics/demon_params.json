{
    "examples/create_dataset_and_use_readerop.py": {
        "tensorflow": {
            "GPUOptions_83": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_85": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_85": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/evaluation.py": {
        "tensorflow": {
            "split_79": {
                "variable": {
                    "value": "(rotation_tensor, translation_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "data_dict['MOTION']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_83": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_85": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_170": {
                "variable": {
                    "value": "(image1, image2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "data_dict['IMAGE_PAIR']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_175": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_177": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_188": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_133": {
                "cuda_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reset_default_graph_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_85": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_177": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example.py": {
        "tensorflow": {
            "GPUOptions_70": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_72": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_82": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_45": {
                "cuda_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_72": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example_v2.py": {
        "tensorflow": {
            "GPUOptions_76": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_78": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_50": {
                "cuda_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_78": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/depthmotionnet/blocks_original.py": {
        "tensorflow": {
            "conv2d_transpose_64": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "upconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_97": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_first'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_first'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_first'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "upconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_110": {
                "variable": {
                    "value": "upsampled_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convrelu_caffe_padding(inputs=inp, num_outputs=24, kernel_size=3, strides=1, name='conv1', **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=inp, filters=num_outputs, kernel_size=4, strides=2, padding='VALID', activation=myLeakyRelu, kernel_initializer=default_weights_initializer(), data_format=data_format, name='upconv', **kwargs)",
                            "Call"
                        ],
                        [
                            "convrelu_caffe_padding(inputs=inp, num_outputs=intermediate_num_outputs, kernel_size=3, strides=1, name='conv1', data_format=data_format, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 1] if data_format == 'channels_first' else [0, 1, 1, 0]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "size": {
                    "value": "target_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features_direct.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_364": {
                "variable": {
                    "value": "concat_extra_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(extra_inputs, axis=1 if data_format == 'channels_first' else 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_366": {
                "variable": {
                    "value": "conv2_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, conv_extra_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "dense_390": {
                "variable": {
                    "value": "motion_fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "motion_fc1",
                    "type": "str",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.contrib.layers.flatten(motion_conv1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_397": {
                "variable": {
                    "value": "motion_fc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "motion_fc2",
                    "type": "str",
                    "possible_values": []
                },
                "inputs": {
                    "value": "motion_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(name='motion_fc1', inputs=tf.contrib.layers.flatten(motion_conv1), units=1024, activation=myLeakyRelu, **fc_params)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_404": {
                "variable": {
                    "value": "predict_motion_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "motion_fc3",
                    "type": "str",
                    "possible_values": []
                },
                "inputs": {
                    "value": "motion_fc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(name='motion_fc2', inputs=motion_fc1, units=128, activation=myLeakyRelu, **fc_params)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_412": {
                "variable": {
                    "value": "(predict_rotation, predict_translation, predict_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "predict_motion_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(name='motion_fc3', inputs=motion_fc2, units=7, activation=None, **fc_params)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_475": {
                "variable": {
                    "value": "depth2_nhwc_orig_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "depth2_nhwc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_NCHW_to_NHWC(depth2)",
                            "Call"
                        ],
                        [
                            "depth2",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "original_image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image1.get_shape().as_list()[-2:]",
                            "Subscript"
                        ],
                        [
                            "image1.get_shape().as_list()[1:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_482": {
                "variable": {
                    "value": "net_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(image1, depth2_orig_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_165": {
                "variable": {
                    "value": "flow_from_depth_motion_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_flow_from_depth_motion",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sops.depth_to_flow(intrinsics=intrinsics, depth=prev_depth_nchw, rotation=prev_predictions['predict_rotation'], translation=prev_predictions['predict_translation'], inverse_depth=True, normalize_flow=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "flow_from_depth_motion_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(flow_from_depth_motion_norm, flow_from_depth_motion_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "tmp_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_flow_from_depth_motion",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sops.depth_to_flow(intrinsics=intrinsics, depth=prev_depth_nchw, rotation=prev_predictions['predict_rotation'], translation=prev_predictions['predict_translation'], inverse_depth=True, normalize_flow=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_168": {
                "variable": {
                    "value": "flow_from_depth_motion",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "flow_from_depth_motion_norm < 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "_flow_from_depth_motion",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sops.depth_to_flow(intrinsics=intrinsics, depth=prev_depth_nchw, rotation=prev_predictions['predict_rotation'], translation=prev_predictions['predict_translation'], inverse_depth=True, normalize_flow=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tmp_zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(_flow_from_depth_motion, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_183": {
                "variable": {
                    "value": "extra_inputs_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(extra_inputs, axis=1 if data_format == 'channels_first' else 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_186": {
                "variable": {
                    "value": "conv2_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, conv_extra_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "split_278": {
                "variable": {
                    "value": "(predicted_unscaled_depth, predicted_normal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv2d_caffe_padding(inputs=tmp, num_outputs=4 if predict_normals else 1, kernel_size=3, strides=1, name='conv2', data_format=data_format, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "concat_115": {
                "values": {
                    "value": "concat_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x for x in inputs if not x is None]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_117": {
                "values": {
                    "value": "concat_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x for x in inputs if not x is None]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "predict_flow5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "upsample_flow5to4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "refine4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "refine3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "refine2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "predict_flow2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predicted_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_364": {
                "values": {
                    "value": "extra_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image2_2_warped, flow_from_depth_motion, prev_predictions['predict_depth2'], prev_predictions['predict_normal2'])",
                            "Tuple"
                        ],
                        [
                            "[image2_2_warped, prev_flowconf2]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "variable_scope_415": {
                "name_or_scope": {
                    "value": "refine4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_423": {
                "name_or_scope": {
                    "value": "refine3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_431": {
                "name_or_scope": {
                    "value": "refine2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_439": {
                "name_or_scope": {
                    "value": "predict_depthnormal2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_494": {
                "name_or_scope": {
                    "value": "refine1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_502": {
                "name_or_scope": {
                    "value": "refine0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_510": {
                "name_or_scope": {
                    "value": "predict_depth0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_183": {
                "values": {
                    "value": "extra_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image2_2_warped, flow_from_depth_motion, prev_predictions['predict_depth2'], prev_predictions['predict_normal2'])",
                            "Tuple"
                        ],
                        [
                            "[image2_2_warped, prev_flowconf2]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "flatten_392": {
                "structure": {
                    "value": "motion_conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convrelu_caffe_padding(name='motion_conv1', inputs=conv5_1, num_outputs=128, kernel_size=3, strides=1, **conv_params)",
                            "Call"
                        ],
                        [
                            "convert_NHWC_to_NCHW(motion_conv1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/depthmotionnet/datareader/__init__.py": {
        "tensorflow": {
            "load_op_library_31": {
                "variable": {
                    "value": "readerlib",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "_readerlib_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.environ['MULTIVIH5DATAREADEROP_LIB']",
                            "Subscript"
                        ],
                        [
                            "os.path.abspath(os.path.join(os.path.split(__file__)[0], '..', '..', '..', 'build', 'multivih5datareaderop', 'multivih5datareaderop.so'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/depthmotionnet/helpers.py": {
        "tensorflow": {
            "pad_85": {
                "variable": {
                    "value": "padded_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [pad_y, pad_y], [pad_x, pad_x]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [pad_y, pad_y], [pad_x, pad_x], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_128": {
                "variable": {
                    "value": "padded_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [pad, pad], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [pad, pad], [0, 0], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "tmp_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "padded_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings_y)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "num_outputs",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[kernel_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'y'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_27": {
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_34": {
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "inputs": {
                    "value": "padded_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings_y)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_142": {
                "inputs": {
                    "value": "tf.pad(tmp_y, paddings=paddings_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_outputs[1]",
                            "Subscript"
                        ],
                        [
                            "num_outputs",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, kernel_size]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'x'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_143": {
                "tensor": {
                    "value": "tmp_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=padded_input, filters=num_outputs_y, kernel_size=[kernel_size, 1], strides=[stride, 1], padding='valid', activation=myLeakyRelu, kernel_initializer=default_weights_initializer(), data_format=data_format, name=name + 'y', **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [pad, pad]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [pad, pad], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "python/depthmotionnet/v2/blocks.py": {
        "tensorflow": {
            "conv2d_transpose_65": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "upconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_98": {
                "variable": {
                    "value": "upsampled_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_first'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_first'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_first'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "upconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_206": {
                "variable": {
                    "value": "dense5",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.contrib.layers.flatten(tf.slice(conv5_1, [0, 0, 0, 0], dense_slice_shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "units * dense_slice_shape[i]",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "kernel_regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "dense5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_215": {
                "variable": {
                    "value": "conv5_1_dense5",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv5_1, tf.reshape(dense5, dense_slice_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stop_gradient_383": {
                "variable": {
                    "value": "concat_extra_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(extra_inputs, axis=1 if data_format == 'channels_first' else 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_385": {
                "variable": {
                    "value": "conv2_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, conv_extra_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "dense_405": {
                "variable": {
                    "value": "dense5",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.contrib.layers.flatten(tf.slice(conv5_1, [0, 0, 0, 0], dense_slice_shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "units * dense_slice_shape[i]",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "kernel_regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "dense5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_414": {
                "variable": {
                    "value": "conv5_1_dense5",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv5_1, tf.reshape(dense5, dense_slice_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "concat_429": {
                "variable": {
                    "value": "motion_conv5_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(motion_conv5a, motion_conv5b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "dense_433": {
                "variable": {
                    "value": "motion_fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "motion_fc1",
                    "type": "str",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.contrib.layers.flatten(motion_conv5_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "kernel_regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_441": {
                "variable": {
                    "value": "motion_fc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "motion_fc2",
                    "type": "str",
                    "possible_values": []
                },
                "inputs": {
                    "value": "motion_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(name='motion_fc1', inputs=tf.contrib.layers.flatten(motion_conv5_1), units=1024, activation=myLeakyRelu, kernel_regularizer=kernel_regularizer, **fc_params)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "kernel_regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_449": {
                "variable": {
                    "value": "predict_motion_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "motion_fc3",
                    "type": "str",
                    "possible_values": []
                },
                "inputs": {
                    "value": "motion_fc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(name='motion_fc2', inputs=motion_fc1, units=128, activation=myLeakyRelu, kernel_regularizer=kernel_regularizer, **fc_params)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "kernel_regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_458": {
                "variable": {
                    "value": "(predict_rotation, predict_translation, predict_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "predict_motion_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(name='motion_fc3', inputs=motion_fc2, units=7, activation=None, kernel_regularizer=kernel_regularizer, **fc_params)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_522": {
                "variable": {
                    "value": "depth2_nhwc_orig_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "depth2_nhwc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_NCHW_to_NHWC(depth2)",
                            "Call"
                        ],
                        [
                            "depth2",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "original_image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image1.get_shape().as_list()[-2:]",
                            "Subscript"
                        ],
                        [
                            "image1.get_shape().as_list()[1:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_529": {
                "variable": {
                    "value": "net_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(image1, depth2_orig_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_164": {
                "variable": {
                    "value": "flow_from_depth_motion_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_flow_from_depth_motion",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sops.depth_to_flow(intrinsics=intrinsics, depth=prev_depth_nchw, rotation=prev_predictions['predict_rotation'], translation=prev_predictions['predict_translation'], inverse_depth=True, normalize_flow=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "flow_from_depth_motion_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(flow_from_depth_motion_norm, flow_from_depth_motion_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_166": {
                "variable": {
                    "value": "tmp_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_flow_from_depth_motion",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sops.depth_to_flow(intrinsics=intrinsics, depth=prev_depth_nchw, rotation=prev_predictions['predict_rotation'], translation=prev_predictions['predict_translation'], inverse_depth=True, normalize_flow=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_167": {
                "variable": {
                    "value": "flow_from_depth_motion",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "flow_from_depth_motion_norm < 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "_flow_from_depth_motion",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sops.depth_to_flow(intrinsics=intrinsics, depth=prev_depth_nchw, rotation=prev_predictions['predict_rotation'], translation=prev_predictions['predict_translation'], inverse_depth=True, normalize_flow=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tmp_zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(_flow_from_depth_motion, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_182": {
                "variable": {
                    "value": "extra_inputs_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(extra_inputs, axis=1 if data_format == 'channels_first' else 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "conv2_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, conv_extra_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "split_296": {
                "variable": {
                    "value": "(predicted_unscaled_depth, predicted_normal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv2d(inputs=tmp, num_outputs=4 if predict_normals else 1, kernel_size=3, strides=1, name='conv2', data_format=data_format, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "clip_by_value_379": {
                "variable": {
                    "value": "depth_from_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "depth_from_flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sops.flow_to_depth2(flow=prev_flow2, intrinsics=intrinsics, rotation=prev_rotation, translation=prev_translation, normalized_flow=True, inverse_depth=True)",
                            "Call"
                        ],
                        [
                            "convert_NCHW_to_NHWC(sops.flow_to_depth2(flow=prev_flow2_nchw, intrinsics=intrinsics, rotation=prev_rotation, translation=prev_translation, normalized_flow=True, inverse_depth=True))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(depth_from_flow, 0.0, 50.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "50.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_114": {
                "values": {
                    "value": "concat_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x for x in inputs if not x is None]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_116": {
                "values": {
                    "value": "concat_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x for x in inputs if not x is None]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_207": {
                "structure": {
                    "value": "tf.slice(conv5_1, [0, 0, 0, 0], dense_slice_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "predict_flow5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "upsample_flow5to4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "refine4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "refine3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "refine2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "predict_flow2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_300": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predicted_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_383": {
                "values": {
                    "value": "extra_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image2_2_warped, flow_from_depth_motion, prev_predictions['predict_depth2'], prev_predictions['predict_normal2'])",
                            "Tuple"
                        ],
                        [
                            "[image2_2_warped, prev_flowconf2]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "flatten_406": {
                "structure": {
                    "value": "tf.slice(conv5_1, [0, 0, 0, 0], dense_slice_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_461": {
                "name_or_scope": {
                    "value": "refine4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_469": {
                "name_or_scope": {
                    "value": "refine3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_477": {
                "name_or_scope": {
                    "value": "refine2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_485": {
                "name_or_scope": {
                    "value": "predict_depthnormal2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_541": {
                "name_or_scope": {
                    "value": "refine1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_549": {
                "name_or_scope": {
                    "value": "refine0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_557": {
                "name_or_scope": {
                    "value": "predict_depth0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_182": {
                "values": {
                    "value": "extra_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image2_2_warped, flow_from_depth_motion, prev_predictions['predict_depth2'], prev_predictions['predict_normal2'])",
                            "Tuple"
                        ],
                        [
                            "[image2_2_warped, prev_flowconf2]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "slice_207": {
                "input_": {
                    "value": "conv5_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convrelu2(name='conv5_1', inputs=conv5, num_outputs=384, kernel_size=3, stride=1, **conv_params)",
                            "Call"
                        ],
                        [
                            "convrelu2(name='conv5_1', inputs=conv5, num_outputs=384, kernel_size=3, stride=1, **conv_params)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "dense_slice_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv5_1.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "conv5_1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_215": {
                "tensor": {
                    "value": "dense5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.contrib.layers.flatten(tf.slice(conv5_1, [0, 0, 0, 0], dense_slice_shape)), units=units, activation=myLeakyRelu, kernel_initializer=default_weights_initializer(), kernel_regularizer=kernel_regularizer, name='dense5')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.contrib.layers.flatten(tf.slice(conv5_1, [0, 0, 0, 0], dense_slice_shape)), units=units, activation=myLeakyRelu, kernel_initializer=default_weights_initializer(), kernel_regularizer=kernel_regularizer, name='dense5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "dense_slice_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv5_1.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "conv5_1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_406": {
                "input_": {
                    "value": "conv5_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convrelu2(name='conv5_1', inputs=conv5, num_outputs=384, kernel_size=3, stride=1, **conv_params)",
                            "Call"
                        ],
                        [
                            "convrelu2(name='conv5_1', inputs=conv5, num_outputs=384, kernel_size=3, stride=1, **conv_params)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "dense_slice_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv5_1.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "conv5_1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_414": {
                "tensor": {
                    "value": "dense5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.contrib.layers.flatten(tf.slice(conv5_1, [0, 0, 0, 0], dense_slice_shape)), units=units, activation=myLeakyRelu, kernel_initializer=default_weights_initializer(), kernel_regularizer=kernel_regularizer, name='dense5')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.contrib.layers.flatten(tf.slice(conv5_1, [0, 0, 0, 0], dense_slice_shape)), units=units, activation=myLeakyRelu, kernel_initializer=default_weights_initializer(), kernel_regularizer=kernel_regularizer, name='dense5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "dense_slice_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv5_1.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "conv5_1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_435": {
                "structure": {
                    "value": "motion_conv5_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat((motion_conv5a, motion_conv5b), axis=1 if data_format == 'channels_first' else 3)",
                            "Call"
                        ],
                        [
                            "convert_NHWC_to_NCHW(motion_conv5_1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/depthmotionnet/v2/helpers.py": {
        "tensorflow": {
            "conv2d_68": {
                "variable": {
                    "value": "tmp_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "num_outputs",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[kernel_size_y, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'y'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_80": {
                "inputs": {
                    "value": "tmp_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=inputs, filters=num_outputs_y, kernel_size=[kernel_size_y, 1], strides=[stride, 1], padding='same', activation=myLeakyRelu, kernel_initializer=default_weights_initializer(), data_format=data_format, name=name + 'y', **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_outputs[1]",
                            "Subscript"
                        ],
                        [
                            "num_outputs",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, kernel_size_x]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "myLeakyRelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "default_weights_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'x'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "python/depthmotionnet/v2/losses.py": {
        "tensorflow": {
            "stop_gradient_48": {
                "variable": {
                    "value": "gt_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_79": {
                "values": {
                    "value": "sig_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_104": {
                "inputs": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "l1_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "tf.sqrt(x ** 2 + epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "pointwise_l2_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_372": {
                "name": {
                    "value": "compute_confidence_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_373": {
                "x": {
                    "value": "-scale * tf.abs(predicted_flow - gt_flow)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_29": {
                "x": {
                    "value": "x ** 2 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(diff ** 2, axis=1) + epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(diff ** 2, axis=3) + epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_51": {
                "x": {
                    "value": "tf.reduce_sum(diff ** 2, axis=1) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "x": {
                    "value": "tf.reduce_sum(diff ** 2, axis=3) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_373": {
                "x": {
                    "value": "predicted_flow - gt_flow",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/v2/training.py": {
        "tensorflow": {
            "GPUOptions_83": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_84": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_88": {
                "variable": {
                    "value": "global_stepf",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "trainer.global_step()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ease_in_quad(global_stepf - _max_iter_dict[trainer.current_evo.name()] / 3, _base_lr_dict[trainer.current_evo.name()], 1e-06 - _base_lr_dict[trainer.current_evo.name()], float(2 * _max_iter_dict[trainer.current_evo.name()] / 3))",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "merge_all_551": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_558": {
                "variable": {
                    "value": "train_var_summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_var_summary_op_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "group_563": {
                "variable": {
                    "value": "check",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*check_numeric_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "global_variables_initializer_568": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_123": {
                "name": {
                    "value": "LearningRate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ease_in_quad(global_stepf - _max_iter_dict[trainer.current_evo.name()] / 3, _base_lr_dict[trainer.current_evo.name()], 1e-06 - _base_lr_dict[trainer.current_evo.name()], float(2 * _max_iter_dict[trainer.current_evo.name()] / 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_132": {
                "variable": {
                    "value": "(num_test_iterations, current_batch_buffer, max_batch_buffer, current_read_buffer, max_read_buffer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "reader_tensors[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "group_579": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "optimize_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(grads_and_vars=avg_grads, global_step=trainer.global_step())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "*iterative_net_queues_enqueue_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "run_604": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_128": {
                "name": {
                    "value": "datareader",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_133": {
                "name": {
                    "value": "datareader/batch_buffer",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "current_batch_buffer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_134": {
                "name": {
                    "value": "datareader/read_buffer",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "current_read_buffer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_losses_491": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "tower",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_495": {
                "variable": {
                    "value": "tower_total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses + regularization_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_532": {
                "name": {
                    "value": "CombinedLosses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_536": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tower_total_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "TotalLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_539": {
                "name": {
                    "value": "TotalLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(tower_total_losses, 'TotalLoss')",
                            "Call"
                        ],
                        [
                            "tower_total_losses[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ConfigProto_84": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ]
                    ]
                }
            },
            "split_142": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "_num_gpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_gpu_count()",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_159": {
                "device_name": {
                    "value": "'/gpu:{0}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "'tower_{0}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_171": {
                "variable": {
                    "value": "(rotation, translation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "data_dict['MOTION']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_178": {
                "variable": {
                    "value": "(image1, image2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "data_dict['IMAGE_PAIR']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_179": {
                "a": {
                    "value": "image2",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_195": {
                "variable": {
                    "value": "(predict_flow5, predict_conf5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "netFlow1_result['predict_flowconf5']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "flow_block(image_pair=data_dict['IMAGE_PAIR'], kernel_regularizer=_kernel_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_196": {
                "variable": {
                    "value": "(predict_flow2, predict_conf2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "netFlow1_result['predict_flowconf2']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "flow_block(image_pair=data_dict['IMAGE_PAIR'], kernel_regularizer=_kernel_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FIFOQueue_293": {
                "variable": {
                    "value": "queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "dtypes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v.dtype for (k, v) in data_dict.items()]",
                            "ListComp"
                        ],
                        [
                            "dtypes + [v.dtype for (k, v) in netDM1_result.items()]",
                            "BinOp"
                        ]
                    ]
                },
                "shapes": {
                    "value": "shapes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "names": {
                    "value": "names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[k for k in data_dict]",
                            "ListComp"
                        ],
                        [
                            "names + [k for k in netDM1_result]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_regularization_losses_494": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "tower",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_497": {
                "name": {
                    "value": "TotalLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tower_total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(losses + regularization_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_534": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_555": {
                "name": {
                    "value": "v.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "TRAIN_VARS_SUMMARIES",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_562": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_vars",
                            "Name"
                        ]
                    ]
                },
                "message": {
                    "value": "train var check",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_170": {
                "name": {
                    "value": "data_preprocess",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "netFlow1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpu_id != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "concat_303": {
                "variable": {
                    "value": "enqueue_data_dict_initialization[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "(_simulated_iterations - 1) * [data_dict[k]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_305": {
                "variable": {
                    "value": "enqueue_data_dict_initialization[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "(_simulated_iterations - 1) * [ground_truth[k]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_307": {
                "variable": {
                    "value": "enqueue_data_dict_initialization[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "(_simulated_iterations - 1) * [netDM1_result[k]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_316": {
                "variable": {
                    "value": "data_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "(data_dict[k], data_from_queue[k])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_318": {
                "variable": {
                    "value": "ground_truth[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "(ground_truth[k], data_from_queue[k])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_320": {
                "variable": {
                    "value": "netDM1_result[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "(netDM1_result[k], data_from_queue[k])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_336": {
                "variable": {
                    "value": "(predict_flow5, predict_conf5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "netFlow2_result['predict_flowconf5']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "flow_block(image_pair=data_dict['IMAGE_PAIR'], image2_2=data_dict['image2_2'], intrinsics=data_dict['INTRINSICS'], prev_predictions=netDM1_result, kernel_regularizer=_kernel_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_337": {
                "variable": {
                    "value": "(predict_flow2, predict_conf2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "netFlow2_result['predict_flowconf2']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "flow_block(image_pair=data_dict['IMAGE_PAIR'], image2_2=data_dict['image2_2'], intrinsics=data_dict['INTRINSICS'], prev_predictions=netDM1_result, kernel_regularizer=_kernel_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_519": {
                "name": {
                    "value": "clip_gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_557": {
                "name": {
                    "value": "v.name + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "TRAIN_VARS_SUMMARIES",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_area_179": {
                "images": {
                    "value": "tf.transpose(image2, perm=[0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(48, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_200": {
                "name": {
                    "value": "netFlow1_losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "netDM1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpu_id != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "name_scope_248": {
                "name": {
                    "value": "netDM1_losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "netDM1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "netFlow2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpu_id != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "name_scope_341": {
                "name": {
                    "value": "netFlow2_losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_382": {
                "name_or_scope": {
                    "value": "netDM2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpu_id != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "name_scope_397": {
                "name": {
                    "value": "netDM2_losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "netDM2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_431": {
                "name_or_scope": {
                    "value": "netRefine",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpu_id != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "name_scope_438": {
                "name": {
                    "value": "netRefine_losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_438": {
                "name_or_scope": {
                    "value": "netRefine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_474": {
                "variable": {
                    "value": "enqueue_data_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "d[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "slice_begin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(slice_size) * [0]",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "slice_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[num] + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_486": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_502": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "netFlow1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_505": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "netDM1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_508": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "netFlow2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_511": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "netDM2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_514": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "netRefine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_522": {
                "variable": {
                    "value": "clipped_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "check_numerics_592": {
                "tensor": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(tower_total_losses, 'TotalLoss')",
                            "Call"
                        ],
                        [
                            "tower_total_losses[0]",
                            "Subscript"
                        ]
                    ]
                },
                "message": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_loss_229": {
                "loss": {
                    "value": "losses['netFlow1_' + l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_loss_275": {
                "loss": {
                    "value": "losses['netDM1_' + l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_loss_375": {
                "loss": {
                    "value": "losses['netFlow2_' + l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_loss_427": {
                "loss": {
                    "value": "losses['netDM2_' + l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_loss_458": {
                "loss": {
                    "value": "losses['netRefine_' + l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}