{
    "Tutorial/Day 5 Optimal Mind Control/run.py": {
        "tensorflow": {
            "disable_eager_execution_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t / sim_res",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0] * n_n ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_89": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(n_n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "ach_mat.reshape(-1) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_scatter_nd_update_90": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(o_, tf.reshape(ind, [-1, 1]), o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(o_, tf.reshape(ind, [-1, 1]), o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(ind, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(o_, (n_n, n_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_111": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0] * n_n ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_114": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(n_n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "gaba_mat.reshape(-1) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_scatter_nd_update_115": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(o_, tf.reshape(ind, [-1, 1]), o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(o_, tf.reshape(ind, [-1, 1]), o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(ind, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(o_, (n_n, n_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_205": {
                "variable": {
                    "value": "A_",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.5] * n_n",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "Z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(A_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_208": {
                "variable": {
                    "value": "T_ach",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater(t, fire_t + t_delay), tf.less(t, fire_t + t_max + t_delay))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "A_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(A, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Z_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(A_), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_211": {
                "variable": {
                    "value": "T_ach",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(ach_mat, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "T_ach",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.greater(t, fire_t + t_delay), tf.less(t, fire_t + t_max + t_delay)), A_, Z_)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.constant(ach_mat, dtype=tf.float64), T_ach)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(T_ach, (-1,)), ach_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_214": {
                "variable": {
                    "value": "T_ach",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(T_ach, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "ach_mat.reshape(-1) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "multiply_227": {
                "variable": {
                    "value": "T_gaba",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(gaba_mat, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "T_gaba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + tf.exp(-(V - V0) / sigma))",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(tf.constant(gaba_mat, dtype=tf.float64), T_gaba)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(T_gaba, (-1,)), gaba_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_230": {
                "variable": {
                    "value": "T_gaba",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(T_gaba, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "gaba_mat.reshape(-1) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "dfdt",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(fire_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fire_t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_244": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dVdt, dmdt, dhdt, dndt, do_achdt, do_gabadt, dfdt]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_355": {
                "variable": {
                    "value": "init_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "state_vector",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[-71] * n_n + [0, 0, 0] * n_n + [0] * n_ach + [0] * n_gaba + [-9999999] * n_n",
                            "BinOp"
                        ],
                        [
                            "np.array(state_vector)",
                            "Call"
                        ],
                        [
                            "state_vector + 0.01 * state_vector * np.random.normal(size=state_vector.shape)",
                            "BinOp"
                        ],
                        [
                            "np.load('state_vector.npy')",
                            "Call"
                        ],
                        [
                            "state[-1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.transpose(o_ * (V - E_ach) * g_ach)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_119": {
                "input_tensor": {
                    "value": "tf.transpose(o_ * (V - E_gaba) * g_gaba)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_69": {
                "value": {
                    "value": "current_input.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "tensor": {
                    "value": "ind",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tf.range(n_n ** 2), ach_mat.reshape(-1) == 1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.range(n_n ** 2), gaba_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "o_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(o_, tf.reshape(ind, [-1, 1]), o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(o_, tf.reshape(ind, [-1, 1]), o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_n, n_n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "a": {
                    "value": "o_ * (V - E_ach) * g_ach",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "ind",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tf.range(n_n ** 2), ach_mat.reshape(-1) == 1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.range(n_n ** 2), gaba_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "o_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(o_, tf.reshape(ind, [-1, 1]), o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(o_, tf.reshape(ind, [-1, 1]), o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_n, n_n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "a": {
                    "value": "o_ * (V - E_gaba) * g_gaba",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_206": {
                "input": {
                    "value": "A_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(A, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_209": {
                "x": {
                    "value": "tf.greater(t, fire_t + t_delay)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(t, fire_t + t_max + t_delay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_212": {
                "value": {
                    "value": "ach_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((n_n, n_n))",
                            "Call"
                        ],
                        [
                            "np.load('ach_mat.npy')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "tensor": {
                    "value": "T_ach",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.greater(t, fire_t + t_delay), tf.less(t, fire_t + t_max + t_delay)), A_, Z_)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.constant(ach_mat, dtype=tf.float64), T_ach)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(T_ach, (-1,)), ach_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_228": {
                "value": {
                    "value": "gaba_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((n_n, n_n))",
                            "Call"
                        ],
                        [
                            "np.load('gaba_mat.npy')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "tensor": {
                    "value": "T_gaba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + tf.exp(-(V - V0) / sigma))",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(tf.constant(gaba_mat, dtype=tf.float64), T_gaba)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(T_gaba, (-1,)), gaba_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_241": {
                "input": {
                    "value": "fire_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X[-n_n:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_264": {
                "x": {
                    "value": "(10.0 - V_) / 40.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_288": {
                "x": {
                    "value": "(17.0 - V_) / 18.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_209": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load('time.npy', allow_pickle=True)[int(sys.argv[1])]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "fire_t + t_delay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_209": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load('time.npy', allow_pickle=True)[int(sys.argv[1])]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "fire_t + t_max + t_delay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_225": {
                "x": {
                    "value": "-(V - V0) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_263": {
                "x": {
                    "value": "(15.0 - V_) / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_285": {
                "x": {
                    "value": "(13.0 - V_) / 4.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_286": {
                "x": {
                    "value": "(V_ - 40.0) / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_289": {
                "x": {
                    "value": "(40.0 - V_) / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Tutorial/Day 5 Optimal Mind Control/static/run.py": {
        "tensorflow": {
            "Variable_63": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[0.0] * n_n ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_64": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(n_n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "ach_mat.reshape(-1) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "scatter_update_65": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "o_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.scatter_update(o_, ind, o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ],
                        [
                            "tf.Variable([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.scatter_update(o_, ind, o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tf.range(n_n ** 2), ach_mat.reshape(-1) == 1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.range(n_n ** 2), gaba_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(o_, (n_n, n_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[0.0] * n_n ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_73": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(n_n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "gaba_mat.reshape(-1) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "scatter_update_74": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "o_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.scatter_update(o_, ind, o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ],
                        [
                            "tf.Variable([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.scatter_update(o_, ind, o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tf.range(n_n ** 2), ach_mat.reshape(-1) == 1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.range(n_n ** 2), gaba_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "o_",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(o_, (n_n, n_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_111": {
                "variable": {
                    "value": "A_",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.5] * n_n",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "Z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(A_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_114": {
                "variable": {
                    "value": "T_ach",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater(t, fire_t + t_delay), tf.less(t, fire_t + t_max + t_delay))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "A_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(A, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Z_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(A_), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_115": {
                "variable": {
                    "value": "T_ach",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(ach_mat, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "T_ach",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.greater(t, fire_t + t_delay), tf.less(t, fire_t + t_max + t_delay)), A_, Z_)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.constant(ach_mat, dtype=tf.float64), T_ach)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(T_ach, (-1,)), ach_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_116": {
                "variable": {
                    "value": "T_ach",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(T_ach, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "ach_mat.reshape(-1) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "multiply_123": {
                "variable": {
                    "value": "T_gaba",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(gaba_mat, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "T_gaba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + tf.exp(-(V - V0) / sigma))",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(tf.constant(gaba_mat, dtype=tf.float64), T_gaba)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(T_gaba, (-1,)), gaba_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_124": {
                "variable": {
                    "value": "T_gaba",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(T_gaba, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "gaba_mat.reshape(-1) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "dfdt",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(fire_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fire_t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dVdt, dmdt, dhdt, dndt, do_achdt, do_gabadt, dfdt]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_225": {
                "variable": {
                    "value": "init_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "state_vector",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[-71] * n_n + [0, 0, 0] * n_n + [0] * n_ach + [0] * n_gaba + [-9999999] * n_n",
                            "BinOp"
                        ],
                        [
                            "np.array(state_vector)",
                            "Call"
                        ],
                        [
                            "state_vector + 0.01 * state_vector * np.random.normal(size=state_vector.shape)",
                            "BinOp"
                        ],
                        [
                            "np.load('state_vector.npy')",
                            "Call"
                        ],
                        [
                            "state[-1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.transpose(o_ * (V - E_ach) * g_ach)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "tf.transpose(o_ * (V - E_gaba) * g_gaba)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_58": {
                "value": {
                    "value": "current_input.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_58": {
                "x": {
                    "value": "t / sim_res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "tensor": {
                    "value": "o_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.scatter_update(o_, ind, o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ],
                        [
                            "tf.Variable([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.scatter_update(o_, ind, o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_n, n_n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "a": {
                    "value": "o_ * (V - E_ach) * g_ach",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "tensor": {
                    "value": "o_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.scatter_update(o_, ind, o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ],
                        [
                            "tf.Variable([0.0] * n_n ** 2, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.scatter_update(o_, ind, o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(o_, (n_n, n_n)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_n, n_n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "a": {
                    "value": "o_ * (V - E_gaba) * g_gaba",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_112": {
                "input": {
                    "value": "A_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(A, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_114": {
                "x": {
                    "value": "tf.greater(t, fire_t + t_delay)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(t, fire_t + t_max + t_delay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "ach_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((n_n, n_n))",
                            "Call"
                        ],
                        [
                            "np.load('ach_mat.npy')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "T_ach",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.greater(t, fire_t + t_delay), tf.less(t, fire_t + t_max + t_delay)), A_, Z_)",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.constant(ach_mat, dtype=tf.float64), T_ach)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(T_ach, (-1,)), ach_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_123": {
                "value": {
                    "value": "gaba_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((n_n, n_n))",
                            "Call"
                        ],
                        [
                            "np.load('gaba_mat.npy')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "tensor": {
                    "value": "T_gaba",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + tf.exp(-(V - V0) / sigma))",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(tf.constant(gaba_mat, dtype=tf.float64), T_gaba)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(T_gaba, (-1,)), gaba_mat.reshape(-1) == 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_130": {
                "input": {
                    "value": "fire_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X[-n_n:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_142": {
                "x": {
                    "value": "(10.0 - V_) / 40.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_158": {
                "x": {
                    "value": "(17.0 - V_) / 18.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_114": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load('time.npy')[int(sys.argv[1])]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "fire_t + t_delay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_114": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load('time.npy')[int(sys.argv[1])]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "fire_t + t_max + t_delay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_122": {
                "x": {
                    "value": "-(V - V0) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_141": {
                "x": {
                    "value": "(15.0 - V_) / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_155": {
                "x": {
                    "value": "(13.0 - V_) / 4.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_156": {
                "x": {
                    "value": "(V_ - 40.0) / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_159": {
                "x": {
                    "value": "(40.0 - V_) / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Tutorial/Day 5 Optimal Mind Control/static/tf_integrator.py": {
        "tensorflow": {
            "convert_to_tensor_75": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(t, name='t')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "t",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_76": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y0, name='y0')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scan_59": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "scan_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(t[:-1], time_delta_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y0, name='y0')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_66": {
                "variable": {
                    "value": "dt_cast",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._step_func(func, t, dt, y)",
                            "Call"
                        ],
                        [
                            "tf.cast(dy, dtype=y.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_61": {
                "values": {
                    "value": "[[y0], y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(fire_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fire_t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_46": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y[:n_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.F_b",
                            "Attribute"
                        ]
                    ]
                }
            },
            "greater_equal_48": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:n_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.F_b",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_51": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(z, z_)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "l_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t - fire_t",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(fire_t), dtype=fire_t.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_71": {
                "inputs": {
                    "value": "[k1, 2 * k2, 2 * k3, k4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_55": {
                "values": {
                    "value": "[out[:-n_], fire_t_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_40": {
                "input": {
                    "value": "fire_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[-n_:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "logical_and_51": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(y[:n_], F_b)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater_equal(out[:n_], F_b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Tutorial/Day 5 Optimal Mind Control/tf_integrator.py": {
        "tensorflow": {
            "disable_eager_execution_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_148": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(t, preferred_dtype=tf.float64, name='t')",
                            "Call"
                        ]
                    ]
                },
                "preferred_dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "t",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_149": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y0, name='y0')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scan_101": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "scan_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(t[:-1], time_delta_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y0, name='y0')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_122": {
                "variable": {
                    "value": "dt_cast",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._step_func(func, t, dt, y)",
                            "Call"
                        ],
                        [
                            "tf.cast(dy, dtype=y.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_103": {
                "values": {
                    "value": "[[y0], y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(fire_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fire_t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_87": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y[:n_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.F_b",
                            "Attribute"
                        ]
                    ]
                }
            },
            "greater_equal_89": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:n_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.F_b",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_91": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(z, z_)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "l_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t - fire_t",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(fire_t), dtype=fire_t.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_127": {
                "inputs": {
                    "value": "[k1, 2 * k2, 2 * k3, k4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_95": {
                "values": {
                    "value": "[out[:-n_], fire_t_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "fire_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[-n_:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "logical_and_91": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(y[:n_], F_b)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater_equal(out[:n_], F_b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Tutorial/Example Implementation Locust AL/static/tf_integrator.py": {
        "tensorflow": {
            "convert_to_tensor_75": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(t, name='t')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "t",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_76": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y0, name='y0')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scan_59": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "scan_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(t[:-1], time_delta_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y0, name='y0')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_66": {
                "variable": {
                    "value": "dt_cast",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._step_func(func, t, dt, y)",
                            "Call"
                        ],
                        [
                            "tf.cast(dy, dtype=y.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_61": {
                "values": {
                    "value": "[[y0], y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(fire_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fire_t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_46": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y[:n_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.F_b",
                            "Attribute"
                        ]
                    ]
                }
            },
            "greater_equal_48": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:n_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.F_b",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_51": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(z, z_)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "l_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t - fire_t",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(fire_t), dtype=fire_t.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_71": {
                "inputs": {
                    "value": "[k1, 2 * k2, 2 * k3, k4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_55": {
                "values": {
                    "value": "[out[:-n_], fire_t_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_40": {
                "input": {
                    "value": "fire_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[-n_:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "logical_and_51": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(y[:n_], F_b)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater_equal(out[:n_], F_b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Tutorial/Example Implementation Locust AL/tf_integrator.py": {
        "tensorflow": {
            "disable_eager_execution_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_148": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(t, preferred_dtype=tf.float64, name='t')",
                            "Call"
                        ]
                    ]
                },
                "preferred_dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "t",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_149": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y0, name='y0')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scan_101": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "scan_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(t[:-1], time_delta_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y0, name='y0')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_122": {
                "variable": {
                    "value": "dt_cast",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._step_func(func, t, dt, y)",
                            "Call"
                        ],
                        [
                            "tf.cast(dy, dtype=y.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_103": {
                "values": {
                    "value": "[[y0], y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(fire_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fire_t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_87": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y[:n_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.F_b",
                            "Attribute"
                        ]
                    ]
                }
            },
            "greater_equal_89": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:n_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.F_b",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_91": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(z, z_)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "l_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t - fire_t",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(fire_t), dtype=fire_t.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_127": {
                "inputs": {
                    "value": "[k1, 2 * k2, 2 * k3, k4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_95": {
                "values": {
                    "value": "[out[:-n_], fire_t_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "fire_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[-n_:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "logical_and_91": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(y[:n_], F_b)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater_equal(out[:n_], F_b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}