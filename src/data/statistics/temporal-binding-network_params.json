{
    "ops/utils.py": {
        "sklearn": {
            "confusion_matrix_27": {
                "variable": {
                    "value": "cf",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "test.py": {
        "sklearn": {
            "confusion_matrix_142": {
                "variable": {
                    "value": "cf",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([result[1] for result in results])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "video_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[np.argmax(np.mean(score, axis=0)) for score in scores]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "accuracy_score_148": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([result[1] for result in results])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "video_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[np.argmax(np.mean(score, axis=0)) for score in scores]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "tf_model_zoo/inceptionresnetv2/tensorflow_dump.py": {
        "tensorflow": {
            "pack_197": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_180": {
                "filename": {
                    "value": "checkpoints_dir + 'inception_resnet_v2_2016_08_30.ckpt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MakeDirs_181": {
                "dirname": {
                    "value": "checkpoints_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/checkpoints/'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Graph_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_226": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/inceptionv4/tensorflow_dump.py": {
        "tensorflow": {
            "pack_169": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_154": {
                "filename": {
                    "value": "checkpoints_dir + 'inception_v4.ckpt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MakeDirs_155": {
                "dirname": {
                    "value": "checkpoints_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/checkpoints/'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Graph_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_193": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/autoencoder/AdditiveGaussianNoiseAutoencoderRunner.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/autoencoder/AutoencoderRunner.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/autoencoder/MaskingNoiseAutoencoderRunner.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/autoencoder/Utils.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/autoencoder/VariationalAutoencoderRunner.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/autoencoder/autoencoder_models/Autoencoder.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_18": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.hidden, self.weights['w2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "initialize_all_variables_24": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_25": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "all_weights[w1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "autoencoder.Utils.xavier_init(self.n_input, self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "all_weights[b1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "all_weights[w2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden, self.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "all_weights[b2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_17": {
                "x": {
                    "value": "tf.matmul(self.x, self.weights['w1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_18": {
                "a": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['w2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "input_tensor": {
                    "value": "tf.pow(tf.sub(self.reconstruction, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "shape": {
                    "value": "[self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "shape": {
                    "value": "[self.n_hidden, self.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "shape": {
                    "value": "[self.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "a": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['w1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_21": {
                "x": {
                    "value": "tf.sub(self.reconstruction, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/autoencoder/autoencoder_models/DenoisingAutoencoder.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_22": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.hidden, self.weights['w2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "initialize_all_variables_28": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_29": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "all_weights[w1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "autoencoder.Utils.xavier_init(self.n_input, self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "all_weights[b1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "all_weights[w2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden, self.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "all_weights[b2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_89": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.hidden, self.weights['w2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "initialize_all_variables_95": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_96": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "all_weights[w1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "autoencoder.Utils.xavier_init(self.n_input, self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "all_weights[b1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "all_weights[w2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden, self.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "all_weights[b2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_19": {
                "x": {
                    "value": "tf.matmul(self.x + scale * tf.random_normal((n_input,)), self.weights['w1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "a": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['w2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_25": {
                "input_tensor": {
                    "value": "tf.pow(tf.sub(self.reconstruction, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "shape": {
                    "value": "[self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "shape": {
                    "value": "[self.n_hidden, self.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "[self.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_87": {
                "x": {
                    "value": "tf.matmul(tf.nn.dropout(self.x, self.keep_prob), self.weights['w1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "a": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['w2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "tf.pow(tf.sub(self.reconstruction, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "shape": {
                    "value": "[self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "shape": {
                    "value": "[self.n_hidden, self.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "shape": {
                    "value": "[self.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "a": {
                    "value": "self.x + scale * tf.random_normal((n_input,))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['w1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_25": {
                "x": {
                    "value": "tf.sub(self.reconstruction, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "a": {
                    "value": "tf.nn.dropout(self.x, self.keep_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['w1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_92": {
                "x": {
                    "value": "tf.sub(self.reconstruction, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/autoencoder/autoencoder_models/VariationalAutoencoder.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_16": {
                "variable": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.x, self.weights['w1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_17": {
                "variable": {
                    "value": "self.z_log_sigma_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.x, self.weights['log_sigma_w1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['log_sigma_b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_21": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.mul(tf.sqrt(tf.exp(self.z_log_sigma_sq)), eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_23": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.z, self.weights['w2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconstr_loss + latent_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "initialize_all_variables_33": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_34": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "all_weights[w1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "autoencoder.Utils.xavier_init(self.n_input, self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "all_weights[log_sigma_w1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "autoencoder.Utils.xavier_init(self.n_input, self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "all_weights[b1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "all_weights[log_sigma_b1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "all_weights[w2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden, self.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "all_weights[b2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_16": {
                "a": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['w1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "a": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['log_sigma_w1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_23": {
                "a": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights['w2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "input_tensor": {
                    "value": "tf.pow(tf.sub(self.reconstruction, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_27": {
                "input_tensor": {
                    "value": "1 + self.z_log_sigma_sq - tf.square(self.z_mean) - tf.exp(self.z_log_sigma_sq)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "shape": {
                    "value": "[self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "shape": {
                    "value": "[self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "shape": {
                    "value": "[self.n_hidden, self.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "shape": {
                    "value": "[self.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_21": {
                "x": {
                    "value": "tf.exp(self.z_log_sigma_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_26": {
                "x": {
                    "value": "tf.sub(self.reconstruction, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_21": {
                "x": {
                    "value": "self.z_log_sigma_sq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_29": {
                "x": {
                    "value": "self.z_log_sigma_sq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_28": {
                "x": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/dp_sgd/dp_mnist/dp_mnist.py": {
        "tensorflow": {
            "DEFINE_integer_34": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The training batch size.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "batches_per_lot",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches per lot.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "num_training_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of training steps.This counts number of lots.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_43": {
                "name": {
                    "value": "randomize",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If true, randomize the input data; otherwise use a fixed seed and non-randomized input.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_46": {
                "name": {
                    "value": "freeze_bottom_layers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If true, only train on the logit layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_48": {
                "name": {
                    "value": "save_mistakes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If true, save the mistakes made during testing.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_50": {
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "start learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "end_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "end learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_52": {
                "name": {
                    "value": "lr_saturate_epochs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate saturate epochs; set to 0 for a constant learning rate of --lr.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "projection_dimensions",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "PCA projection dimensions, or 0 for no projection.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "num_hidden_layers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hidden layers in the network",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "hidden_layer_num_units",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units per hidden layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_63": {
                "name": {
                    "value": "default_gradient_l2norm_bound",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "norm clipping",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "num_conv_layers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of convolutional layers to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "training_data_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/mnist/mnist_train.tfrecord",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Location of the training data.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "eval_data_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/mnist/mnist_test.tfrecord",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Location of the eval data.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_73": {
                "name": {
                    "value": "eval_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluate the model every eval_steps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_78": {
                "name": {
                    "value": "accountant_type",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "Moments",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Moments, Amortized.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_81": {
                "name": {
                    "value": "eps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Start privacy spending for one epoch of training, used if accountant_type is Amortized.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_84": {
                "name": {
                    "value": "end_eps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "End privacy spending for one epoch of training, used if accountant_type is Amortized.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_87": {
                "name": {
                    "value": "eps_saturate_epochs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Stop varying epsilon after eps_saturate_epochs. Set to 0 for constant eps of --eps. Used if accountant_type is Amortized.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_91": {
                "name": {
                    "value": "delta",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Privacy spending for training. Constant through training, used if accountant_type is Amortized.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_94": {
                "name": {
                    "value": "sigma",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Noise sigma, used only if accountant_type is Moments",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_100": {
                "name": {
                    "value": "pca_eps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Privacy spending for PCA, used if accountant_type is Amortized.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_103": {
                "name": {
                    "value": "pca_delta",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.005",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Privacy spending for PCA, used if accountant_type is Amortized.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_107": {
                "name": {
                    "value": "pca_sigma",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "7.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Noise sigma for PCA, used if accountant_type is Moments",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_110": {
                "name": {
                    "value": "target_eps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.125,0.25,0.5,1,2,4,8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Log the privacy loss for the target epsilon's. Only used when accountant_type is Moments.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_113": {
                "name": {
                    "value": "target_delta",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum delta for --terminate_based_on_privacy.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_115": {
                "name": {
                    "value": "terminate_based_on_privacy",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Stop training if privacy spent exceeds (max(--target_eps), --target_delta), even if --num_training_steps have not yet been completed.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_120": {
                "name": {
                    "value": "save_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/mnist_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for saving model outputs.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "string_input_producer_141": {
                "variable": {
                    "value": "file_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[mnist_data_file]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordReader_142": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_144": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image/encoded': tf.FixedLenFeature(shape=(), dtype=tf.string), 'image/class/label': tf.FixedLenFeature([1], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.decode_png(example['image/encoded'], channels=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(example['image/encoded'], channels=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [IMAGE_SIZE * IMAGE_SIZE])",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[IMAGE_SIZE * IMAGE_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_153": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(example['image/class/label'], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_157": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "capacity": {
                    "value": "batch_size * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "batch_size * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_162": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "softmax_189": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.LayerParameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_192": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_196": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_198": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_199": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_275": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.LayerParameters()",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.one_hot(labels, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_310": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_312": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_326": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_340": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_341": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_342": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "run_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_png_149": {
                "contents": {
                    "value": "example['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_268": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_338": {
                "variable": {
                    "value": "gd_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_276": {
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "input_tensor": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits, tf.one_hot(labels, 10))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(cost, [0]) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_322": {
                "variable": {
                    "value": "assign_pca_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "projection",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pca_projection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp_pca.ComputeDPPrincipalProjection(all_data, network_parameters.projection_dimensions, gaussian_sanitizer, [FLAGS.pca_eps, FLAGS.pca_delta], pca_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_146": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_147": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_316": {
                "name_or_scope": {
                    "value": "pca",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "initialize_variables_346": {
                "var_list": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/dp_sgd/dp_optimizer/dp_optimizer.py": {
        "tensorflow": {
            "equal_153": {
                "variable": {
                    "value": "update_cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.mod(self._batch_count, tf.constant(self._batches_per_lot))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_235": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "update_cond",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.constant(0), tf.mod(self._batch_count, tf.constant(self._batches_per_lot)))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : last_in_lot_op(loss, var_list, global_step)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : non_last_in_lot_op(loss, var_list)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "self._batch_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_count",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_57": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_129": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_232": {
                "variable": {
                    "value": "last_step_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[apply_san_grads] + resets_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_241": {
                "*inputs": {
                    "value": "update_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(update_cond, lambda : last_in_lot_op(loss, var_list, global_step), lambda : non_last_in_lot_op(loss, var_list))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_86": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_153": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mod_154": {
                "x1": {
                    "value": "self._batch_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "tf.constant(self._batches_per_lot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_180": {
                "*inputs": {
                    "value": "*update_ops_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "div_211": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_acc_v.assign_add(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(self._batches_per_lot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "grad_acc_for",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "v_grad_accum",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "utils.GetTensorOpName(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_155": {
                "value": {
                    "value": "self._batches_per_lot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_216": {
                "control_inputs": {
                    "value": "normalized_grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_226": {
                "control_inputs": {
                    "value": "[apply_san_grads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_228": {
                "variable": {
                    "value": "reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros_like(acc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_212": {
                "x": {
                    "value": "self._batches_per_lot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "var_list",
                            "Name"
                        ]
                    ]
                }
            },
            "slice_94": {
                "input_": {
                    "value": "tf.shape(px_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_228": {
                "input": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "px_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/dp_sgd/dp_optimizer/dp_pca.py": {
        "tensorflow": {
            "l2_normalize_40": {
                "variable": {
                    "value": "normalized_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "covar",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(normalized_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "normalized_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(data, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_42": {
                "variable": {
                    "value": "saved_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(normalized_data), normalized_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_43": {
                "variable": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.shape(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_61": {
                "variable": {
                    "value": "(_, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "eigvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "projection_dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "topk_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "topk_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(topk_indices, [projection_dims])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[projection_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "saned_covar",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "saned_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "covar",
                            "Name"
                        ],
                        [
                            "sanitizer.sanitize(tf.reshape(covar, [1, -1]), eps_delta, sigma=sigma, option=san.ClipOption(1.0, False), num_examples=num_examples)",
                            "Call"
                        ],
                        [
                            "tf.reshape(saned_covar, saved_shape)",
                            "Call"
                        ],
                        [
                            "0.5 * (saned_covar + tf.transpose(saned_covar))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(covar)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_64": {
                "a": {
                    "value": "eigvecs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_41": {
                "a": {
                    "value": "normalized_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(data, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_43": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_64": {
                "params": {
                    "value": "tf.transpose(eigvecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "topk_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(topk_indices, [projection_dims])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "tensor": {
                    "value": "covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(normalized_data), normalized_data)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "a": {
                    "value": "saned_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "covar",
                            "Name"
                        ],
                        [
                            "sanitizer.sanitize(tf.reshape(covar, [1, -1]), eps_delta, sigma=sigma, option=san.ClipOption(1.0, False), num_examples=num_examples)",
                            "Call"
                        ],
                        [
                            "tf.reshape(saned_covar, saved_shape)",
                            "Call"
                        ],
                        [
                            "0.5 * (saned_covar + tf.transpose(saned_covar))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/dp_sgd/dp_optimizer/sanitizer.py": {
        "tensorflow": {
            "reduce_sum_122": {
                "variable": {
                    "value": "saned_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.BatchClipByL2norm(x, l2norm_bound)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_115": {
                "variable": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_93": {
                "control_inputs": {
                    "value": "[tf.Assert(tf.greater(eps, 0), ['eps needs to be greater than 0']), tf.Assert(tf.greater(delta, 0), ['delta needs to be greater than 0'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_118": {
                "control_inputs": {
                    "value": "[privacy_accum_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_102": {
                "x": {
                    "value": "2.0 * tf.log(1.25 / delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_115": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.BatchClipByL2norm(x, l2norm_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_119": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.BatchClipByL2norm(x, l2norm_bound)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Assert_94": {
                "condition": {
                    "value": "tf.greater(eps, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['eps needs to be greater than 0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_96": {
                "condition": {
                    "value": "tf.greater(delta, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['delta needs to be greater than 0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_94": {
                "x": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_96": {
                "x": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_102": {
                "x": {
                    "value": "1.25 / delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/dp_sgd/dp_optimizer/utils.py": {
        "tensorflow": {
            "reshape_149": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, conv_param.in_size, conv_param.in_size, conv_param.in_channels])",
                            "Call"
                        ],
                        [
                            "mpd",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, num_inputs])",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, projection)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, hidden_weights)",
                            "Call"
                        ],
                        [
                            "outputs + hidden_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, conv_param.in_size, conv_param.in_size, conv_param.in_channels])",
                            "Call"
                        ],
                        [
                            "mpd",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, num_inputs])",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, projection)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, hidden_weights)",
                            "Call"
                        ],
                        [
                            "outputs + hidden_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, conv_param.in_size, conv_param.in_size, conv_param.in_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "conv_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([conv_param.patch_size, conv_param.patch_size, conv_param.in_channels, conv_param.out_channels], stddev=conv_std_dev)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "conv_param.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_weights_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'%s_conv_weight' % conv_param.name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_125": {
                "variable": {
                    "value": "conv_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([conv_param.out_channels], stddev=conv_param.bias_stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "conv_param.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_bias_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'%s_conv_bias' % conv_param.name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_132": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, conv_param.in_size, conv_param.in_size, conv_param.in_channels])",
                            "Call"
                        ],
                        [
                            "mpd",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, num_inputs])",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, projection)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, hidden_weights)",
                            "Call"
                        ],
                        [
                            "outputs + hidden_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(outputs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "conv_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([conv_param.patch_size, conv_param.patch_size, conv_param.in_channels, conv_param.out_channels], stddev=conv_std_dev), trainable=conv_param.trainable, name=conv_weights_name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, conv_param.stride, conv_param.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "relud",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv + conv_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_137": {
                "variable": {
                    "value": "mpd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relud",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv + conv_bias)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, conv_param.max_pool_size, conv_param.max_pool_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, conv_param.max_pool_stride, conv_param.max_pool_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "projection",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_inputs, network_parameters.projection_dimensions], stddev=1.0 / math.sqrt(num_inputs))",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "projection",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, conv_param.in_size, conv_param.in_size, conv_param.in_channels])",
                            "Call"
                        ],
                        [
                            "mpd",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, num_inputs])",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, projection)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, hidden_weights)",
                            "Call"
                        ],
                        [
                            "outputs + hidden_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(outputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "projection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([num_inputs, network_parameters.projection_dimensions], stddev=1.0 / math.sqrt(num_inputs)), trainable=False, name='projection')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_164": {
                "variable": {
                    "value": "hidden_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_inputs, num_units], stddev=1.0 / math.sqrt(num_inputs))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_weights_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'%s_weight' % layer_parameters.name",
                            "BinOp"
                        ]
                    ]
                },
                "trainable": {
                    "value": "layer_parameters.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, conv_param.in_size, conv_param.in_size, conv_param.in_channels])",
                            "Call"
                        ],
                        [
                            "mpd",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, num_inputs])",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, projection)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, hidden_weights)",
                            "Call"
                        ],
                        [
                            "outputs + hidden_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(outputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hidden_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([num_inputs, num_units], stddev=1.0 / math.sqrt(num_inputs)), name=hidden_weights_name, trainable=layer_parameters.trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_237": {
                "variable": {
                    "value": "saved_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_238": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "saved_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(0, [batch_size, [-1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_240": {
                "variable": {
                    "value": "upper_bound_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.slice(saved_shape, [0], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(1.0 / upper_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_243": {
                "variable": {
                    "value": "l2norm_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(t2 * t2, [1]) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_245": {
                "variable": {
                    "value": "clipped_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.diag(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "t2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(0, [batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(0, [tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "clipped_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clipped_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.diag(scale), t2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(clipped_t, saved_shape, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_268": {
                "variable": {
                    "value": "saved_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(0, [tf.slice(saved_shape, [0], [1]), -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_270": {
                "variable": {
                    "value": "t_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(0, [batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(0, [tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_312": {
                "value": {
                    "value": "table",
                    "type": "Name",
                    "possible_values": [
                        [
                            "numpy.zeros((m + 1, m + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_179": {
                "variable": {
                    "value": "hidden_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([num_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_biases_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'%s_bias' % layer_parameters.name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_189": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, conv_param.in_size, conv_param.in_size, conv_param.in_channels])",
                            "Call"
                        ],
                        [
                            "mpd",
                            "Name"
                        ],
                        [
                            "tf.reshape(outputs, [-1, num_inputs])",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, projection)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, hidden_weights)",
                            "Call"
                        ],
                        [
                            "outputs + hidden_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_275": {
                "tensor": {
                    "value": "t_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sign(t2) * tf.nn.relu(t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_118": {
                "shape": {
                    "value": "[conv_param.patch_size, conv_param.patch_size, conv_param.in_channels, conv_param.out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "conv_std_dev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (conv_param.patch_size * math.sqrt(conv_param.in_channels))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "truncated_normal_126": {
                "shape": {
                    "value": "[conv_param.out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "conv_param.bias_stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_153": {
                "shape": {
                    "value": "[num_inputs, network_parameters.projection_dimensions]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(num_inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_165": {
                "shape": {
                    "value": "[num_inputs, num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(num_inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_239": {
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[batch_size, [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_240": {
                "input_": {
                    "value": "saved_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_241": {
                "value": {
                    "value": "1.0 / upper_bound",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_244": {
                "x": {
                    "value": "l2norm_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.reduce_sum(t2 * t2, [1]) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_bound_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill(tf.slice(saved_shape, [0], [1]), tf.constant(1.0 / upper_bound))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_245": {
                "diagonal": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(l2norm_inv, upper_bound_inv) * upper_bound",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_269": {
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tf.slice(saved_shape, [0], [1]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_271": {
                "x": {
                    "value": "t2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(0, [batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(0, [tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_271": {
                "features": {
                    "value": "t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "input_tensor": {
                    "value": "t2 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_290": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_269": {
                "input_": {
                    "value": "saved_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_272": {
                "input_tensor": {
                    "value": "t_abs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.abs(t2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/dp_sgd/per_example_gradients/per_example_gradients.py": {
        "tensorflow": {
            "gradients_339": {
                "variable": {
                    "value": "interface_gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "merged_interface",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "_ListUnion(merged_interface, interface[x])",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "grad_ys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'gradients'",
                            "MethodArgument"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "colocate_gradients_with_ops",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "gate_gradients": {
                    "value": "gate_gradients",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_190": {
                "variable": {
                    "value": "x_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list_1 + list_2",
                            "BinOp"
                        ],
                        [
                            "xs",
                            "Name"
                        ],
                        [
                            "y.op.inputs",
                            "Attribute"
                        ],
                        [
                            "xs",
                            "Name"
                        ],
                        [
                            "xs",
                            "Name"
                        ],
                        [
                            "xs",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "variable": {
                    "value": "z_grads_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_248": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "conv_px",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.conv2d(input_x, w_x, strides=strides, padding=padding) for (input_x, w_x) in zip(input_px, w_px)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_272": {
                "variable": {
                    "value": "gradients_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(0, conv_px)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "w_px",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.identity(w) for example in xrange(batch_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "z_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "colocate_gradients_with_ops": {
                    "value": "self.colocate_gradients_with_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gate_gradients": {
                    "value": "self.gate_gradients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_234": {
                "input_": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[example] + [0] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[1] + input_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_239": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_240": {
                "input": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_px",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.op.get_attr('strides')",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.op.get_attr('padding')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/multiple_teachers/deep_cnn.py": {
        "tensorflow": {
            "DEFINE_integer_31": {
                "name": {
                    "value": "dropout_seed",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "seed for dropout.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Nb of images in a batch.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "epochs_per_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "350",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Nb epochs per decay",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "100 * learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_111": {
                "variable": {
                    "value": "pool1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1, 0.3, seed=FLAGS.dropout_seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_148": {
                "variable": {
                    "value": "pool2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.lrn(conv2, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75, name='norm2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_342": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_343": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(local4, weights), biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(local2, weights), biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "inference_deeper(train_data_node, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "inference(train_data_node, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "inference_deeper(train_data_node)",
                            "Call"
                        ],
                        [
                            "inference(train_data_node)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_347": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits, labels, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_367": {
                "variable": {
                    "value": "loss_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_368": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_396": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "initial_learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(FLAGS.learning_rate) / 100.0",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_batches_per_epoch * FLAGS.epochs_per_decay)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "LEARNING_RATE_DECAY_FACTOR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_419": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_576": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                }
            },
            "Saver_578": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variable_averages.variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_55": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_104": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_105": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_131": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.lrn(pool1, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75, name='norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_133": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_134": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "reshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(norm2, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "local3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(reshape, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "local4",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(local3, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_188": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_212": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_214": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_215": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_223": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1, 0.3, seed=FLAGS.dropout_seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_225": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_226": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_234": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv2, 0.3, seed=FLAGS.dropout_seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_236": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_237": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_247": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_249": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_250": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_258": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_260": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_261": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_269": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_271": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_272": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_283": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv6, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 64, 128], stddev=0.0001, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=first_conv_shape, stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 96], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 96, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 192, 192], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 192, 192], stddev=0.0001, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_285": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv2, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv3, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv4, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv5, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv6, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_286": {
                "variable": {
                    "value": "conv7",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "variable": {
                    "value": "reshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_299": {
                "variable": {
                    "value": "local1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(reshape, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_308": {
                "variable": {
                    "value": "local2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(local1, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_321": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local2, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [64], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [384], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [96], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [192], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [FLAGS.nb_labels], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_350": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_354": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_408": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(initial_learning_rate, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_424": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_443": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "train_node_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(FLAGS.batch_size, image_size, image_size, num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Variable_463": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_470": {
                "variable": {
                    "value": "train_labels_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "train_labels_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(FLAGS.batch_size,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Saver_488": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_493": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_496": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_573": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(local4, weights), biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(local2, weights), biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "inference_deeper(train_data_node, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "inference(train_data_node, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "inference_deeper(train_data_node)",
                            "Call"
                        ],
                        [
                            "inference(train_data_node)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_600": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_54": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_76": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_to_collection_79": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mul(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1, 0.3, seed=FLAGS.dropout_seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "FLAGS.dropout_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_136": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv2, 0.3, seed=FLAGS.dropout_seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "FLAGS.dropout_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "local3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_166": {
                "variable": {
                    "value": "local3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "local3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(reshape, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local3, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "FLAGS.dropout_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_177": {
                "variable": {
                    "value": "local4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "local4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(local3, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local4, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "FLAGS.dropout_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "softmax_linear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_239": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "FLAGS.dropout_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "conv6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_274": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv6, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "FLAGS.dropout_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "conv7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "local1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "local2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_310": {
                "variable": {
                    "value": "local2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "local2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(local1, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local2, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "FLAGS.dropout_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "softmax_linear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_354": {
                "key": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_407": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_423": {
                "control_inputs": {
                    "value": "[apply_gradient_op, variables_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_78": {
                "t": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_132": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_163": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_174": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_187": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "a": {
                    "value": "local4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(local3, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local4, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 384], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[384, 192], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=1 / 192.0, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[192, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_213": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_224": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_235": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_248": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_259": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_270": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_284": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_298": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_307": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_320": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "a": {
                    "value": "local2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(local1, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local2, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 384], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[384, 192], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=1 / 192.0, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[192, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_variables_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_164": {
                "a": {
                    "value": "reshape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(pool2, [FLAGS.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv7, [FLAGS.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 384], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[384, 192], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=1 / 192.0, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[192, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_175": {
                "a": {
                    "value": "local3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(reshape, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local3, 0.5, seed=FLAGS.dropout_seed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 384], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[384, 192], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=1 / 192.0, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[192, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_299": {
                "a": {
                    "value": "reshape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(pool2, [FLAGS.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv7, [FLAGS.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 384], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[384, 192], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=1 / 192.0, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[192, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_308": {
                "a": {
                    "value": "local1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(reshape, weights) + biases, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 384], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[384, 192], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=1 / 192.0, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[192, 192], stddev=0.05, wd=0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', [192, FLAGS.nb_labels], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_496": {
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/multiple_teachers/input.py": {
        "tensorflow": {
            "IsDirectory_41": {
                "dirname": {
                    "value": "dest_directory",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_42": {
                "dirname": {
                    "value": "dest_directory",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_262": {
                "filename": {
                    "value": "filename + '.npy'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_281": {
                "filename": {
                    "value": "filename + '.npy'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_179": {
                "filename": {
                    "value": "data_dir + file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_206": {
                "filename": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preprocessed_files",
                            "Name"
                        ],
                        [
                            "cifar10_files",
                            "Name"
                        ],
                        [
                            "train_files",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/multiple_teachers/train_student.py": {
        "tensorflow": {
            "DEFINE_string_31": {
                "name": {
                    "value": "dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "svhn",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to use",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "nb_labels",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of output classes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "data_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Temporary storage",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Where model chkpt are saved",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_36": {
                "name": {
                    "value": "teachers_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where teachers checkpoints are stored.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "teachers_max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "3000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of steps teachers were ran.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "3000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of steps to run student.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "nb_teachers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Teachers in the ensemble.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "stdnt_share",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Student share (last index) of the test data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "lap_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Scale of the Laplacian noise added for privacy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/multiple_teachers/train_teachers.py": {
        "tensorflow": {
            "DEFINE_string_28": {
                "name": {
                    "value": "dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "svhn",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to use",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "nb_labels",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of output classes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "data_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Temporary storage",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Where model ckpt are saved",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "3000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training steps to run.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "nb_teachers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Teachers in the ensemble.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "teacher_id",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "ID of teacher being trained.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/differential_privacy/privacy_accountant/tf/accountant.py": {
        "tensorflow": {
            "Variable_64": {
                "variable": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "eps_squared_sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "delta_sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_355": {
                "variable": {
                    "value": "binomial",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[t + 1, t + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "exponents",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_372": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mul(x, tf.exp(exponents))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_389": {
                "variable": {
                    "value": "binomial_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[moment_order, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, moment_order + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_392": {
                "variable": {
                    "value": "qs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant([i * 1.0 for i in range(moment_order + 1)], dtype=tf.float64) * tf.cast(tf.log(q), dtype=tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "variable": {
                    "value": "term0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_398": {
                "variable": {
                    "value": "term1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "amortize_eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "amortize_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "amortize_ratio * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_235": {
                "*inputs": {
                    "value": "*moments_accum_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "squeeze_399": {
                "input": {
                    "value": "tf.log(tf.cast(q * term0 + (1.0 - q) * term1, tf.float64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_88": {
                "control_inputs": {
                    "value": "[tf.Assert(tf.greater(delta, 0), ['delta needs to be greater than 0'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_100": {
                "*inputs": {
                    "value": "*[tf.assign_add(self._eps_squared_sum, tf.square(amortize_eps)), tf.assign_add(self._delta_sum, amortize_delta)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_190": {
                "initial_value": {
                    "value": "numpy.float64(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'log_moments-%d' % moment_order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_369": {
                "x": {
                    "value": "exponents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_399": {
                "x": {
                    "value": "tf.cast(q * term0 + (1.0 - q) * term1, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "1.0 + amortize_ratio * (tf.exp(eps) - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_234": {
                "ref": {
                    "value": "self._log_moments[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "moment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_log_moment(sigma, q, self._moment_orders[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_392": {
                "value": {
                    "value": "[i * 1.0 for i in range(moment_order + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_393": {
                "x": {
                    "value": "tf.log(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_399": {
                "x": {
                    "value": "q * term0 + (1.0 - q) * term1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Assert_89": {
                "condition": {
                    "value": "tf.greater(delta, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['delta needs to be greater than 0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_394": {
                "x": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(num_examples, tf.float64) * 1.0 / self._total_examples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_89": {
                "x": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_deltas",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_add_100": {
                "ref": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(amortize_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_102": {
                "ref": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "amortize_delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(amortize_ratio * delta, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_101": {
                "x": {
                    "value": "amortize_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0)), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_98": {
                "x": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_eps",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/data/build_mscoco_data.py": {
        "tensorflow": {
            "DEFINE_string_102": {
                "name": {
                    "value": "train_image_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/train2014/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training image directory.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_104": {
                "name": {
                    "value": "val_image_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/val2014",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation image directory.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_107": {
                "name": {
                    "value": "train_captions_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/captions_train2014.json",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training captions JSON file.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_109": {
                "name": {
                    "value": "val_captions_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/captions_val2014.json",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation captions JSON file.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_112": {
                "name": {
                    "value": "output_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_114": {
                "name": {
                    "value": "train_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_116": {
                "name": {
                    "value": "val_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_118": {
                "name": {
                    "value": "test_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in testing TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_121": {
                "name": {
                    "value": "start_word",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "<S>",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Special word added to the beginning of each sentence.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_123": {
                "name": {
                    "value": "end_word",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "</S>",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Special word added to the end of each sentence.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_125": {
                "name": {
                    "value": "unknown_word",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "<UNK>",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Special word meaning 'unknown'.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_127": {
                "name": {
                    "value": "min_word_count",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of occurrences of each word in the training set for inclusion in the vocabulary.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_130": {
                "name": {
                    "value": "word_counts_output_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/word_counts.txt",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Output vocabulary file of word counts.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_133": {
                "name": {
                    "value": "num_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Features_222": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "{'image/image_id': _int64_feature(image.image_id), 'image/data': _bytes_feature(encoded_image)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FeatureLists_230": {
                "variable": {
                    "value": "feature_lists",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_list": {
                    "value": "{'image/caption': _bytes_feature_list(caption), 'image/caption_ids': _int64_feature_list(caption_ids)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "SequenceExample_234": {
                "variable": {
                    "value": "sequence_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "context": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Features(feature={'image/image_id': _int64_feature(image.image_id), 'image/data': _bytes_feature(encoded_image)})",
                            "Call"
                        ]
                    ]
                },
                "feature_lists": {
                    "value": "feature_lists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.FeatureLists(feature_list={'image/caption': _bytes_feature_list(caption), 'image/caption_ids': _int64_feature_list(caption_ids)})",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_326": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_168": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "self._encoded_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_172": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._encoded_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Feature_184": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_189": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[str(value)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FeatureList_194": {
                "feature": {
                    "value": "[_int64_feature(v) for v in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "FeatureList_199": {
                "feature": {
                    "value": "[_bytes_feature(v) for v in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_271": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_213": {
                "name": {
                    "value": "image.filename",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_369": {
                "name": {
                    "value": "FLAGS.word_counts_output_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_407": {
                "name": {
                    "value": "captions_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "IsDirectory_453": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_454": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_184": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_189": {
                "value": {
                    "value": "[str(value)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/evaluate.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/im2txt/im2txt/inference_utils/caption_generator_test.py": {
        "tensorflow": {
            "main_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/inference_utils/inference_wrapper_base.py": {
        "tensorflow": {
            "Saver_116": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_136": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SaverDef_143": {
                "variable": {
                    "value": "saver_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_146": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "saver_def": {
                    "value": "saver_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.SaverDef()",
                            "Call"
                        ]
                    ]
                }
            },
            "fatal_71": {
                "msg": {
                    "value": "Please implement build_model in subclass",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "IsDirectory_89": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_90": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_114": {
                "msg": {
                    "value": "Building model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_135": {
                "msg": {
                    "value": "Loading GraphDef from file: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "graph_def_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "import_graph_def_139": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_142": {
                "msg": {
                    "value": "Loading SaverDef from file: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "saver_def_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "fatal_162": {
                "msg": {
                    "value": "Please implement feed_image in subclass",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fatal_179": {
                "msg": {
                    "value": "Please implement inference_step in subclass",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_95": {
                "msg": {
                    "value": "Loading model from checkpoint: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_97": {
                "msg": {
                    "value": "Successfully loaded checkpoint: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "os.path.basename(checkpoint_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_137": {
                "name": {
                    "value": "graph_def_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_144": {
                "name": {
                    "value": "saver_def_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/inference_utils/vocabulary.py": {
        "tensorflow": {
            "info_45": {
                "msg": {
                    "value": "Initializing vocabulary from file: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_56": {
                "msg": {
                    "value": "'Created vocabulary with %d words' % len(vocab)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_43": {
                "filename": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "fatal_44": {
                "msg": {
                    "value": "Vocab file %s not found.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_47": {
                "name": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/ops/image_embedding.py": {
        "tensorflow": {
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_94": {
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/ops/image_embedding_test.py": {
        "tensorflow": {
            "placeholder_37": {
                "variable": {
                    "value": "self._images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, height, width, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_variables_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_77": {
                "key": {
                    "value": "collection",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/ops/image_processing.py": {
        "tensorflow": {
            "convert_image_dtype_105": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_40": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_57": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_crop_117": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_39": {
                "name": {
                    "value": "flip_horizontal",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "distort_color",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_46": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_47": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_48": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.032",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_49": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "decode",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoded_image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_100": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "encoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_51": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_52": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_53": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_54": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.032",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "decode_png_102": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "encoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.032)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, size=[resize_height, resize_width], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, height, width)",
                            "Call"
                        ],
                        [
                            "distort_image(image, thread_id)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/ops/inputs.py": {
        "tensorflow": {
            "parse_single_sequence_example_40": {
                "variable": {
                    "value": "(context, sequence)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized",
                    "type": "Variable",
                    "possible_values": []
                },
                "context_features": {
                    "value": "{image_feature: tf.FixedLenFeature([], dtype=tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "sequence_features": {
                    "value": "{caption_feature: tf.FixedLenSequenceFeature([], dtype=tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "batch_join_191": {
                "variable": {
                    "value": "(images, input_seqs, target_seqs, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors_list": {
                    "value": "enqueue_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "queue_capacity",
                    "type": "Variable",
                    "possible_values": []
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_and_pad",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "string_input_producer_97": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "shard_queue_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'filename_queue'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RandomShuffleQueue_101": {
                "variable": {
                    "value": "values_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "min_queue_examples + 100 * batch_size",
                            "BinOp"
                        ],
                        [
                            "values_per_shard + 3 * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "values_per_shard * input_queue_capacity_factor",
                            "BinOp"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'random_' + value_queue_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "string_input_producer_107": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "shard_queue_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'filename_queue'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "FIFOQueue_110": {
                "variable": {
                    "value": "values_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "min_queue_examples + 100 * batch_size",
                            "BinOp"
                        ],
                        [
                            "values_per_shard + 3 * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'fifo_' + value_queue_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_queue_runner_117": {
                "qr": {
                    "value": "tf.train.queue_runner.QueueRunner(values_queue, enqueue_ops)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "input_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sub(caption_length, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_186": {
                "variable": {
                    "value": "input_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "caption",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence[caption_feature]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "input_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.sub(caption_length, 1), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_187": {
                "variable": {
                    "value": "target_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "caption",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence[caption_feature]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "input_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.sub(caption_length, 1), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_188": {
                "variable": {
                    "value": "indicator",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.sub(caption_length, 1), 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_199": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fatal_91": {
                "msg": {
                    "value": "Found no input files matching %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "file_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_93": {
                "msg": {
                    "value": "Prefetching values from %d files matching %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(data_files)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "file_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "QueueRunner_117": {
                "queue": {
                    "value": "values_queue",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=capacity, min_after_dequeue=min_queue_examples, dtypes=[tf.string], name='random_' + value_queue_name)",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(capacity=capacity, dtypes=[tf.string], name='fifo_' + value_queue_name)",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Glob_89": {
                "filename": {
                    "value": "pattern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "file_pattern.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_121": {
                "x": {
                    "value": "values_queue.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_183": {
                "input": {
                    "value": "caption",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence[caption_feature]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_199": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_200": {
                "input_tensor": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(tf.reduce_sum(mask, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_201": {
                "input_tensor": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(tf.reduce_sum(mask, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_202": {
                "input_tensor": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(tf.reduce_sum(mask, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_43": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_46": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/run_inference.py": {
        "tensorflow": {
            "DEFINE_string_34": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Model checkpoint file or directory containing a model checkpoint file.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "vocab_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file containing the vocabulary.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "input_files",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "File pattern or comma-separated list of file patterns of image files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_45": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_58": {
                "msg": {
                    "value": "Running caption generation on %d files matching %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(filenames)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "FLAGS.input_files",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_61": {
                "graph": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_57": {
                "filename": {
                    "value": "file_pattern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.input_files.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_71": {
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/show_and_tell_model.py": {
        "tensorflow": {
            "TFRecordReader_55": {
                "variable": {
                    "value": "self.reader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_59": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-self.config.initializer_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.config.initializer_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_194": {
                "variable": {
                    "value": "self.inception_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "InceptionV3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_247": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.config.num_lstm_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "variable": {
                    "value": "lstm_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(lstm_outputs, [-1, lstm_cell.output_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, lstm_cell.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_342": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.GLOBAL_STEP, tf.GraphKeys.VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "image_feed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_feed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "input_feed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_feed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.process_image(image_feed)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "variable": {
                    "value": "input_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_feed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.int64, shape=[None], name='input_feed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_208": {
                "value": {
                    "value": "self.config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_222": {
                "variable": {
                    "value": "embedding_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "map",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.vocab_size, self.config.embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_226": {
                "variable": {
                    "value": "seq_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='map', shape=[self.config.vocab_size, self.config.embedding_size], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_seqs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_250": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=self.config.num_lstm_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell, input_keep_prob=self.config.lstm_dropout_keep_prob, output_keep_prob=self.config.lstm_dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.config.lstm_dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.config.lstm_dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.target_seqs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_307": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(self.input_mask, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_310": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(inputs=lstm_outputs, num_outputs=self.config.vocab_size, activation_fn=None, weights_initializer=self.initializer, scope=logits_scope)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.target_seqs, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "div_311": {
                "variable": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.mul(losses, weights))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_total_loss_315": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_331": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.inception_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "image_embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "seq_embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_221": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "lstm",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_270": {
                "variable": {
                    "value": "state_feed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sum(lstm_cell.state_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "state_feed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_273": {
                "variable": {
                    "value": "state_tuple",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "state_feed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, sum(lstm_cell.state_size)], name='state_feed')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_284": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_285": {
                "variable": {
                    "value": "(lstm_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=self.config.num_lstm_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell, input_keep_prob=self.config.lstm_dropout_keep_prob, output_keep_prob=self.config.lstm_dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.seq_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.input_mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "lstm_scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_295": {
                "name_or_scope": {
                    "value": "logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_304": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(inputs=lstm_outputs, num_outputs=self.config.vocab_size, activation_fn=None, weights_initializer=self.initializer, scope=logits_scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_loss_314": {
                "loss": {
                    "value": "batch_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.div(tf.reduce_sum(tf.mul(losses, weights)), tf.reduce_sum(weights), name='batch_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_267": {
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "initial_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_281": {
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "state_tuple",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.split(1, 2, state_feed)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_307": {
                "tensor": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_311": {
                "input_tensor": {
                    "value": "tf.mul(losses, weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_312": {
                "input_tensor": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(self.input_mask, [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_334": {
                "msg": {
                    "value": "Restoring Inception variables from checkpoint file %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.config.inception_checkpoint_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_277": {
                "input": {
                    "value": "self.seq_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/show_and_tell_model_test.py": {
        "tensorflow": {
            "main_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_54": {
                "variable": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_seqs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_variables_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/im2txt/im2txt/train.py": {
        "tensorflow": {
            "DEFINE_string_29": {
                "name": {
                    "value": "input_file_pattern",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "File pattern of sharded TFRecord input files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "inception_checkpoint_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to a pretrained inception_v3 model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for saving and loading model checkpoints.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "number_of_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training steps.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Frequency at which loss and global step are logged.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_41": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_60": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_99": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "training_config.max_checkpoints_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "IsDirectory_55": {
                "dirname": {
                    "value": "train_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "info_56": {
                "msg": {
                    "value": "Creating training directory: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "train_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MakeDirs_57": {
                "dirname": {
                    "value": "train_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_70": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "training_config.train_inception_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "training_config.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exponential_decay_80": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(training_config.train_inception_learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.constant(training_config.initial_learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_batches_per_epoch * training_config.num_epochs_per_decay)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "training_config.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/data/build_image_data.py": {
        "tensorflow": {
            "DEFINE_string_79": {
                "name": {
                    "value": "train_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_81": {
                "name": {
                    "value": "validation_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "output_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "train_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_88": {
                "name": {
                    "value": "validation_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_91": {
                "name": {
                    "value": "num_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_101": {
                "name": {
                    "value": "labels_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Labels file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Example_137": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/text': _bytes_feature(text), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_311": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_111": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_116": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_155": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_159": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "encode_jpeg_160": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_164": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordWriter_255": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_375": {
                "variable": {
                    "value": "matching_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "jpeg_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'%s/%s/*' % (data_dir, text)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "run_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_202": {
                "name": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Int64List_111": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_116": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_137": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/text': _bytes_feature(text), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FastGFile_362": {
                "name": {
                    "value": "labels_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/data/build_imagenet_data.py": {
        "tensorflow": {
            "DEFINE_string_99": {
                "name": {
                    "value": "train_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_101": {
                "name": {
                    "value": "validation_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_103": {
                "name": {
                    "value": "output_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_106": {
                "name": {
                    "value": "train_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_108": {
                "name": {
                    "value": "validation_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_111": {
                "name": {
                    "value": "num_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_122": {
                "name": {
                    "value": "labels_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_lsvrc_2015_synsets.txt",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Labels file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_135": {
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_metadata.txt",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "ImageNet metadata file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_151": {
                "name": {
                    "value": "bounding_box_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./imagenet_2012_bounding_boxes.csv",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Bounding box file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Example_209": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_445": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_624": {
                "variable": {
                    "value": "lines",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_658": {
                "variable": {
                    "value": "lines",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bounding_box_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Feature_162": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_169": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_174": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_233": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_236": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_237": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "encode_jpeg_238": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_242": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "encode_jpeg_243": {
                "variable": {
                    "value": "self._cmyk_to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_246": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_247": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordWriter_378": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_513": {
                "variable": {
                    "value": "matching_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "jpeg_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'%s/%s/*.JPEG' % (data_dir, synset)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "run_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_316": {
                "name": {
                    "value": "filename",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ],
                        [
                            "parts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Int64List_162": {
                "value": {
                    "value": "value",
                    "type": "List",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_169": {
                "value": {
                    "value": "value",
                    "type": "List",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_174": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_209": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FastGFile_501": {
                "name": {
                    "value": "labels_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/dataset.py": {
        "tensorflow": {
            "DEFINE_string_37": {
                "name": {
                    "value": "data_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/mydata",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the processed data, i.e. TFRecord of Example protos.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Glob_85": {
                "variable": {
                    "value": "data_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf_record_pattern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.data_dir, '%s-*' % self.subset)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordReader_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/flowers_eval.py": {
        "tensorflow": {
            "Exists_33": {
                "filename": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_35": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_34": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/flowers_train.py": {
        "tensorflow": {
            "Exists_34": {
                "filename": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_36": {
                "dirname": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_35": {
                "dirname": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/image_processing.py": {
        "tensorflow": {
            "DEFINE_integer_47": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images to process in a batch.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "image_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Provide square images of this size.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_preprocess_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of preprocessing threads per tower. Please make this a multiple of 4.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "num_readers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of parallel readers during train.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "input_queue_memory_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of the queue of preprocessed images. Default is ideal but try smaller values, e.g. 4, 2 or 1, if host memory is constrained. See comments in code for more details.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VarLenFeature_380": {
                "variable": {
                    "value": "sparse_float32",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_388": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_serialized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "examples_queue.dequeue()",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "feature_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature([], dtype=tf.string, default_value=''), 'image/class/label': tf.FixedLenFeature([1], dtype=tf.int64, default_value=-1), 'image/class/text': tf.FixedLenFeature([], dtype=tf.string, default_value='')}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_389": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_391": {
                "variable": {
                    "value": "xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_392": {
                "variable": {
                    "value": "ymin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_393": {
                "variable": {
                    "value": "xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_394": {
                "variable": {
                    "value": "ymax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_397": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_401": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, [ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_402": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, [ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_154": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_159": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_193": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_233": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, [ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "[0.75, 1.33]",
                    "type": "List",
                    "possible_values": []
                },
                "area_range": {
                    "value": "[0.05, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "max_attempts": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_249": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_266": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, bbox_begin, bbox_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(distorted_image, [height, width], method=resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "distort_color(distorted_image, thread_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "central_crop_291": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "0.875",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_294": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_bilinear_295": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_297": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_join_494": {
                "variable": {
                    "value": "(images, label_index_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors_list": {
                    "value": "images_and_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ],
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "2 * num_preprocess_threads * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_504": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, shape=[batch_size, height, width, depth])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, shape=[batch_size, height, width, depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_182": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_183": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_184": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_185": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_222": {
                "variable": {
                    "value": "image_with_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, [ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "draw_bounding_boxes_243": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distort_bbox",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FixedLenFeature_373": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_375": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_377": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_426": {
                "name": {
                    "value": "batch_processing",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "string_input_producer_433": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.data_files()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "string_input_producer_437": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.data_files()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomShuffleQueue_462": {
                "variable": {
                    "value": "examples_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "examples_per_shard * FLAGS.input_queue_memory_factor",
                            "BinOp"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FIFOQueue_467": {
                "variable": {
                    "value": "examples_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "examples_per_shard + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_187": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_188": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_189": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_190": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_234": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_queue_runner_479": {
                "qr": {
                    "value": "tf.train.queue_runner.QueueRunner(examples_queue, enqueue_ops)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_510": {
                "tensor": {
                    "value": "label_index_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_222": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_244": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_263": {
                "input": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, bbox_begin, bbox_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(distorted_image, [height, width], method=resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "distort_color(distorted_image, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "input": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, bbox_begin, bbox_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(distorted_image, [height, width], method=resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "distort_color(distorted_image, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "QueueRunner_480": {
                "queue": {
                    "value": "examples_queue",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.string])",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(capacity=examples_per_shard + 3 * batch_size, dtypes=[tf.string])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/imagenet_distributed_train.py": {
        "tensorflow": {
            "ClusterSpec_42": {
                "variable": {
                    "value": "cluster_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "{'ps': ps_hosts, 'worker': worker_hosts}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Server_44": {
                "variable": {
                    "value": "server",
                    "type": "Variable",
                    "possible_values": []
                },
                "server_or_cluster_def": {
                    "value": "{'ps': ps_hosts, 'worker': worker_hosts}",
                    "type": "Dict",
                    "possible_values": []
                },
                "job_name": {
                    "value": "FLAGS.job_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "task_index": {
                    "value": "FLAGS.task_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_39": {
                "msg": {
                    "value": "'PS hosts are: %s' % ps_hosts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_40": {
                "msg": {
                    "value": "'Worker hosts are: %s' % worker_hosts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_verbosity_64": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_59": {
                "filename": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_60": {
                "dirname": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/imagenet_eval.py": {
        "tensorflow": {
            "Exists_39": {
                "filename": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_41": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_40": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/imagenet_train.py": {
        "tensorflow": {
            "Exists_34": {
                "filename": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_36": {
                "dirname": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_35": {
                "dirname": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/inception_distributed_train.py": {
        "tensorflow": {
            "DEFINE_string_36": {
                "name": {
                    "value": "job_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "One of \"ps\", \"worker\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "ps_hosts",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Comma-separated list of hostname:port for the parameter server jobs. e.g. 'machine1:2222,machine2:1111,machine2:2222'\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "worker_hosts",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Comma-separated list of hostname:port for the worker jobs. e.g. 'machine1:2222,machine2:1111,machine2:2222'\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/imagenet_train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs and checkpoint.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to run.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "subset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Either \"train\" or \"validation\".",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_56": {
                "name": {
                    "value": "task_id",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Task ID of the worker/replica running the training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "num_replicas_to_aggregate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of gradients to collect before updating the parameters.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10 * 60",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Save interval seconds.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "180",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Save summaries interval seconds.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "initial_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.045",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_79": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Epochs after which learning rate decays.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_81": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.94",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_113": {
                "device_name": {
                    "value": "'/job:worker/task:%d' % FLAGS.task_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exponential_decay_130": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.variables.global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_batches_per_epoch * FLAGS.num_epochs_per_decay / num_replicas_to_aggregate)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_139": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "RMSPROP_DECAY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "RMSPROP_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "RMSPROP_EPSILON",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_157": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.losses.LOSSES_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_160": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(slim.losses.LOSSES_COLLECTION)",
                            "Call"
                        ],
                        [
                            "losses + tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_186": {
                "variable": {
                    "value": "exp_moving_averager",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "inception.MOVING_AVERAGE_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.variables.global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "SyncReplicasOptimizer_197": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "opt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.RMSPropOptimizer(lr, RMSPROP_DECAY, momentum=RMSPROP_MOMENTUM, epsilon=RMSPROP_EPSILON)",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt, replicas_to_aggregate=num_replicas_to_aggregate, replica_id=FLAGS.task_id, total_num_replicas=num_workers, variable_averages=exp_moving_averager, variables_to_average=variables_to_average)",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "num_replicas_to_aggregate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_workers",
                            "Name"
                        ],
                        [
                            "FLAGS.num_replicas_to_aggregate",
                            "Attribute"
                        ]
                    ]
                },
                "replica_id": {
                    "value": "FLAGS.task_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(cluster_spec.as_dict()['worker'])",
                            "Call"
                        ]
                    ]
                },
                "variable_averages": {
                    "value": "exp_moving_averager",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.ExponentialMovingAverage(inception.MOVING_AVERAGE_DECAY, global_step)",
                            "Call"
                        ]
                    ]
                },
                "variables_to_average": {
                    "value": "variables_to_average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables() + tf.moving_average_variables()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_205": {
                "variable": {
                    "value": "batchnorm_updates",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.ops.UPDATE_OPS_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_207": {
                "variable": {
                    "value": "batchnorm_updates_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*batchnorm_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Saver_233": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_239": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_245": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "is_chief",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.task_id == 0",
                            "Compare"
                        ]
                    ]
                },
                "logdir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init_op": {
                    "value": "init_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.initialize_all_variables()",
                            "Call"
                        ]
                    ]
                },
                "summary_op": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.variables.global_step()",
                            "Call"
                        ]
                    ]
                },
                "saver": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Saver()",
                            "Call"
                        ]
                    ]
                },
                "save_model_secs": {
                    "value": "FLAGS.save_interval_secs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_255": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_263": {
                "variable": {
                    "value": "queue_runners",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.QUEUE_RUNNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_158": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_165": {
                "variable": {
                    "value": "loss_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_210": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n(losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "tf.identity(total_loss)",
                            "Call"
                        ],
                        [
                            "tf.identity(total_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_223": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n(losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "tf.identity(total_loss)",
                            "Call"
                        ],
                        [
                            "tf.identity(total_loss)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_253": {
                "msg": {
                    "value": "'%s Supervisor' % datetime.now()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_265": {
                "msg": {
                    "value": "Started %d queues for processing input data.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(queue_runners)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_179": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n(losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "tf.identity(total_loss)",
                            "Call"
                        ],
                        [
                            "tf.identity(total_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_209": {
                "control_inputs": {
                    "value": "[batchnorm_updates_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_222": {
                "control_inputs": {
                    "value": "[apply_gradients_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_178": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_289": {
                "msg": {
                    "value": "format_str % (FLAGS.task_id, datetime.now(), step, loss_value, examples_per_sec, duration)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_295": {
                "msg": {
                    "value": "Running Summary operation on the chief.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_298": {
                "msg": {
                    "value": "Finished running Summary operation.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_304": {
                "msg": {
                    "value": "About to execute sync_clean_up_op!",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/inception_eval.py": {
        "tensorflow": {
            "DEFINE_string_36": {
                "name": {
                    "value": "eval_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/imagenet_eval",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/imagenet_train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to read model checkpoints.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "eval_interval_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "60 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "How often to run the eval.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples to run. Note that the eval ImageNet dataset contains 50000 examples.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_51": {
                "name": {
                    "value": "subset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "validation",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Either 'validation' or 'train'.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_66": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_87": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "in_top_k_151": {
                "variable": {
                    "value": "top_1_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "in_top_k_152": {
                "variable": {
                    "value": "top_5_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_155": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "inception.MOVING_AVERAGE_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_158": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variable_averages.variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_163": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_164": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_default_graph().as_graph_def()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_123": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "key": {
                    "value": "tf.GraphKeys.QUEUE_RUNNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/inception_model.py": {
        "tensorflow": {
            "reshape_116": {
                "variable": {
                    "value": "sparse_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "concated",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[indices, sparse_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_to_dense_120": {
                "variable": {
                    "value": "dense_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "concated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(1, [indices, sparse_labels])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zero_fraction_151": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/inception_train.py": {
        "tensorflow": {
            "DEFINE_string_36": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/imagenet_train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs and checkpoint.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10000000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to run.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "subset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Either 'train' or 'validation'.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "num_gpus",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many GPUs to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "pretrained_model_checkpoint_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If specified, restore this pretrained model before beginning any training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_69": {
                "name": {
                    "value": "initial_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_71": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "30.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Epochs after which learning rate decays.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_73": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.16",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_116": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.losses.LOSSES_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_119": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_120": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses + regularization_losses",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_123": {
                "variable": {
                    "value": "loss_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_138": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n(losses + regularization_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "tf.identity(total_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_168": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "_average_gradients(tower_grads)",
                            "Call"
                        ],
                        [
                            "opt.compute_gradients(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_195": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('global_step', [], initializer=tf.constant_initializer(0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_batches_per_epoch * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_202": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "RMSPROP_DECAY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "RMSPROP_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "RMSPROP_EPSILON",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "split_225": {
                "variable": {
                    "value": "images_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "FLAGS.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_226": {
                "variable": {
                    "value": "labels_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "FLAGS.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_288": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "inception.MOVING_AVERAGE_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('global_step', [], initializer=tf.constant_initializer(0), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_297": {
                "variable": {
                    "value": "batchnorm_updates_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*batchnorm_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_298": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "apply_gradient_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.apply_gradients(grads, global_step=global_step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "variables_averages_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variable_averages.apply(variables_to_average)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_302": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_308": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_313": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_330": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "sess.graph.as_graph_def(add_shapes=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_162": {
                "variable": {
                    "value": "expanded_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_182": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_320": {
                "variable": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.variables.VARIABLES_TO_RESTORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_322": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(slim.variables.VARIABLES_TO_RESTORE)",
                            "Call"
                        ]
                    ]
                }
            },
            "start_queue_runners_328": {
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_218": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_variables_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_319": {
                "filename": {
                    "value": "FLAGS.pretrained_model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_187": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_231": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_245": {
                "variable": {
                    "value": "summaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_251": {
                "variable": {
                    "value": "batchnorm_updates",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.ops.UPDATE_OPS_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConfigProto_313": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_232": {
                "name": {
                    "value": "'%s_%d' % (inception.TOWER_NAME, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/collections_test.py": {
        "tensorflow": {
            "main_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_102": {
                "variable": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.variables.VARIABLES_TO_RESTORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_115": {
                "variable": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.variables.VARIABLES_TO_RESTORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_126": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_151": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.losses.LOSSES_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_174": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "slim.losses.LOSSES_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_176": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/inception_model.py": {
        "tensorflow": {
            "identity_249": {
                "variable": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['mixed_17x17x768e']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_141": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch3x3, branch3x3dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_279": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch3x3, branch7x7x3, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_297": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_315": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_329": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ops.fc(net, num_classes, activation=None, scope='logits', restore=restore_logits)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "mixed_35x35x256a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "mixed_35x35x288a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "mixed_35x35x288b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "mixed_17x17x768a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "mixed_17x17x768b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "mixed_17x17x768c",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "mixed_17x17x768d",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "mixed_17x17x768e",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "aux_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_266": {
                "name_or_scope": {
                    "value": "mixed_17x17x1280a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_282": {
                "name_or_scope": {
                    "value": "mixed_8x8x2048a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_287": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[ops.conv2d(branch3x3, 384, [1, 3]), ops.conv2d(branch3x3, 384, [3, 1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_292": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[ops.conv2d(branch3x3dbl, 384, [1, 3]), ops.conv2d(branch3x3dbl, 384, [3, 1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "mixed_8x8x2048b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_305": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[ops.conv2d(branch3x3, 384, [1, 3]), ops.conv2d(branch3x3, 384, [3, 1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_310": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[ops.conv2d(branch3x3dbl, 384, [1, 3]), ops.conv2d(branch3x3dbl, 384, [3, 1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "branch5x5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "branch3x3dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "branch5x5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "branch3x3dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "branch5x5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "branch3x3dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "branch3x3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "branch3x3dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "branch7x7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "branch7x7dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "branch7x7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "branch7x7dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "branch7x7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "branch7x7dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "branch7x7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "branch7x7dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "branch3x3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "branch7x7x3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "branch3x3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "branch3x3dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_294": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "branch1x1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "branch3x3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "branch3x3dbl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_312": {
                "name_or_scope": {
                    "value": "branch_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/inception_test.py": {
        "tensorflow": {
            "main_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_110": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_127": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_68": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_70": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_64": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_66": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "initialize_all_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/losses.py": {
        "tensorflow": {
            "convert_to_tensor_114": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=logits.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_134": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=logits.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_161": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "one_hot_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(one_hot_labels, logits.dtype)",
                            "Call"
                        ],
                        [
                            "one_hot_labels * smooth_positives + smooth_negatives",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_166": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "one_hot_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(one_hot_labels, logits.dtype)",
                            "Call"
                        ],
                        [
                            "one_hot_labels * smooth_positives + smooth_negatives",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "xentropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_169": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=logits.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_49": {
                "variable": {
                    "value": "l1_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=logits.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "variable": {
                    "value": "l2_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=tensor.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weight, dtype=logits.dtype.base_dtype, name='loss_weight')",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "weight_l1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_l1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_91": {
                "variable": {
                    "value": "weight_l2_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_l2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_l2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_118": {
                "name": {
                    "value": "LOSSES_COLLECTION",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_losses'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.mul(weight, tf.reduce_sum(tf.abs(tensor)), name='value')",
                            "Call"
                        ],
                        [
                            "tf.mul(weight, tf.nn.l2_loss(tensor), name='value')",
                            "Call"
                        ],
                        [
                            "tf.mul(weight, tf.reduce_mean(cross_entropy), name='value')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_138": {
                "name": {
                    "value": "LOSSES_COLLECTION",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_losses'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.mul(weight, tf.reduce_sum(tf.abs(tensor)), name='value')",
                            "Call"
                        ],
                        [
                            "tf.mul(weight, tf.nn.l2_loss(tensor), name='value')",
                            "Call"
                        ],
                        [
                            "tf.mul(weight, tf.reduce_mean(cross_entropy), name='value')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_173": {
                "name": {
                    "value": "LOSSES_COLLECTION",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_losses'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.mul(weight, tf.reduce_sum(tf.abs(tensor)), name='value')",
                            "Call"
                        ],
                        [
                            "tf.mul(weight, tf.nn.l2_loss(tensor), name='value')",
                            "Call"
                        ],
                        [
                            "tf.mul(weight, tf.reduce_mean(cross_entropy), name='value')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_98": {
                "x": {
                    "value": "reg_l1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mul(weight_l1_t, tf.reduce_sum(tf.abs(tensor)), name='value_l1')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reg_l2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mul(weight_l2_t, tf.nn.l2_loss(tensor), name='value_l2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "tf.abs(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_137": {
                "t": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_172": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits, one_hot_labels, name='xentropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "tf.abs(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_71": {
                "t": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.abs(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_96": {
                "t": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_117": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_52": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_94": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/losses_test.py": {
        "tensorflow": {
            "main_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_42": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_55": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_64": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_73": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_83": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_92": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_101": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_111": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_120": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_129": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ],
                        [
                            "[5, 5, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_142": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[10.0, 0.0, 0.0], [0.0, 10.0, 0.0], [0.0, 0.0, 10.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_145": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_154": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[10.0, 0.0, 0.0], [0.0, 10.0, 0.0], [0.0, 0.0, 10.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_157": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1], [1, 0, 0], [0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_166": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[10.0, 0.0, 0.0], [0.0, 10.0, 0.0], [0.0, 0.0, 10.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_169": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1], [1, 0, 0], [0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/ops.py": {
        "tensorflow": {
            "batch_normalization_127": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moving_mean",
                            "Name"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moving_variance",
                            "Name"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables.variable('beta', params_shape, initializer=tf.zeros_initializer, trainable=trainable, restore=restore)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables.variable('gamma', params_shape, initializer=tf.ones_initializer, trainable=trainable, restore=restore)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_219": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_229": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "variables.variable('weights', shape=weights_shape, initializer=weights_initializer, regularizer=l2_regularizer, trainable=trainable, restore=restore)",
                            "Call"
                        ],
                        [
                            "variables.variable('weights', shape=weights_shape, initializer=weights_initializer, regularizer=l2_regularizer, trainable=trainable, restore=restore)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_291": {
                "variable": {
                    "value": "weights_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_332": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(0, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_333": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "indices.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_334": {
                "variable": {
                    "value": "concated",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[indices, labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_to_dense_335": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "concated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(1, [indices, labels])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf.pack([batch_size, num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_114": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(len(inputs_shape) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_op_scope_213": {
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_237": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_243": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, weights, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "variables.variable('biases', shape=bias_shape, initializer=bias_initializer, trainable=trainable, restore=restore)",
                            "Call"
                        ],
                        [
                            "variables.variable('biases', shape=bias_shape, initializer=bias_initializer, trainable=trainable, restore=restore)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_op_scope_288": {
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_302": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "variables.variable('weights', shape=weights_shape, initializer=weights_initializer, regularizer=l2_regularizer, trainable=trainable, restore=restore)",
                            "Call"
                        ],
                        [
                            "variables.variable('weights', shape=weights_shape, initializer=weights_initializer, regularizer=l2_regularizer, trainable=trainable, restore=restore)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_308": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "xw_plus_b_314": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "variables.variable('weights', shape=weights_shape, initializer=weights_initializer, regularizer=l2_regularizer, trainable=trainable, restore=restore)",
                            "Call"
                        ],
                        [
                            "variables.variable('weights', shape=weights_shape, initializer=weights_initializer, regularizer=l2_regularizer, trainable=trainable, restore=restore)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "variables.variable('biases', shape=bias_shape, initializer=bias_initializer, trainable=trainable, restore=restore)",
                            "Call"
                        ],
                        [
                            "variables.variable('biases', shape=bias_shape, initializer=bias_initializer, trainable=trainable, restore=restore)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_367": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_397": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_443": {
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_op_scope_469": {},
            "add_to_collection_118": {
                "name": {
                    "value": "UPDATE_OPS_COLLECTION",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_update_ops_'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "update_moving_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moving_averages.assign_moving_average(moving_mean, mean, decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_121": {
                "name": {
                    "value": "UPDATE_OPS_COLLECTION",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_update_ops_'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "update_moving_variance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moving_averages.assign_moving_average(moving_variance, variance, decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_333": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(labels, 1), indices.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_419": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/ops_test.py": {
        "tensorflow": {
            "main_692": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_401": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_408": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_409": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_458": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_collection_549": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "ops.UPDATE_OPS_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_567": {
                "variable": {
                    "value": "moving_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "moving_vars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_584": {
                "variable": {
                    "value": "moving_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "moving_vars",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "BatchNorm/moving_mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_588": {
                "variable": {
                    "value": "moving_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "moving_vars",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "BatchNorm/moving_variance",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_600": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ],
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ],
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_602": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "ops.UPDATE_OPS_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_630": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ],
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ],
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_632": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "ops.UPDATE_OPS_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_664": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*image_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ],
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ],
                        [
                            "(10, height, width, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_666": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "ops.UPDATE_OPS_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_604": {
                "variable": {
                    "value": "barrier",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gradient_barrier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_op_634": {
                "variable": {
                    "value": "barrier",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gradient_barrier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_op_668": {
                "variable": {
                    "value": "barrier",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gradient_barrier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_128": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_140": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_254": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_266": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moving_average_variables_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_603": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_633": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_637": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_645": {
                "ref": {
                    "value": "moving_mean",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.get_collection('moving_vars', 'BatchNorm/moving_mean')",
                            "Call"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_mean')[0]",
                            "Subscript"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_mean')[0]",
                            "Subscript"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_mean')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "expected_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.mean(image_values, axis=(0, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.mean(image_values, axis=(0, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.mean(image_values, axis=(0, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_646": {
                "ref": {
                    "value": "moving_variance",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.get_collection('moving_vars', 'BatchNorm/moving_variance')",
                            "Call"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_variance')[0]",
                            "Subscript"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_variance')[0]",
                            "Subscript"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_variance')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "expected_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.var(image_values, axis=(0, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.var(image_values, axis=(0, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.var(image_values, axis=(0, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_667": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(ops.UPDATE_OPS_COLLECTION)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_671": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_679": {
                "ref": {
                    "value": "moving_mean",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.get_collection('moving_vars', 'BatchNorm/moving_mean')",
                            "Call"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_mean')[0]",
                            "Subscript"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_mean')[0]",
                            "Subscript"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_mean')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "expected_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.mean(image_values, axis=(0, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.mean(image_values, axis=(0, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.mean(image_values, axis=(0, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_680": {
                "ref": {
                    "value": "moving_variance",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.moving_average_variables()[1]",
                            "Subscript"
                        ],
                        [
                            "tf.get_collection('moving_vars', 'BatchNorm/moving_variance')",
                            "Call"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_variance')[0]",
                            "Subscript"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_variance')[0]",
                            "Subscript"
                        ],
                        [
                            "variables.get_variables('BatchNorm/moving_variance')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "expected_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.var(image_values, axis=(0, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.var(image_values, axis=(0, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.var(image_values, axis=(0, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_167": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_172": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_275": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_279": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_575": {
                "key": {
                    "value": "ops.UPDATE_OPS_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_577": {
                "key": {
                    "value": "ops.UPDATE_OPS_COLLECTION",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/scopes.py": {
        "tensorflow": {
            "get_collection_64": {
                "variable": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "_ARGSTACK_KEY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "('__arg_stack',)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "add_to_collection_69": {
                "name": {
                    "value": "_ARGSTACK_KEY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "('__arg_stack',)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "stack",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ops.get_collection(_ARGSTACK_KEY)",
                            "Call"
                        ],
                        [
                            "[{}]",
                            "List"
                        ],
                        [
                            "_get_arg_stack()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/scopes_test.py": {
        "tensorflow": {
            "main_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/variables.py": {
        "tensorflow": {
            "get_collection_164": {
                "variable": {
                    "value": "candidates",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_231": {
                "variable": {
                    "value": "global_step_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_STEP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NodeDef_213": {
                "variable": {
                    "value": "var_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope().name + '/' + name",
                            "BinOp"
                        ]
                    ]
                },
                "op": {
                    "value": "Variable",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_124": {
                "key": {
                    "value": "MODEL_VARIABLES",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_model_variables_'",
                            "Constant"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_136": {
                "key": {
                    "value": "VARIABLES_TO_RESTORE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_variables_to_restore_'",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_286": {
                "device_name": {
                    "value": "variable_device(device, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_287": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collections": {
                    "value": "collections",
                    "type": "List",
                    "possible_values": [
                        [
                            "[MODEL_VARIABLES]",
                            "List"
                        ],
                        [
                            "[VARIABLES_TO_RESTORE, tf.GraphKeys.VARIABLES, tf.GraphKeys.GLOBAL_STEP]",
                            "List"
                        ],
                        [
                            "list(collections or [])",
                            "Call"
                        ],
                        [
                            "collections + [tf.GraphKeys.VARIABLES, MODEL_VARIABLES]",
                            "BinOp"
                        ],
                        [
                            "set(collections)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_110": {
                "key": {
                    "value": "collection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collections",
                            "Name"
                        ]
                    ]
                }
            },
            "add_to_collection_111": {
                "name": {
                    "value": "collection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collections",
                            "Name"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_241": {
                "device_name": {
                    "value": "variable_device(device, 'global_step')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_242": {
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "List",
                    "possible_values": [
                        [
                            "[MODEL_VARIABLES]",
                            "List"
                        ],
                        [
                            "[VARIABLES_TO_RESTORE, tf.GraphKeys.VARIABLES, tf.GraphKeys.GLOBAL_STEP]",
                            "List"
                        ],
                        [
                            "list(collections or [])",
                            "Call"
                        ],
                        [
                            "collections + [tf.GraphKeys.VARIABLES, MODEL_VARIABLES]",
                            "BinOp"
                        ],
                        [
                            "set(collections)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_scope_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/inception/inception/slim/variables_test.py": {
        "tensorflow": {
            "replica_device_setter_366": {
                "variable": {
                    "value": "device_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ps_tasks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "parent",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "parent",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "var_name",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'cant_find_me'",
                            "Constant"
                        ],
                        [
                            "'parent/child'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_131": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_154": {
                "variable": {
                    "value": "e_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_169": {
                "device_name": {
                    "value": "tf.train.replica_device_setter(ps_tasks=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_175": {
                "variable": {
                    "value": "e_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_200": {
                "variable": {
                    "value": "e_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_225": {
                "variable": {
                    "value": "e_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_259": {
                "key": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_277": {
                "key": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_278": {
                "key": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_291": {
                "key": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_292": {
                "key": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "child",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_153": {
                "device_name": {
                    "value": "cpu:99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "replica_device_setter_169": {
                "ps_tasks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_174": {
                "device_name": {
                    "value": "cpu:99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_199": {
                "device_name": {
                    "value": "cpu:99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_224": {
                "device_name": {
                    "value": "cpu:99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_244": {
                "key": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_245": {
                "key": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_251": {
                "key": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_252": {
                "key": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_267": {
                "key": {
                    "value": "A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_268": {
                "key": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/lm_1b/data_utils.py": {
        "tensorflow": {
            "Glob_231": {
                "variable": {
                    "value": "self._all_shards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filename": {
                    "value": "filepattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_232": {
                "msg": {
                    "value": "Found %d shards at %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(self._all_shards)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "filepattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_247": {
                "msg": {
                    "value": "Loading data from: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "shard_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_261": {
                "msg": {
                    "value": "Loaded %d words.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "current_idx + current_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_262": {
                "msg": {
                    "value": "Finished loading",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/lm_1b/lm_1b_eval.py": {
        "tensorflow": {
            "DEFINE_string_29": {
                "name": {
                    "value": "mode",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "eval",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "One of [sample, eval, dump_emb, dump_lstm_emb]. \"sample\" mode samples future word predictions, using FLAGS.prefix as prefix (prefix could be left empty). \"eval\" mode calculates perplexity of the FLAGS.input_data. \"dump_emb\" mode dumps word and softmax embeddings to FLAGS.save_dir. embeddings are dumped in the same order as words in vocabulary. All words in vocabulary are dumped.dump_lstm_emb dumps lstm embeddings of FLAGS.sentence to FLAGS.save_dir.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "pbtxt",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "GraphDef proto text file used to construct model structure.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "ckpt",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Checkpoint directory used to fill model values.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "vocab_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Vocabulary file.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "save_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Used for \"dump_emb\" mode to save word embeddings.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "prefix",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Used for \"sample\" mode to predict next words.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_52": {
                "name": {
                    "value": "max_sample_words",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Sampling stops either when </S> is met or this number of steps has passed.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "num_samples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of samples to generate for the prefix.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "sentence",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Used as input for \"dump_lstm_emb\" mode.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "input_data",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Input data files for eval model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "max_eval_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum mumber of steps to run \"eval\" mode.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_97": {
                "variable": {
                    "value": "[t[states_init], t[lstm/lstm_0/control_dependency], t[lstm/lstm_1/control_dependency], t[softmax_out], t[class_ids_out], t[class_weights_out], t[log_perplexity_out], t[inputs_in], t[targets_in], t[target_weights_in], t[char_inputs_in], t[all_embs], t[softmax_weights], t[global_step]]",
                    "type": "List",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "gd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "input_map": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "['states_init', 'lstm/lstm_0/control_dependency:0', 'lstm/lstm_1/control_dependency:0', 'softmax_out:0', 'class_ids_out:0', 'class_weights_out:0', 'log_perplexity_out:0', 'inputs_in:0', 'targets_in:0', 'target_weights_in:0', 'char_inputs_in:0', 'all_embs_out:0', 'Reshape_3:0', 'global_step:0']",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_113": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_87": {
                "variable": {
                    "value": "gd",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_90": {
                "msg": {
                    "value": "Recovering Graph %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "gd_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FastGFile_85": {
                "name": {
                    "value": "gd_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_113": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/namignizer/data_utils.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/namignizer/model.py": {
        "tensorflow": {
            "placeholder_34": {
                "variable": {
                    "value": "self._input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self._targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * num_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_40": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiRNNCell_44": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstm_cell] * config.num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(1, outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "softmax_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "softmax_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_77": {
                "variable": {
                    "value": "self._activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(output, softmax_w) + softmax_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_86": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_87": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(cost, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_42": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(size, forget_bias=0.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell, output_keep_prob=config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vocab_size, size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self._input_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self._input_data)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_48": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "RNN",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_64": {
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_67": {
                "a": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(1, outputs), [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w', [size, vocab_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.seq2seq.sequence_loss_by_example([logits], [tf.reshape(self._targets, [-1])], [self._weights])",
                            "Call"
                        ]
                    ]
                }
            },
            "all_variables_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_87": {
                "ys": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_93": {
                "ref": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "lr_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "self._targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/namignizer/names.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/neural_gpu/data_utils.py": {
        "tensorflow": {
            "GFile_259": {
                "name": {
                    "value": "log_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "a",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/neural_gpu/neural_gpu.py": {
        "tensorflow": {
            "sigmoid_43": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_64": {
                "variable": {
                    "value": "candidate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_lin(inpts + [reset * mem], 'c', 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_69": {
                "op_type": {
                    "value": "CustomIdG",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_76": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.maximum(t, -max_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_98": {
                "variable": {
                    "value": "dsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "relaxed_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_101": {
                "variable": {
                    "value": "davg",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d * d for d in diff]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CvK",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kw, kh, nin, nout]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CvB",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nout]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_46": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(0.0, cutoff * y - d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_54": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(-1.0, (1.0 + d) * y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_86": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "trainable_variables_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_122": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(1, [make_dense(self.target[l], noclass) for l in xrange(length)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(targets, [-1, noclass])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_125": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size * noclass",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_to_dense_126": {
                "variable": {
                    "value": "dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "indices",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "targets + noclass * tf.range(0, batch_size)",
                            "BinOp"
                        ],
                        [
                            "sparse + 2 * tf.range(0, batch_size)",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(batch_size * noclass, 0)",
                            "Call"
                        ],
                        [
                            "sorted(list(set(data_utils.bins + [data_utils.forward_max])))",
                            "Call"
                        ],
                        [
                            "len(target)",
                            "Call"
                        ]
                    ]
                },
                "sparse_values": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "tensor": {
                    "value": "dense",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sparse_to_dense(indices, length, 1.0, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.sparse_to_dense(indices, tf.expand_dims(2 * batch_size, 0), 1.0, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, noclass]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_133": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(sparse, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_135": {
                "variable": {
                    "value": "sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sparse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(sparse, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_to_dense_137": {
                "variable": {
                    "value": "dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "indices",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "targets + noclass * tf.range(0, batch_size)",
                            "BinOp"
                        ],
                        [
                            "sparse + 2 * tf.range(0, batch_size)",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf.expand_dims(2 * batch_size, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sparse_to_dense(indices, length, 1.0, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.sparse_to_dense(indices, tf.expand_dims(2 * batch_size, 0), 1.0, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "tensor": {
                    "value": "tf.slice(reshaped, [0, 0], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "self.cur_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "min_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "variable": {
                    "value": "self.pull",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(pull)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "self.do_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "do_training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.noise_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_param",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_172": {
                "variable": {
                    "value": "inp0_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdamOptimizer_182": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_288": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "prefix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('CvK', [kw, kh, nin, nout])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(3, args)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('CvK', [kw, kh, nin, nout])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_46": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "cutoff * y - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_54": {
                "x": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(1.0 + d) * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_76": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(max_value, tf.maximum(t, -max_value))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-max_value",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_default_graph_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "davg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add_n([d * d for d in diff])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_116": {
                "inputs": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(args[0], k, [1, 1, 1, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.concat(3, args), k, [1, 1, 1, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.floor(big) / quant_scale - max_value",
                            "BinOp"
                        ],
                        [
                            "sess.run(feed_out, feed_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_116": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_121": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_140": {
                "input_": {
                    "value": "reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(dense, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "emb_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[niclass, vec_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-1.7, 1.7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_178": {
                "variable": {
                    "value": "e0",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "emb_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [niclass, vec_size], initializer=tf.random_uniform_initializer(-1.7, 1.7))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.constant(0, dtype=tf.int32, shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.zeros([1, vec_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(1, start)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, length, 1, nmaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_223": {
                "variable": {
                    "value": "first",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "first",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv_linear(start, 1, 1, vec_size, nmaps, True, 0.0, 'input')",
                            "Call"
                        ],
                        [
                            "[first] + [tf.zeros(tf.pack([batch_size, length, 1, nmaps]), dtype=tf.float32) for _ in xrange(height - 1)]",
                            "BinOp"
                        ],
                        [
                            "tf.concat(2, first)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_248": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[outputs[i] * scales[i] for i in xrange(length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n([outputs[i] * scales[i] for i in xrange(length)])",
                            "Call"
                        ],
                        [
                            "conv_linear(output, 1, 1, nmaps, noclass, True, 0.0, 'output')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, length, noclass])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, length, noclass]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_258": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[make_dense(self.target[l], noclass) for l in xrange(length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(1, [make_dense(self.target[l], noclass) for l in xrange(length)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(targets, [-1, noclass])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, noclass]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_261": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(tf.reshape(output, [-1, noclass]), targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_263": {
                "variable": {
                    "value": "perp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "'RX%d' % l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_137": {
                "input": {
                    "value": "2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_174": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_207": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "mask[0:length]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[1.0 - imask[i] * omask[i] for i in xrange(length)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reshape(m, [-1, 1]) for m in mask]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(1, mask[0:length])",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, length, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat(2, [mask for _ in xrange(height)]) + tf.zeros(tf.pack([batch_size, length, height, nmaps]), dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, length, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_264": {
                "x": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "inp0_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_276": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_277": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "total_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "perp_loss + relax_dist * self.pull",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_278": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(total_loss, params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_variables_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_34": {
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "args",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_initializer_37": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_79": {
                "x": {
                    "value": "big",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quant_scale * (t + max_value) + 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_164": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'inp{0}'.format(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'tgt{0}'.format(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_179": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "shape": {
                    "value": "[1, vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_193": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_215": {
                "x": {
                    "value": "embedded[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "tensor": {
                    "value": "start[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, nmaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_217": {
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "start",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[tf.tanh(embedded[l]) for l in xrange(length)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reshape(start[l], [-1, 1, nmaps]) for l in xrange(length)]",
                            "ListComp"
                        ],
                        [
                            "tf.reshape(tf.concat(1, start), [-1, length, 1, nmaps])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_240": {
                "variable": {
                    "value": "cur",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cur",
                    "type": "Call",
                    "possible_values": [
                        [
                            "step[it]",
                            "Subscript"
                        ],
                        [
                            "conv_gru([], cur, kw, kh, nmaps, cutoff, 'cgru_%d' % layer)",
                            "Call"
                        ],
                        [
                            "cur + tf.truncated_normal(tf.shape(cur)) * act_noise_scale",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(cur, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 - self.do_training * (dropout * 8.0 / float(length))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_252": {
                "tensor": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, noclass]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_254": {
                "logits": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_261": {
                "labels": {
                    "value": "tf.reshape(output, [-1, noclass])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(1, [make_dense(self.target[l], noclass) for l in xrange(length)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(targets, [-1, noclass])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_95": {
                "name": {
                    "value": "var_name_suffix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_177": {
                "minval": {
                    "value": "-1.7",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_194": {
                "control_inputs": {
                    "value": "[e0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_201": {
                "tensor": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "tensor": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_211": {
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[mask for _ in xrange(height)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "shape": {
                    "value": "tf.pack([batch_size, length, height, nmaps])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "shape": {
                    "value": "tf.pack([batch_size, length, 1, nmaps])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_227": {
                "x": {
                    "value": "first",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv_linear(start, 1, 1, vec_size, nmaps, True, 0.0, 'input')",
                            "Call"
                        ],
                        [
                            "[first] + [tf.zeros(tf.pack([batch_size, length, 1, nmaps]), dtype=tf.float32) for _ in xrange(height - 1)]",
                            "BinOp"
                        ],
                        [
                            "tf.concat(2, first)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 - self.do_training * (dropout * 8.0 / float(length))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "'RX%d' % (it % rx_step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "tensor": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, length, height * nmaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n([outputs[i] * scales[i] for i in xrange(length)])",
                            "Call"
                        ],
                        [
                            "conv_linear(output, 1, 1, nmaps, noclass, True, 0.0, 'output')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, length, noclass])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, noclass]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_195": {
                "params": {
                    "value": "emb_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [niclass, vec_size], initializer=tf.random_uniform_initializer(-1.7, 1.7))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_203": {
                "input": {
                    "value": "mask[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "slice_239": {
                "input_": {
                    "value": "cur",
                    "type": "Call",
                    "possible_values": [
                        [
                            "step[it]",
                            "Subscript"
                        ],
                        [
                            "conv_gru([], cur, kw, kh, nmaps, cutoff, 'cgru_%d' % layer)",
                            "Call"
                        ],
                        [
                            "cur + tf.truncated_normal(tf.shape(cur)) * act_noise_scale",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(cur, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_253": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(batch_size * noclass, 0)",
                            "Call"
                        ],
                        [
                            "sorted(list(set(data_utils.bins + [data_utils.forward_max])))",
                            "Call"
                        ],
                        [
                            "len(target)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n([outputs[i] * scales[i] for i in xrange(length)])",
                            "Call"
                        ],
                        [
                            "conv_linear(output, 1, 1, nmaps, noclass, True, 0.0, 'output')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, length, noclass])",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_242": {
                "shape": {
                    "value": "tf.shape(cur)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_282": {
                "shape": {
                    "value": "tf.shape(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_242": {
                "input": {
                    "value": "cur",
                    "type": "Call",
                    "possible_values": [
                        [
                            "step[it]",
                            "Subscript"
                        ],
                        [
                            "conv_gru([], cur, kw, kh, nmaps, cutoff, 'cgru_%d' % layer)",
                            "Call"
                        ],
                        [
                            "cur + tf.truncated_normal(tf.shape(cur)) * act_noise_scale",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(cur, keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_282": {
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grads",
                            "Name"
                        ],
                        [
                            "grad + tf.truncated_normal(tf.shape(grad)) * self.noise_param",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/neural_gpu/neural_gpu_trainer.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/neural_programmer/data_utils.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/neural_programmer/model.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/neural_programmer/neural_programmer.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/neural_programmer/nn_utils.py": {
        "tensorflow": {
            "bias_add_56": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, params[key + '_ix']) + tf.matmul(mprev, params[key + '_im'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(i, params[key + '_i'])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i, name='i_gate')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[key + '_i']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_58": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, params[key + '_fx']) + tf.matmul(mprev, params[key + '_fm'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(f, params[key + '_f'])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(f, name='f_gate')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[key + '_f']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_60": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(x, params[key + '_cx']) + tf.matmul(mprev, params[key + '_cm'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(c, params[key + '_c'])",
                            "Call"
                        ],
                        [
                            "f * cprev + i * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[key + '_c']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_62": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, params[key + '_ox']) + tf.matmul(mprev, params[key + '_om'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(o, params[key + '_o'])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(o, name='o_gate')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[key + '_o']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, params[key + '_ix']) + tf.matmul(mprev, params[key + '_im'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(i, params[key + '_i'])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i, name='i_gate')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "i_gate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, params[key + '_fx']) + tf.matmul(mprev, params[key + '_fm'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(f, params[key + '_f'])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(f, name='f_gate')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "f_gate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, params[key + '_ox']) + tf.matmul(mprev, params[key + '_om'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(o, params[key + '_o'])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(o, name='o_gate')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "o_gate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_21": {
                "params": {
                    "value": "params['word']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "word",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x, dropout_rate)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "mprev",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "params[key + '_im']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "a": {
                    "value": "mprev",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "params[key + '_fm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "a": {
                    "value": "mprev",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "params[key + '_cm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "a": {
                    "value": "mprev",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "params[key + '_om']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_66": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(x, params[key + '_cx']) + tf.matmul(mprev, params[key + '_cm'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(c, params[key + '_c'])",
                            "Call"
                        ],
                        [
                            "f * cprev + i * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/neural_programmer/parameters.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/neural_programmer/wiki_data.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/resnet/cifar_input.py": {
        "tensorflow": {
            "Glob_52": {
                "variable": {
                    "value": "data_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "data_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "string_input_producer_53": {
                "variable": {
                    "value": "file_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gfile.Glob(data_path)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLengthRecordReader_55": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label_bytes + label_offset + image_bytes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.decode_raw(value, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[record_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(record, [label_offset], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "depth_major",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(record, [label_bytes], [image_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth, image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(depth_major, [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.sparse_to_dense(tf.concat(1, [indices, labels]), [batch_size, num_classes], 1.0, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_to_dense_103": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "tf.concat(1, [indices, labels])",
                    "type": "Call",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_crop_70": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_whitening(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_whitening(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_71": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_whitening(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_whitening(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomShuffleQueue_78": {
                "variable": {
                    "value": "example_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "16 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "8 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[[image_size, image_size, depth], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FIFOQueue_89": {
                "variable": {
                    "value": "example_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[[image_size, image_size, depth], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_queue_runner_96": {
                "qr": {
                    "value": "tf.train.queue_runner.QueueRunner(example_queue, [example_enqueue_op] * num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_raw_59": {
                "input_bytes": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_60": {
                "input_": {
                    "value": "record",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.decode_raw(value, tf.uint8), [record_bytes])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_offset]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_62": {
                "input_": {
                    "value": "record",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.decode_raw(value, tf.uint8), [record_bytes])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "a": {
                    "value": "depth_major",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(record, [label_bytes], [image_bytes]), [depth, image_size, image_size])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "QueueRunner_96": {
                "queue": {
                    "value": "example_queue",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=16 * batch_size, min_after_dequeue=8 * batch_size, dtypes=[tf.float32, tf.int32], shapes=[[image_size, image_size, depth], [1]])",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(3 * batch_size, dtypes=[tf.float32, tf.int32], shapes=[[image_size, image_size, depth], [1]])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "[example_enqueue_op] * num_threads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_104": {
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[indices, labels]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/resnet/resnet_main.py": {
        "tensorflow": {
            "DEFINE_string_27": {
                "name": {
                    "value": "dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "cifar10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "cifar10 or cifar100.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "mode",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "train or eval.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "train_data_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Filepattern for training data.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_30": {
                "name": {
                    "value": "eval_data_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Filepattern for eval data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "image_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Image side length.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to keep training outputs.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "eval_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to keep eval outputs.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "eval_batch_count",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to eval.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_38": {
                "name": {
                    "value": "eval_once",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether evaluate the model only once.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "log_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to keep the checkpoints. Should be a parent directory of FLAGS.train_dir/eval_dir.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "num_gpus",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of gpus used for training. (0 or 1)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SummaryWriter_53": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Supervisor_55": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_root",
                    "type": "Attribute",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "summary_op": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "global_step": {
                    "value": "model.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_105": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_106": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_108": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "start_queue_runners_109": {
                "sess": {
                    "value": "sess",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sv.prepare_or_wait_for_session(config=tf.ConfigProto(allow_soft_placement=True))",
                            "Call"
                        ],
                        [
                            "tf.Session(config=tf.ConfigProto(allow_soft_placement=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "Summary_139": {
                "variable": {
                    "value": "precision_summ",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_143": {
                "variable": {
                    "value": "best_precision_summ",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_88": {
                "variable": {
                    "value": "precision_summ",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_115": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.log_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_122": {
                "msg": {
                    "value": "Loading checkpoint %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_state.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_148": {
                "msg": {
                    "value": "'loss: %.3f, precision: %.3f, best precision: %.3f\\n' % (loss, precision, best_precision)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_184": {
                "device_name": {
                    "value": "dev",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Constant"
                        ],
                        [
                            "'/gpu:0'",
                            "Constant"
                        ]
                    ]
                }
            },
            "ConfigProto_62": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_93": {
                "msg": {
                    "value": "'loss: %.3f, precision: %.3f\\n' % (loss, precision)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_108": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_120": {
                "msg": {
                    "value": "No model to eval yet at %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.log_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "error_117": {
                "msg": {
                    "value": "Cannot restore checkpoint: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/resnet/resnet_model.py": {
        "tensorflow": {
            "Variable_58": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_129": {
                "variable": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hps.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_132": {
                "variable": {
                    "value": "trainable_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_133": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_145": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.hps.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_288": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.uniform_unit_scaling_initializer(factor=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_291": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._fully_connected(x, self.hps.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_120": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._fully_connected(x, self.hps.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits, self.labels)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xent",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_188": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', params_shape, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_variance', params_shape, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', params_shape, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', params_shape, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_223": {
                "msg": {
                    "value": "image after unit %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_258": {
                "msg": {
                    "value": "image after unit %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_275": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(2.0 / n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "select_283": {
                "condlist": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "choicelist": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "default": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_293": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [x.get_shape()[1], out_dim], initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [out_dim], initializer=tf.constant_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_297": {
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "init",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "unit_1_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "unit_2_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "unit_3_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "costs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "moments_161": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_163": {
                "variable": {
                    "value": "moving_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "moving_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_variance",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_177": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_181": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_variance",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool_217": {
                "variable": {
                    "value": "orig_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self._conv('project', orig_x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_218": {
                "variable": {
                    "value": "orig_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self._conv('project', orig_x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "sub3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_269": {
                "inputs": {
                    "value": "costs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_279": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [filter_size, filter_size, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(2.0 / n)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2, 2]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_283": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "'unit_1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "'unit_2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "'unit_3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "common_bn_relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "residual_bn_relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "uniform_unit_scaling_initializer_290": {
                "factor": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_155": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_158": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_266": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_277": {
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_165": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_169": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_179": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_183": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/datasets/cifar10.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/datasets/dataset_utils.py": {
        "tensorflow": {
            "Feature_41": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_53": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_57": {
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_113": {
                "filename": {
                    "value": "os.path.join(dataset_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_41": {
                "value": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_53": {
                "value": {
                    "value": "[values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_57": {
                "feature": {
                    "value": "{'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/datasets/download_and_convert_cifar10.py": {
        "tensorflow": {
            "placeholder_85": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_86": {
                "variable": {
                    "value": "encoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "Remove_150": {
                "filename": {
                    "value": "filepath",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_153": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'cifar-10-batches-py')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_162": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_163": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_168": {
                "filename": {
                    "value": "testing_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_175": {
                "path": {
                    "value": "training_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_184": {
                "path": {
                    "value": "testing_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_88": {
                "target": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/datasets/download_and_convert_flowers.py": {
        "tensorflow": {
            "placeholder_57": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_58": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Remove_161": {
                "filename": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_164": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'flower_photos')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_183": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_184": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_124": {
                "target": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Exists_172": {
                "filename": {
                    "value": "output_filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_130": {
                "path": {
                    "value": "output_filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_139": {
                "variable": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filenames[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/datasets/download_and_convert_mnist.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(_IMAGE_SIZE, _IMAGE_SIZE, _NUM_CHANNELS)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "encode_png_118": {
                "variable": {
                    "value": "encoded_png",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Remove_183": {
                "filename": {
                    "value": "filepath",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_192": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_193": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_198": {
                "filename": {
                    "value": "testing_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_205": {
                "path": {
                    "value": "training_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_211": {
                "path": {
                    "value": "testing_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_120": {
                "target": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_167": {
                "name": {
                    "value": "filepath",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/slim/datasets/flowers.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/datasets/imagenet.py": {
        "tensorflow": {
            "FixedLenFeature_147": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_149": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpeg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_151": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_153": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VarLenFeature_155": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_157": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_159": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_161": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_163": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/datasets/mnist.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "raw",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([1], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/deployment/model_deploy.py": {
        "tensorflow": {
            "add_n_308": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_359": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_220": {
                "variable": {
                    "value": "clone_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_296": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_218": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_222": {
                "variable": {
                    "value": "clone_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clone_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, clone.scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "clone_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_228": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "regularization_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_232": {
                "variable": {
                    "value": "sum_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_collection_351": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_363": {
                "device_name": {
                    "value": "config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_387": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_224": {
                "variable": {
                    "value": "clone_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clone_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 * num_clones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scaled_clone_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_264": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_299": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_382": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_n_398": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_402": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_445": {
                "variable": {
                    "value": "sum_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "var.op.name + '/sum_grads'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_475": {
                "msg": {
                    "value": "Var %s has no gradient",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "config.clone_scope(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_366": {
                "device_name": {
                    "value": "config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_192": {
                "device_name": {
                    "value": "clone_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.clone_device(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_390": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_473": {
                "t_list": {
                    "value": "[grad_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_variable_scope_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/deployment/model_deploy_test.py": {
        "tensorflow": {
            "Graph_184": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_210": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_236": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_264": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_289": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_331": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_357": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_383": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_410": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_438": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_480": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_op_77": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_op_136": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LogisticClassifier",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BatchNormClassifier",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_187": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_206": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_214": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_232": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_240": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_267": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_268": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_292": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_293": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_334": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_335": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_344": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_360": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_370": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_373": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_386": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_387": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_397": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_413": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_414": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_425": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_428": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_441": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_442": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_452": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_455": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_483": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_484": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_491": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_497": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_74": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_133": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_186": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_212": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_238": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_258": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_266": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_291": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_333": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_359": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_385": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_412": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_440": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_482": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_527": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_532": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_551": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_538": {
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/download_and_convert_data.py": {
        "tensorflow": {
            "DEFINE_string_45": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to convert, one of \"cifar10\", \"flowers\", \"mnist\".",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "dataset_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the output TFRecords and temporary files are saved.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/eval_image_classifier.py": {
        "tensorflow": {
            "DEFINE_integer_30": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "max_num_batches",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of batches to evaluate by default use all.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the model was written to or an absolute path to a checkpoint file.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "eval_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where the results are saved to.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "dataset_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "labels_offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "model_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to evaluate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_74": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "eval_image_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Eval image size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_89": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_130": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_150": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_142": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "Print_164": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "op",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scalar_summary(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "summary_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "IsDirectory_174": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_175": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_179": {
                "msg": {
                    "value": "'Evaluating %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_165": {
                "name": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "op",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scalar_summary(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/alexnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_42": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_105": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/alexnet_test.py": {
        "tensorflow": {
            "main_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_108": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/cifarnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_25": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'CifarNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "CifarNet",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_104": {
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_108": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_resnet_v2.py": {
        "tensorflow": {
            "concat_45": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_168": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tower_conv, tower_conv1_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_224": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_248": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_resnet_v2_test.py": {
        "tensorflow": {
            "main_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_111": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_129": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_68": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_70": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_64": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_66": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "initialize_all_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_utils.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/slim/nets/inception_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_152": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_169": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_186": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_203": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_225": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_298": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_v1_test.py": {
        "tensorflow": {
            "placeholder_152": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_172": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_189": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "initialize_all_variables_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_v2.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_466": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_148": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_203": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_233": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_263": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_293": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_324": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_349": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_379": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_410": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_329": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_354": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_482": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_269": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_337": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_373": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_386": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_388": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_404": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_v2_test.py": {
        "tensorflow": {
            "placeholder_204": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_224": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_241": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_188": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "initialize_all_variables_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_v3.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_475": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_161": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_256": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_364": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_413": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_374": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0b_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_381": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_399": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_406": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_510": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_521": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_487": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_506": {
                "variable": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "end_points['Mixed_6e']",
                            "Subscript"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID', scope='AvgPool_1a_5x5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(128), [1, 1], scope='Conv2d_1b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(768), kernel_size, weights_initializer=trunc_normal(0.01), padding='VALID', scope='Conv2d_2a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=trunc_normal(0.001), scope='Conv2d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(aux_logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_v3_test.py": {
        "tensorflow": {
            "placeholder_233": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_253": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_271": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "initialize_all_variables_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_v4.py": {
        "tensorflow": {
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionA",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_52": {
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionA",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_72": {
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionB",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionB",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_118": {
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionC",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_131": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[slim.conv2d(branch_1, 256, [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, 256, [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[slim.conv2d(branch_2, 256, [1, 3], scope='Conv2d_0d_1x3'), slim.conv2d(branch_2, 256, [3, 1], scope='Conv2d_0e_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_144": {
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Mixed_3a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Mixed_4a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_318": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_306": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/inception_v4_test.py": {
        "tensorflow": {
            "main_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_149": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_151": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_191": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_209": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_145": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_147": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/lenet.py": {
        "tensorflow": {
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'LeNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LeNet",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_91": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/nets_factory.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/slim/nets/nets_factory_test.py": {
        "tensorflow": {
            "main_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/overfeat.py": {
        "tensorflow": {
            "truncated_normal_initializer_37": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'overfeat'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "overfeat",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_99": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/overfeat_test.py": {
        "tensorflow": {
            "main_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_108": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/resnet_utils.py": {
        "tensorflow": {
            "pad_119": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/resnet_v1.py": {
        "tensorflow": {
            "relu_108": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_196": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/resnet_v1_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_small'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initialize_all_variables_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initialize_all_variables_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initialize_all_variables_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_159": {
                "key": {
                    "value": "end_points",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_375": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_227": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/resnet_v2.py": {
        "tensorflow": {
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_205": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/resnet_v2_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_small'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initialize_all_variables_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initialize_all_variables_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initialize_all_variables_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_159": {
                "key": {
                    "value": "end_points",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_375": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_227": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/vgg.py": {
        "tensorflow": {
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_a",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_19",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_178": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_237": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/nets/vgg_test.py": {
        "tensorflow": {
            "main_455": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_119": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_142": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_263": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_286": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_418": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_440": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_441": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/preprocessing/cifarnet_preprocessing.py": {
        "tensorflow": {
            "to_float_51": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_55": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[output_height, output_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_59": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_65": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_67": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_86": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_53": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "input": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/preprocessing/inception_preprocessing.py": {
        "tensorflow": {
            "sample_distorted_bounding_box_141": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_152": {
                "variable": {
                    "value": "cropped_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_193": {
                "variable": {
                    "value": "image_with_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "draw_bounding_boxes_201": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distorted_bbox",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_222": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.sub(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_40": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_96": {
                "t": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_184": {
                "name": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_186": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_190": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_259": {
                "name": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_261": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "central_crop_265": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "central_fraction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.875",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_269": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_bilinear_270": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_272": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_66": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_67": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_69": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_70": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_73": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_74": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_75": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_76": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_193": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_202": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.sub(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_231": {
                "input": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.sub(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_78": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_79": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_80": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_81": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_83": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_85": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_86": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_88": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_90": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_91": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_41": {
                "x": {
                    "value": "sel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/preprocessing/lenet_preprocessing.py": {
        "tensorflow": {
            "to_float_39": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_43": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/slim/preprocessing/preprocessing_factory.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/slim/preprocessing/vgg_preprocessing.py": {
        "tensorflow": {
            "shape_69": {
                "variable": {
                    "value": "original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_71": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_78": {
                "variable": {
                    "value": "size_assertion",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_84": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.pack([offset_height, offset_width, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_134": {
                "variable": {
                    "value": "crop_size_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_230": {
                "variable": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_252": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_254": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_255": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_256": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_258": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_261": {
                "variable": {
                    "value": "new_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_262": {
                "variable": {
                    "value": "new_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_277": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_279": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_283": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_bilinear_284": {
                "variable": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_286": {
                "variable": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_319": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_320": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_339": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([rank_assertion], tf.pack([crop_height, crop_width, original_shape[2]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_122": {
                "variable": {
                    "value": "image_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_123": {
                "variable": {
                    "value": "rank_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_150": {
                "variable": {
                    "value": "height_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_154": {
                "variable": {
                    "value": "width_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_233": {
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.split(2, num_channels, image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_72": {
                "x": {
                    "value": "tf.rank(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logical_and_79": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_90": {
                "input_": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.pack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([rank_assertion], tf.pack([crop_height, crop_width, original_shape[2]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_131": {
                "input": {
                    "value": "image_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_135": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_258": {
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_72": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_80": {
                "x": {
                    "value": "original_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_81": {
                "x": {
                    "value": "original_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_124": {
                "x": {
                    "value": "image_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_136": {
                "x": {
                    "value": "image_height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_137": {
                "x": {
                    "value": "image_width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_151": {
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_155": {
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_193": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/slim/train_image_classifier.py": {
        "tensorflow": {
            "DEFINE_string_31": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where checkpoints and event logs are written to.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "num_clones",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of model clones to deploy.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "worker_replicas",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of worker replicas.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "num_ps_tasks",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parameter servers. If the value is 0, then the parameters are handled locally by the worker.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_readers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parallel readers that read data from the dataset.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved, in seconds.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved, in seconds.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_71": {
                "name": {
                    "value": "task",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_78": {
                "name": {
                    "value": "weight_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The weight decay on the model weights.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_81": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "rmsprop",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the optimizer, one of \"adadelta\", \"adagrad\", \"adam\",\"ftrl\", \"momentum\", \"sgd\" or \"rmsprop\".",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_86": {
                "name": {
                    "value": "adadelta_rho",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay rate for adadelta.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_90": {
                "name": {
                    "value": "adagrad_initial_accumulator_value",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the AdaGrad accumulators.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_94": {
                "name": {
                    "value": "adam_beta1",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 1st moment estimates.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_98": {
                "name": {
                    "value": "adam_beta2",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_102": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_104": {
                "name": {
                    "value": "ftrl_learning_rate_power",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate power.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_107": {
                "name": {
                    "value": "ftrl_initial_accumulator_value",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the FTRL accumulators.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_111": {
                "name": {
                    "value": "ftrl_l1",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l1 regularization strength.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_114": {
                "name": {
                    "value": "ftrl_l2",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l2 regularization strength.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_117": {
                "name": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum for the MomentumOptimizer and RMSPropOptimizer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_121": {
                "name": {
                    "value": "rmsprop_momentum",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Momentum.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_123": {
                "name": {
                    "value": "rmsprop_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay term for RMSProp.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_129": {
                "name": {
                    "value": "learning_rate_decay_type",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "exponential",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Specifies how the learning rate is decayed. One of \"fixed\", \"exponential\", or \"polynomial\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_135": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_137": {
                "name": {
                    "value": "end_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimal end learning rate used by a polynomial decay learning rate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_141": {
                "name": {
                    "value": "label_smoothing",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The amount of label smoothing.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_144": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.94",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_147": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs after which learning rate decays.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_151": {
                "name": {
                    "value": "sync_replicas",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether or not to synchronize the replicas during training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_155": {
                "name": {
                    "value": "replicas_to_aggregate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The Number of gradients to collect before updating params.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_159": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_168": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_171": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_174": {
                "name": {
                    "value": "dataset_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_177": {
                "name": {
                    "value": "labels_offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_183": {
                "name": {
                    "value": "model_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to train.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_186": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_190": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_193": {
                "name": {
                    "value": "train_image_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Train image size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_196": {
                "name": {
                    "value": "max_number_of_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_203": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to a checkpoint from which to fine-tune.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_207": {
                "name": {
                    "value": "checkpoint_exclude_scopes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes of variables to exclude when restoring from a checkpoint.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_212": {
                "name": {
                    "value": "trainable_scopes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes to filter the set of variables to train.By default, None would train all the variables.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "FLAGS.adadelta_rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_338": {
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_360": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_361": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_365": {
                "msg": {
                    "value": "'Fine-tuning from %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_386": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scopes",
                            "Name"
                        ]
                    ]
                }
            },
            "set_verbosity_395": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_486": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_554": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "run_585": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_243": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch / FLAGS.batch_size * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_282": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.adagrad_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_339": {
                "msg": {
                    "value": "'Ignoring --checkpoint_path because a checkpoint already exists in %s' % FLAGS.train_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_450": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_497": {
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_509": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "SyncReplicasOptimizer_526": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.AdadeltaOptimizer(learning_rate, rho=FLAGS.adadelta_rho, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.AdagradOptimizer(learning_rate, initial_accumulator_value=FLAGS.adagrad_initial_accumulator_value)",
                            "Call"
                        ],
                        [
                            "tf.train.AdamOptimizer(learning_rate, beta1=FLAGS.adam_beta1, beta2=FLAGS.adam_beta2, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.FtrlOptimizer(learning_rate, learning_rate_power=FLAGS.ftrl_learning_rate_power, initial_accumulator_value=FLAGS.ftrl_initial_accumulator_value, l1_regularization_strength=FLAGS.ftrl_l1, l2_regularization_strength=FLAGS.ftrl_l2)",
                            "Call"
                        ],
                        [
                            "tf.train.MomentumOptimizer(learning_rate, momentum=FLAGS.momentum, name='Momentum')",
                            "Call"
                        ],
                        [
                            "tf.train.RMSPropOptimizer(learning_rate, decay=FLAGS.rmsprop_decay, momentum=FLAGS.rmsprop_momentum, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.GradientDescentOptimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "_configure_optimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt=optimizer, replicas_to_aggregate=FLAGS.replicas_to_aggregate, variable_averages=variable_averages, variables_to_average=moving_average_variables, replica_id=tf.constant(FLAGS.task, tf.int32, shape=()), total_num_replicas=FLAGS.worker_replicas)",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "FLAGS.replicas_to_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variable_averages": {
                    "value": "variable_averages",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step)",
                            "Call"
                        ]
                    ]
                },
                "variables_to_average": {
                    "value": "moving_average_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                },
                "replica_id": {
                    "value": "tf.constant(FLAGS.task, tf.int32, shape=())",
                    "type": "Call",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "FLAGS.worker_replicas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_250": {
                "value": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fixed_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_286": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_408": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_437": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_480": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_517": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_560": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_252": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch / FLAGS.batch_size * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "FLAGS.end_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "polynomial_decay_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FtrlOptimizer_292": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "learning_rate_power": {
                    "value": "FLAGS.ftrl_learning_rate_power",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.ftrl_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l1_regularization_strength": {
                    "value": "FLAGS.ftrl_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l2_regularization_strength": {
                    "value": "FLAGS.ftrl_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_299": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Momentum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zero_fraction_494": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_531": {
                "value": {
                    "value": "FLAGS.task",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_304": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "FLAGS.rmsprop_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.rmsprop_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_310": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/decoder.py": {
        "tensorflow": {
            "Coordinator_79": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_80": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_189": {
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/decoder_test.py": {
        "tensorflow": {
            "main_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/errorcounter_test.py": {
        "tensorflow": {
            "main_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/nn_ops.py": {
        "tensorflow": {
            "load_op_library_22": {
                "variable": {
                    "value": "rnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "../cc/rnn_ops.so",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RegisterGradient_119": {
                "op_type": {
                    "value": "VariableLSTM",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reverse(inp, [False, True, False])",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(inp, length, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack([batch_size * num_frames, num_prev])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_237": {
                "variable": {
                    "value": "prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inp, tf.pack([batch_size * num_frames, num_prev]))",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(prev, w_i_m, biases)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prev, tf.pack([batch_size, num_frames, 4, num_nodes]))",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w_i_m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w_i_m', [num_prev, 4 * num_nodes], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.slice(w, [0, 0], [num_prev, 4 * num_nodes], name='w_i_m')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [4 * num_nodes], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.identity(b, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inp, tf.pack([batch_size * num_frames, num_prev]))",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(prev, w_i_m, biases)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prev, tf.pack([batch_size, num_frames, 4, num_nodes]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack([batch_size, num_frames, 4, num_nodes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_192": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_unit_scaling_initializer_194": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_209": {
                "variable": {
                    "value": "w_i_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_i_m",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_prev, 4 * num_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.uniform_unit_scaling_initializer(seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_211": {
                "variable": {
                    "value": "w_m_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_m_m",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes, 4, num_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.uniform_unit_scaling_initializer(seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_229": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=[4 * num_nodes], initializer=tf.zeros_initializer, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_231": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4 * num_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_241": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.pack([batch_size, num_nodes])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_243": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.pack([batch_size, num_nodes])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_95": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[forward, backward]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_186": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reverse(inp, [False, True, False])",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(inp, length, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[False, True, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_sequence_188": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reverse(inp, [False, True, False])",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(inp, length, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_prev + num_nodes, 4 * num_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.uniform_unit_scaling_initializer(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_203": {
                "variable": {
                    "value": "w_i_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W_0', shape=[num_prev + num_nodes, 4 * num_nodes], initializer=initializer, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_prev, 4 * num_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "w_i_m",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "w_m_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(w, [num_prev, 0], [num_nodes, 4 * num_nodes])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes, 4, num_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "w_m_m",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_215": {
                "name": {
                    "value": "weight_collection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'LSTMWeights'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "reg_func(w_i_m, name='w_i_m_reg')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_216": {
                "name": {
                    "value": "weight_collection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'LSTMWeights'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "reg_func(w_m_m, name='w_m_m_reg')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_224": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4 * num_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_234": {
                "name": {
                    "value": "weight_collection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'LSTMWeights'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "reg_func(biases, name='biases_reg')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_249": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "forward",
                            "Name"
                        ],
                        [
                            "backward",
                            "Name"
                        ],
                        [
                            "tf.concat(2, [forward, backward])",
                            "Call"
                        ],
                        [
                            "tf.reverse(out, [False, True, False])",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(out, length, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[False, True, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_sequence_251": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "forward",
                            "Name"
                        ],
                        [
                            "backward",
                            "Name"
                        ],
                        [
                            "tf.concat(2, [forward, backward])",
                            "Call"
                        ],
                        [
                            "tf.reverse(out, [False, True, False])",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(out, length, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "LSTMCell",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "LSTMCell",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_205": {
                "input_": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W_0', shape=[num_prev + num_nodes, 4 * num_nodes], initializer=initializer, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[num_prev, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_nodes, 4 * num_nodes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_232": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/shapes.py": {
        "tensorflow": {
            "reshape_157": {
                "variable": {
                    "value": "expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "prev_shape[:src_dim] + [part_a, part_b] + prev_shape[src_dim + 1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reshape_in'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "variable": {
                    "value": "expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, prev_shape[:src_dim] + [part_a, part_b] + prev_shape[src_dim + 1:], name=name + '_reshape_in')",
                            "Call"
                        ],
                        [
                            "tf.transpose(expanded, dim_list, name=name + '_rot_transpose')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "dim_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(num_dims)",
                            "Call"
                        ],
                        [
                            "rotate_dimensions(len(expanded.get_shape()), src_dim, dest)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_rot_transpose'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "tensor": {
                    "value": "expanded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, prev_shape[:src_dim] + [part_a, part_b] + prev_shape[src_dim + 1:], name=name + '_reshape_in')",
                            "Call"
                        ],
                        [
                            "tf.transpose(expanded, dim_list, name=name + '_rot_transpose')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ex_shape[:dest] + [combined] + ex_shape[dest + 2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reshape_out'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_199": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/shapes_test.py": {
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/vgsl_eval.py": {
        "tensorflow": {
            "DEFINE_string_21": {
                "name": {
                    "value": "eval_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/mdir/eval",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "graph_def_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Output eval graph definition file.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/mdir",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to find training checkpoints.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "model_str",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1,150,600,3[S2(4x150)0,2 Ct5,5,16 Mp2,2 Ct5,5,64 Mp3,3([Lrys64 Lbx128][Lbys64 Lbx128][Lfys64 Lbx128])S3(3x0)2,3Lfx128 Lrx128 S0(1x4)0,3 Do Lfx256]O1c134",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Network description.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "num_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of steps to run evaluation.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "eval_interval_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Time interval between eval runs.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "eval_data",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluation data filepattern",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_36": {
                "name": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Charset decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/vgsl_input.py": {
        "tensorflow": {
            "Glob_51": {
                "variable": {
                    "value": "data_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "string_input_producer_54": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gfile.Glob(input_pattern)",
                            "Call"
                        ]
                    ]
                },
                "capacity": {
                    "value": "queue_capacity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape.batch_size * num_threads * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "batch_join_65": {
                "variable": {
                    "value": "(images, heights, widths, labels, truths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors_list": {
                    "value": "images_and_label_lists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "shape.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "16 * shape.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "deserialize_many_sparse_71": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized_sparse": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.deserialize_many_sparse(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape.batch_size, -1], name='Labels')",
                            "Call"
                        ],
                        [
                            "features['image/unpadded_class']",
                            "Subscript"
                        ],
                        [
                            "features['image/class']",
                            "Subscript"
                        ],
                        [
                            "tf.serialize_sparse(labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_72": {
                "variable": {
                    "value": "sparse_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.deserialize_many_sparse(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape.batch_size, -1], name='Labels')",
                            "Call"
                        ],
                        [
                            "features['image/unpadded_class']",
                            "Subscript"
                        ],
                        [
                            "features['image/class']",
                            "Subscript"
                        ],
                        [
                            "tf.serialize_sparse(labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.deserialize_many_sparse(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape.batch_size, -1], name='Labels')",
                            "Call"
                        ],
                        [
                            "features['image/unpadded_class']",
                            "Subscript"
                        ],
                        [
                            "features['image/class']",
                            "Subscript"
                        ],
                        [
                            "tf.serialize_sparse(labels)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "heights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "heights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(heights, [-1], name='Heights')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Heights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "widths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(widths, [-1], name='Widths')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Widths",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "truths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "truths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(truths, [-1], name='Truths')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Truths",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_80": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(images, name='Images')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "example_serialized",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "example_serialized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(example_serialized, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_example_108": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_serialized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(example_serialized, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'image/encoded': parsing_ops.FixedLenFeature([1], dtype=tf.string, default_value=''), 'image/text': parsing_ops.FixedLenFeature([1], dtype=tf.string, default_value=''), 'image/class': parsing_ops.VarLenFeature(dtype=tf.int64), 'image/unpadded_class': parsing_ops.VarLenFeature(dtype=tf.int64), 'image/height': parsing_ops.FixedLenFeature([1], dtype=tf.int64, default_value=1), 'image/width': parsing_ops.FixedLenFeature([1], dtype=tf.int64, default_value=1)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "serialize_sparse_124": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.deserialize_many_sparse(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape.batch_size, -1], name='Labels')",
                            "Call"
                        ],
                        [
                            "features['image/unpadded_class']",
                            "Subscript"
                        ],
                        [
                            "features['image/class']",
                            "Subscript"
                        ],
                        [
                            "tf.serialize_sparse(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "encoded",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['image/text']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_png_145": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "shape.depth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_147": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(features['image/encoded'], shape=[], name='encoded')",
                            "Call"
                        ],
                        [
                            "_ImageProcessing(image, shape)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image_buffer, channels=shape.depth)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.sub(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.mul(image, 1 / 100.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_105": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_110": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_112": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VarLenFeature_114": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_115": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_116": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_118": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/vgsl_model.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/street/python/vgsl_model_test.py": {
        "tensorflow": {
            "main_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "ph_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "ph_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "ph_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "ph_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Coordinator_184": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_208": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_232": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_183": {
                "session": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "start_queue_runners_185": {
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_207": {
                "session": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "start_queue_runners_209": {
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_231": {
                "session": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "start_queue_runners_233": {
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_75": {
                "input": {
                    "value": "ph_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None, 42))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, None, None, 42))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/vgsl_train.py": {
        "tensorflow": {
            "DEFINE_string_21": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Name of the TensorFlow master to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/mdir",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "model_str",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1,150,600,3[S2(4x150)0,2 Ct5,5,16 Mp2,2 Ct5,5,64 Mp3,3([Lrys64 Lbx128][Lbys64 Lbx128][Lfys64 Lbx128])S3(3x0)2,3Lfx128 Lrx128 S0(1x4)0,3 Do Lfx256]O1c134",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Network description.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of steps to train for.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "task",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "ps_tasks",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of tasks in the ps job.If 0 no ps job is used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "train_data",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data filepattern",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_34": {
                "name": {
                    "value": "initial_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_35": {
                "name": {
                    "value": "final_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Final learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "learning_rate_halflife",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1600000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Halflife of learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "optimizer_type",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "Adam",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Optimizer from:GradientDescent, AdaGrad, Momentum, Adam",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "num_preprocess_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of input threads",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/vgslspecs.py": {
        "tensorflow": {
            "cast_146": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.heights",
                            "Attribute"
                        ],
                        [
                            "tf.cast(lengths, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.widths",
                            "Attribute"
                        ],
                        [
                            "tf.div(lengths, self.reduction_factors[dim])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(lengths)",
                            "Call"
                        ],
                        [
                            "tf.mul(lengths, tf.cast(factor, tf.float32))",
                            "Call"
                        ],
                        [
                            "self.GetLengths(2, 1)",
                            "Call"
                        ],
                        [
                            "self.GetLengths(1, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(lengths, [tf.cast(tile_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_304": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prev_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "is_training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._GetLayerName(m.group(0), index, m.group(3))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(3))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(5))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_335": {
                "variable": {
                    "value": "prev_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_339": {
                "variable": {
                    "value": "result_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.dropout(prev_layer, 0.5, is_training=self.is_training, scope=name)",
                            "Call"
                        ],
                        [
                            "shapes.transposing_reshape(prev_layer, src_dim, part_a, part_b, dest_dim_a, dest_dim_b, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_370": {
                "variable": {
                    "value": "shaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, input_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reshape_in'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_448": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_layer",
                            "Name"
                        ],
                        [
                            "tf.transpose(prev_layer, [0, 2, 1, 3], name=name + '_ytrans_in')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, num_steps, input_depth], name=name + '_reshape_in')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_steps, input_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reshape_in'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_454": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.heights",
                            "Attribute"
                        ],
                        [
                            "tf.cast(lengths, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.widths",
                            "Attribute"
                        ],
                        [
                            "tf.div(lengths, self.reduction_factors[dim])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(lengths)",
                            "Call"
                        ],
                        [
                            "tf.mul(lengths, tf.cast(factor, tf.float32))",
                            "Call"
                        ],
                        [
                            "self.GetLengths(2, 1)",
                            "Call"
                        ],
                        [
                            "self.GetLengths(1, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(lengths, [tf.cast(tile_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.cast(tile_factor, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_455": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.heights",
                            "Attribute"
                        ],
                        [
                            "tf.cast(lengths, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.widths",
                            "Attribute"
                        ],
                        [
                            "tf.div(lengths, self.reduction_factors[dim])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(lengths)",
                            "Call"
                        ],
                        [
                            "tf.mul(lengths, tf.cast(factor, tf.float32))",
                            "Call"
                        ],
                        [
                            "self.GetLengths(2, 1)",
                            "Call"
                        ],
                        [
                            "self.GetLengths(1, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(lengths, [tf.cast(tile_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_148": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.heights",
                            "Attribute"
                        ],
                        [
                            "tf.cast(lengths, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.widths",
                            "Attribute"
                        ],
                        [
                            "tf.div(lengths, self.reduction_factors[dim])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(lengths)",
                            "Call"
                        ],
                        [
                            "tf.mul(lengths, tf.cast(factor, tf.float32))",
                            "Call"
                        ],
                        [
                            "self.GetLengths(2, 1)",
                            "Call"
                        ],
                        [
                            "self.GetLengths(1, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(lengths, [tf.cast(tile_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.reduction_factors[dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_150": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.heights",
                            "Attribute"
                        ],
                        [
                            "tf.cast(lengths, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.widths",
                            "Attribute"
                        ],
                        [
                            "tf.div(lengths, self.reduction_factors[dim])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(lengths)",
                            "Call"
                        ],
                        [
                            "tf.mul(lengths, tf.cast(factor, tf.float32))",
                            "Call"
                        ],
                        [
                            "self.GetLengths(2, 1)",
                            "Call"
                        ],
                        [
                            "self.GetLengths(1, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(lengths, [tf.cast(tile_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_153": {
                "x": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.heights",
                            "Attribute"
                        ],
                        [
                            "tf.cast(lengths, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.widths",
                            "Attribute"
                        ],
                        [
                            "tf.div(lengths, self.reduction_factors[dim])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(lengths)",
                            "Call"
                        ],
                        [
                            "tf.mul(lengths, tf.cast(factor, tf.float32))",
                            "Call"
                        ],
                        [
                            "self.GetLengths(2, 1)",
                            "Call"
                        ],
                        [
                            "self.GetLengths(1, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(lengths, [tf.cast(tile_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_442": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prev_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_ytrans_in'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_471": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._LSTMLayer(prev_layer, direction, dim, summarize, depth, name)",
                            "Call"
                        ],
                        [
                            "nn_ops.rnn_helper(inputs, lengths, cell_type='lstm', num_nodes=depth, direction=direction, name=name, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, num_steps - 1, 0], [-1, 1, -1], name=name + '_sum_slice')",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [input_batch, num_slices, 1, output_depth], name=name + '_reshape_out')",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [input_batch, num_slices, num_steps, output_depth], name=name + '_reshape_out')",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1, 3], name=name + '_ytrans_out')",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, num_steps - 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_sum_slice'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_473": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._LSTMLayer(prev_layer, direction, dim, summarize, depth, name)",
                            "Call"
                        ],
                        [
                            "nn_ops.rnn_helper(inputs, lengths, cell_type='lstm', num_nodes=depth, direction=direction, name=name, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, num_steps - 1, 0], [-1, 1, -1], name=name + '_sum_slice')",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [input_batch, num_slices, 1, output_depth], name=name + '_reshape_out')",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [input_batch, num_slices, num_steps, output_depth], name=name + '_reshape_out')",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1, 3], name=name + '_ytrans_out')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_batch, num_slices, 1, output_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reshape_out'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_477": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._LSTMLayer(prev_layer, direction, dim, summarize, depth, name)",
                            "Call"
                        ],
                        [
                            "nn_ops.rnn_helper(inputs, lengths, cell_type='lstm', num_nodes=depth, direction=direction, name=name, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, num_steps - 1, 0], [-1, 1, -1], name=name + '_sum_slice')",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [input_batch, num_slices, 1, output_depth], name=name + '_reshape_out')",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [input_batch, num_slices, num_steps, output_depth], name=name + '_reshape_out')",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1, 3], name=name + '_ytrans_out')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_batch, num_slices, num_steps, output_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reshape_out'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_481": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._LSTMLayer(prev_layer, direction, dim, summarize, depth, name)",
                            "Call"
                        ],
                        [
                            "nn_ops.rnn_helper(inputs, lengths, cell_type='lstm', num_nodes=depth, direction=direction, name=name, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.slice(outputs, [0, num_steps - 1, 0], [-1, 1, -1], name=name + '_sum_slice')",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [input_batch, num_slices, 1, output_depth], name=name + '_reshape_out')",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [input_batch, num_slices, num_steps, output_depth], name=name + '_reshape_out')",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1, 3], name=name + '_ytrans_out')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_ytrans_out'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_238": {
                "values": {
                    "value": "num_dims - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "conv2d_259": {
                "input": {
                    "value": "prev_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "depth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(m.group(6))",
                            "Call"
                        ],
                        [
                            "int(m.group(4))",
                            "Call"
                        ],
                        [
                            "int(m.group(6))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "fn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._NonLinearity(m.group(2))",
                            "Call"
                        ],
                        [
                            "self._NonLinearity(m.group(2))",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._GetLayerName(m.group(0), index, m.group(3))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(3))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(5))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_284": {
                "input": {
                    "value": "prev_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[y_stride, x_stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._GetLayerName(m.group(0), index, m.group(3))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(2))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(3))",
                            "Call"
                        ],
                        [
                            "self._GetLayerName(m.group(0), index, m.group(5))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_342": {
                "variable": {
                    "value": "factor1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.reduction_factors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_343": {
                "variable": {
                    "value": "factor2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prev_shape[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_344": {
                "variable": {
                    "value": "divisor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "result_shape[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_345": {
                "variable": {
                    "value": "self.reduction_factors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.mul(factor1, factor2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "divisor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(result_shape[i], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_376": {
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.fully_connected(shaped, depth, activation_fn=fn, scope=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shapes.tensor_dim(prev_layer, 0), 1, 1, depth]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reshape_out'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_452": {
                "x": {
                    "value": "input_batch * num_slices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_453": {
                "x": {
                    "value": "tf.shape(lengths)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_152": {
                "x": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_404": {
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fwd, back]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_454": {
                "x": {
                    "value": "tile_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(input_batch * num_slices) / tf.to_float(tf.shape(lengths)[0])",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_453": {
                "input": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.heights",
                            "Attribute"
                        ],
                        [
                            "tf.cast(lengths, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.widths",
                            "Attribute"
                        ],
                        [
                            "tf.div(lengths, self.reduction_factors[dim])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(lengths)",
                            "Call"
                        ],
                        [
                            "tf.mul(lengths, tf.cast(factor, tf.float32))",
                            "Call"
                        ],
                        [
                            "self.GetLengths(2, 1)",
                            "Call"
                        ],
                        [
                            "self.GetLengths(1, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(lengths, [tf.cast(tile_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/street/python/vgslspecs_test.py": {
        "tensorflow": {
            "placeholder_37": {
                "variable": {
                    "value": "self.ph_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.ph_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.ph_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "h",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_55": {
                "variable": {
                    "value": "target_widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.in_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_56": {
                "variable": {
                    "value": "target_heights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.in_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "initialize_all_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/swivel/glove_to_shards.py": {
        "tensorflow": {
            "run_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_154": {
                "path": {
                    "value": "filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'shard-%03d-%03d.bin' % (row, col))",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.output_dir, 'shards.recs')",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_179": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'global_row': _int64s((row + nshards * i for i in range(shard_sz))), 'global_col': _int64s((col + nshards * i for i in range(shard_sz))), 'sparse_local_row': _int64s((pos / shard_sz for (pos, _) in coocs)), 'sparse_local_col': _int64s((pos % shard_sz for (pos, _) in coocs)), 'sparse_value': _floats((cnt for (_, cnt) in coocs))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_174": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(xs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_177": {
                "float_list": {
                    "value": "tf.train.FloatList(value=list(xs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_179": {
                "feature": {
                    "value": "{'global_row': _int64s((row + nshards * i for i in range(shard_sz))), 'global_col': _int64s((col + nshards * i for i in range(shard_sz))), 'sparse_local_row': _int64s((pos / shard_sz for (pos, _) in coocs)), 'sparse_local_col': _int64s((pos % shard_sz for (pos, _) in coocs)), 'sparse_value': _floats((cnt for (_, cnt) in coocs))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Int64List_174": {
                "value": {
                    "value": "list(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_177": {
                "value": {
                    "value": "list(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/swivel/nearest.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/swivel/prep.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/swivel/swivel.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/swivel/text2bin.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/beam_reader_ops_test.py": {
        "tensorflow": {
            "get_temp_dir_34": {
                "variable": {
                    "value": "FLAGS.test_tmpdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_99": {
                "variable": {
                    "value": "builder.training[inits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*builder.inits.values()",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "inits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_67": {
                "msg": {
                    "value": "MakeGraph + %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "kwargs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_111": {
                "msg": {
                    "value": "params: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "builder.params.keys()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_112": {
                "msg": {
                    "value": "variables: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "builder.variables.keys()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_160": {
                "msg": {
                    "value": "Pseudo eval: <cost>: %f <gold_slot>: %f <alive_steps>: %f",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "sum(costs[-every_n:]) / float(every_n)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "sum(gold_slots[-every_n:]) / float(every_n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_174": {
                "msg": {
                    "value": "run %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(iterations)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "info_181": {
                "msg": {
                    "value": "alive for %s, all_path_scores and beam_path_scores, indices and path_ids:\\n%s\\n%s\\n%s\\n%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "tensors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tensors[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_185": {
                "msg": {
                    "value": "diff:\\n%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "tensors[2] - tensors[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_197": {
                "msg": {
                    "value": "run %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(iterations)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_124": {
                "msg": {
                    "value": "Step: %d <cost>: %f <gold_slot>: %f <alive_steps>: %f <iter time>: %f ms",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "step",
                    "type": "Call",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                            ],
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                            ],
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "sum(costs[-every_n:]) / float(every_n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_147": {
                "ref": {
                    "value": "builder.params[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "avg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "builder.variables['%s_avg_var' % v].eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/conll2tree.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/graph_builder.py": {
        "tensorflow": {
            "diag_41": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.fill([output_size], tf.constant(1, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_66": {
                "variable": {
                    "value": "sparse_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sparse_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(sparse_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_68": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[params]",
                            "List"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_42": {
                "params": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.diag(tf.fill([output_size], tf.constant(1, tf.float32)))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "sparse_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "broadcast_weights_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tf.shape(weights), [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_76": {
                "data": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params, ids)",
                            "Call"
                        ],
                        [
                            "embeddings * tf.reshape(weights, broadcast_weights_shape)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "tf.size(sparse_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_266": {
                "variable": {
                    "value": "self.variables[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_333": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params, ids)",
                            "Call"
                        ],
                        [
                            "embeddings * tf.reshape(weights, broadcast_weights_shape)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "xw_plus_b_369": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(1, embeddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu_layer(last_layer, weights, bias, name='layer_%d' % i)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "softmax_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._AddParam([last_layer_size, self._num_actions], tf.float32, 'softmax_weight', tf.random_normal_initializer(stddev=self._softmax_init, seed=self._seed), return_average=return_average)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "softmax_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._AddParam([self._num_actions], tf.float32, 'softmax_bias', tf.zeros_initializer, return_average=return_average)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_406": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.nn.softmax_cross_entropy_with_logits(logits, dense_golden))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "fill_41": {
                "dims": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._AddParam([last_layer_size, hidden_layer_size], tf.float32, 'weights_%d' % i, self._ReluWeightInitializer(), return_average=return_average)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_weights_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(0, [tf.shape(weights), [1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "size_76": {
                "input": {
                    "value": "sparse_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(sparse_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_204": {
                "variable": {
                    "value": "self._relu_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "bias_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_236": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.GetStep()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "tensor": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EmbeddingLookupFeatures(embedding_matrix, tf.reshape(features, [-1], name='feature_%d' % index), self._allow_feature_weights)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_features * embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_layer_349": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(1, embeddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu_layer(last_layer, weights, bias, name='layer_%d' % i)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._AddParam([last_layer_size, hidden_layer_size], tf.float32, 'weights_%d' % i, self._ReluWeightInitializer(), return_average=return_average)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._AddParam([hidden_layer_size], tf.float32, 'bias_%d' % i, self._relu_bias_init, return_average=return_average)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'layer_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_add_454": {
                "ref": {
                    "value": "counter",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_525": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._AddLearningRate(learning_rate, decay_steps)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_540": {
                "variable": {
                    "value": "check_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*numerical_checks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_541": {
                "variable": {
                    "value": "avg_update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*self._averaging.values()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_547": {
                "variable": {
                    "value": "nodes[train_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "train_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_568": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_save",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.params.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_41": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_203": {
                "name": {
                    "value": "params",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_240": {
                "variable": {
                    "value": "self.params[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_260": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_273": {
                "name": {
                    "value": "self._param_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_274": {
                "stddev": {
                    "value": "self._relu_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self._seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_281": {
                "stddev": {
                    "value": "self._embedding_init / embedding_size ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "self._seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_300": {
                "tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'feature_%d' % index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_360": {
                "stddev": {
                    "value": "self._softmax_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self._seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_382": {
                "input": {
                    "value": "gold_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gold_actions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_384": {
                "input": {
                    "value": "epochs",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "epochs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_398": {
                "input": {
                    "value": "epochs",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "epochs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_407": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits, dense_golden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_409": {
                "t": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_413": {
                "x": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.div(tf.reduce_sum(tf.nn.softmax_cross_entropy_with_logits(logits, dense_golden)), batch_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "l2_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001 * tf.add_n(regularized_params) if regularized_params else 0",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "cost",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_433": {
                "ref": {
                    "value": "nodes['transition_scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "nodes['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "validate_shape": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_436": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_438": {
                "name": {
                    "value": "evaluation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_469": {
                "learning_rate": {
                    "value": "initial_learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "global_step": {
                    "value": "step",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(self.GetStep(), tf.float32)",
                            "Call"
                        ],
                        [
                            "self.GetStep()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4000",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "Constant",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_510": {
                "name": {
                    "value": "training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_561": {
                "name": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._AddParam([last_layer_size, hidden_layer_size], tf.float32, 'weights_%d' % i, self._ReluWeightInitializer(), return_average=return_average)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_239": {
                "name": {
                    "value": "self._param_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_246": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "step / (step + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_249": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "self._averaging_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "step",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(self.GetStep(), tf.float32)",
                            "Call"
                        ],
                        [
                            "self.GetStep()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_407": {
                "labels": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(last_layer, softmax_weight, softmax_bias, name='logits')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "dense_golden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchedSparseToDense(gold_actions, self._num_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_412": {
                "inputs": {
                    "value": "regularized_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.l2_loss(p) for (k, p) in self.params.items() if k.startswith('weights') or k.startswith('bias')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "constant_initializer_442": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "check_numerics_535": {
                "tensor": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.params[name]",
                            "Subscript"
                        ],
                        [
                            "trainable_params",
                            "Name"
                        ]
                    ]
                },
                "message": {
                    "value": "Parameter is not finite.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_245": {
                "msg": {
                    "value": "Using vanilla averaging of parameters.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_448": {
                "pred": {
                    "value": "tf.greater(tf.size(nodes['logits']), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_AssignTransitionScores",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_Pass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_448": {
                "x": {
                    "value": "tf.size(nodes['logits'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "size_448": {
                "input": {
                    "value": "nodes['logits']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/graph_builder_test.py": {
        "tensorflow": {
            "get_temp_dir_35": {
                "variable": {
                    "value": "FLAGS.test_tmpdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_78": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_112": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_132": {
                "variable": {
                    "value": "custom_train_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_139": {
                "variable": {
                    "value": "custom_eval_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_160": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_211": {
                "variable": {
                    "value": "graph1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_230": {
                "variable": {
                    "value": "graph2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_253": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_279": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_301": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_281": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_284": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[self.MakeSparseFeatures([1, 2], [1.0, 1.0]), self.MakeSparseFeatures([], [])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_291": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[self.MakeSparseFeatures([], []), self.MakeSparseFeatures([0, 2], [0.5, 2.0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/lexicon_builder_test.py": {
        "tensorflow": {
            "main_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_82": {
                "variable": {
                    "value": "FLAGS.test_tmpdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_99": {
                "msg": {
                    "value": "Writing context to: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.context_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_163": {
                "msg": {
                    "value": "Writing conll file to: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.corpus_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_115": {
                "msg": {
                    "value": "Reading document1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_120": {
                "msg": {
                    "value": "Reading document2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_125": {
                "msg": {
                    "value": "Hitting end of the dataset",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/load_parser_ops.py": {
        "tensorflow": {
            "load_op_library_21": {
                "library_filename": {
                    "value": "os.path.join(tf.resource_loader.get_data_files_path(), 'parser_ops.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_data_files_path_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/parser_eval.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "sink_documents",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_87": {
                "msg": {
                    "value": "Building training network with parameters: feature_sizes: %s domain_sizes: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "feature_sizes",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "domain_sizes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_145": {
                "msg": {
                    "value": "Total processed documents: %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_documents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "num_documents + len(tf_documents)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_155": {
                "level": {
                    "value": "logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_65": {
                "name": {
                    "value": "task_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.task_context",
                            "Attribute"
                        ],
                        [
                            "RewriteContext(task_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_148": {
                "msg": {
                    "value": "num correct tokens: %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_correct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "num_correct + tf_eval_metrics[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_149": {
                "msg": {
                    "value": "total tokens: %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "num_tokens + tf_eval_metrics[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_150": {
                "msg": {
                    "value": "Seconds elapsed in evaluation: %.2f, eval metric: %.2f%%",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "time.time() - t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "eval_metric",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100.0 * num_correct / num_tokens",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_134": {
                "msg": {
                    "value": "Processed %d documents",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(tf_documents)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/parser_trainer.py": {
        "tensorflow": {
            "info_131": {
                "msg": {
                    "value": "Evaluating training network.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_147": {
                "msg": {
                    "value": "Seconds elapsed in evaluation: %.2f, eval metric: %.2f%%",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "time.time() - t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "eval_metric",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0 if num_tokens == 0 else 100.0 * num_correct / num_tokens",
                            "IfExp"
                        ]
                    ]
                }
            },
            "info_173": {
                "msg": {
                    "value": "Building training network with parameters: feature_sizes: %s domain_sizes: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "feature_sizes",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "domain_sizes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_222": {
                "msg": {
                    "value": "Initializing...",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_240": {
                "msg": {
                    "value": "Training...",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_257": {
                "level": {
                    "value": "logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_296": {
                "msg": {
                    "value": "Training...",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_96": {
                "name": {
                    "value": "FLAGS.task_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FastGFile_103": {
                "name": {
                    "value": "OutputPath('context')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_112": {
                "name": {
                    "value": "status",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(os.getenv('GOOGLE_STATUS_DIR') or '/tmp', 'STATUS')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_114": {
                "name": {
                    "value": "OutputPath('status')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_153": {
                "msg": {
                    "value": "Writing out trained parameters.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_230": {
                "msg": {
                    "value": "Loading pretrained params from %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.pretrained_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_258": {
                "dirname": {
                    "value": "OutputPath('')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MakeDirs_259": {
                "dirname": {
                    "value": "OutputPath('')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_266": {
                "msg": {
                    "value": "Computing lexicon...",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_270": {
                "target": {
                    "value": "FLAGS.tf_master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_277": {
                "msg": {
                    "value": "Preprocessing...",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_297": {
                "target": {
                    "value": "FLAGS.tf_master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FastGFile_219": {
                "name": {
                    "value": "OutputPath('graph')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_248": {
                "msg": {
                    "value": "Epochs: %d, num steps: %d, seconds elapsed: %.2f, avg cost: %.2f, ",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf_eval_epochs",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf_epochs",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "num_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "num_steps + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_267": {
                "target": {
                    "value": "FLAGS.tf_master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_278": {
                "target": {
                    "value": "FLAGS.tf_master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_236": {
                "msg": {
                    "value": "Loading %s with op %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "node.input[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "node.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/reader_ops_test.py": {
        "tensorflow": {
            "get_temp_dir_37": {
                "variable": {
                    "value": "FLAGS.test_tmpdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_180": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "records_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.test_tmpdir, 'sstable-00000-of-00001')",
                            "Call"
                        ]
                    ]
                }
            },
            "main_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_125": {
                "msg": {
                    "value": "Number of steps in the two runs: %d, %d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_steps_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "num_steps_a + 1",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "num_steps_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "num_steps_b + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_161": {
                "variable": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_153": {
                "variable": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "max(num_actions, max(tf_gold_actions) + 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(num_actions, tf.reduce_max(gold_actions, [0], False) + 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_max(gold_actions, [0], False) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_168": {
                "msg": {
                    "value": "Result: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.run(tf.while_loop(Condition, Body, loop_vars, shape_invariants=[tf.TensorShape(None)] * 2, parallel_iterations=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_145": {
                "x": {
                    "value": "epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ParserEndpoints()[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_165": {
                "cond": {
                    "value": "Condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "Body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[epoch, num_actions]",
                            "List"
                        ]
                    ]
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape(None)] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_154": {
                "input_tensor": {
                    "value": "gold_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorShape_166": {
                "dims": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/structured_graph_builder.py": {
        "tensorflow": {
            "reshape_39": {
                "variable": {
                    "value": "beam_gold_slot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(n['gold_slot'], [beam_id], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_115": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_116": {
                "variable": {
                    "value": "scores_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_119": {
                "variable": {
                    "value": "alive",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_120": {
                "variable": {
                    "value": "alive_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_121": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "KeepGoing",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "Advance",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[state, step, scores_array, alive, alive_steps] + list(features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape(None)] * (len(features) + 5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_36": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.where(tf.equal(n['beam_ids'], beam_id)), [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(n['all_path_scores'], idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_49": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.where(tf.equal(n['beam_ids'], beam_id)), [-1]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_57": {
                "x": {
                    "value": "tf.add_n(cross_entropies)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_148": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "flat_concat_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "n['concat_scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "n[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(indices_and_paths, [0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "n[path_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(indices_and_paths, [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_segment_sum_162": {
                "variable": {
                    "value": "n[all_path_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "flat_concat_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(n['concat_scores'], [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "n['indices']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "n['path_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "n[beam_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(beams_and_slots, [0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_180": {
                "variable": {
                    "value": "n[cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "n['cross_entropy']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "l2_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001 * tf.add_n(regularized_params) if regularized_params else 0",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "cost",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_182": {
                "variable": {
                    "value": "n[gradients]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ys": {
                    "value": "n['cost']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params.values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "n['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_209": {
                "variable": {
                    "value": "check_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.mod(self.GetStep(), self._check_every), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "NumericalChecks",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_211": {
                "variable": {
                    "value": "avg_update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*self._averaging.values()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "identity_219": {
                "variable": {
                    "value": "n[alive_steps]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "n['alive_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "alive_steps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_39": {
                "input_": {
                    "value": "n['gold_slot']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[beam_id]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_50": {
                "labels": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather(n['all_path_scores'], idx), [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.expand_dims(tf.sparse_to_dense(beam_gold_slot, num, [1.0], 0.0), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_55": {
                "pred": {
                    "value": "beam_gold_slot[0] >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_ComputeCrossEntropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_Pass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_57": {
                "inputs": {
                    "value": "cross_entropies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "logical_and_113": {
                "x": {
                    "value": "args[1] < max_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_any(args[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_141": {
                "name": {
                    "value": "training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_185": {
                "variable": {
                    "value": "update_accumulators",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.assign_add(n['accumulated_alive_steps'], n['alive_steps'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_218": {
                "variable": {
                    "value": "n[train_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "train_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_227": {
                "name": {
                    "value": "evaluation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "tf.where(tf.equal(n['beam_ids'], beam_id))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_48": {
                "params": {
                    "value": "n['all_path_scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.where(tf.equal(n['beam_ids'], beam_id)), [-1]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "tf.sparse_to_dense(beam_gold_slot, num, [1.0], 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_any_113": {
                "input_tensor": {
                    "value": "args[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_160": {
                "params": {
                    "value": "indices_and_paths",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_161": {
                "params": {
                    "value": "indices_and_paths",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_164": {
                "params": {
                    "value": "beams_and_slots",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_173": {
                "msg": {
                    "value": "trainable_param: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trainable_params",
                            "Name"
                        ]
                    ]
                }
            },
            "l2_loss_176": {
                "t": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trainable_params",
                            "Name"
                        ]
                    ]
                }
            },
            "control_dependencies_184": {
                "control_inputs": {
                    "value": "[n['alive_steps']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_189": {
                "ref": {
                    "value": "n['accumulated_alive_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros([batch_size], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_205": {
                "*inputs": {
                    "value": "*[tf.check_numerics(param, message='Parameter is not finite.') for param in trainable_params.values() if param.dtype.base_dtype in [tf.float32, tf.float64]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "equal_209": {
                "x": {
                    "value": "tf.mod(self.GetStep(), self._check_every)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_217": {
                "control_inputs": {
                    "value": "[update_accumulators]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_47": {
                "condition": {
                    "value": "tf.equal(n['beam_ids'], beam_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_to_dense_52": {
                "sparse_indices": {
                    "value": "beam_gold_slot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(n['gold_slot'], [beam_id], [1]), [1])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(idx)",
                            "Call"
                        ]
                    ]
                },
                "sparse_values": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_178": {
                "inputs": {
                    "value": "regularized_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.l2_loss(p) for (k, p) in trainable_params.iteritems() if k.startswith('weights') or k.startswith('bias')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "assign_add_186": {
                "ref": {
                    "value": "n['accumulated_alive_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "n['alive_steps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mod_209": {
                "x1": {
                    "value": "self.GetStep()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "self._check_every",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_47": {
                "x": {
                    "value": "n['beam_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "beam_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_108": {
                "x": {
                    "value": "alive",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(True, tf.bool, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_125": {
                "dims": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "check_numerics_206": {
                "tensor": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trainable_params.values()",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "Parameter is not finite.",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/syntaxnet/syntaxnet/text_formats_test.py": {
        "tensorflow": {
            "main_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_43": {
                "variable": {
                    "value": "FLAGS.test_tmpdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_65": {
                "msg": {
                    "value": "Writing context to: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.context_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_80": {
                "msg": {
                    "value": "Writing text file to: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.corpus_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_92": {
                "msg": {
                    "value": "Writing text file to: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.corpus_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/textsum/batch_reader.py": {
        "tensorflow": {
            "warning_156": {
                "msg": {
                    "value": "Drop an example - too short.\\nenc:%d\\ndec:%d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(enc_inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "len(dec_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "warning_164": {
                "msg": {
                    "value": "Drop an example - too long.\\nenc:%d\\ndec:%d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(enc_inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "len(dec_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "error_222": {
                "msg": {
                    "value": "Found input thread dead.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "error_234": {
                "msg": {
                    "value": "Found bucketing thread dead.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "error_249": {
                "msg": {
                    "value": "Failed to get article or abstract from example",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/textsum/beam_search.py": {
        "tensorflow": {
            "DEFINE_bool_27": {
                "name": {
                    "value": "normalize_by_length",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether normalize",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/textsum/data.py": {
        "tensorflow": {}
    },
    "tf_model_zoo/models/textsum/data_convert_example.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "command",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "binary_to_text",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Either binary_to_text or text_to_binary.Specify FLAGS.in_file accordingly.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "in_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "path to file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "out_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "path to file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Example_45": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/textsum/seq2seq_attention.py": {
        "tensorflow": {
            "DEFINE_string_34": {
                "name": {
                    "value": "data_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to tf.Example.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_36": {
                "name": {
                    "value": "vocab_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to text vocabulary file.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "article_key",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "article",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "tf.Example feature key for article.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "abstract_key",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "headline",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "tf.Example feature key for abstract.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "log_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for model root.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_43": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for train.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "eval_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for eval.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "decode_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory for decode summaries.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "mode",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "train/eval/decode mode",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "max_run_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10000000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of run steps.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "max_article_sentences",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of first sentences to use from the article",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_52": {
                "name": {
                    "value": "max_abstract_sentences",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of first sentences to use from the abstract",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "beam_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "beam size for beam search decoding.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "eval_interval_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How often to run eval.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "checkpoint_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How often to checkpoint.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_59": {
                "name": {
                    "value": "use_bucketing",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether bucket articles of similar length.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_61": {
                "name": {
                    "value": "truncate_input",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Truncate inputs that are too long. If False, examples that are too long are discarded.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "num_gpus",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of gpus used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "random_seed",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "111",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "A seed value for randomness.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Summary_75": {
                "variable": {
                    "value": "loss_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_121": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_122": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_123": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_86": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_89": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Supervisor_90": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_root",
                    "type": "Attribute",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "saver": {
                    "value": "saver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Saver()",
                            "Call"
                        ],
                        [
                            "tf.train.Saver()",
                            "Call"
                        ]
                    ]
                },
                "summary_op": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "FLAGS.checkpoint_secs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "model.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_191": {
                "seed": {
                    "value": "FLAGS.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_129": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.log_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_138": {
                "msg": {
                    "value": "Loading checkpoint %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_state.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_146": {
                "msg": {
                    "value": "article:  %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "' '.join(data.Ids2Words(article_batch[0][:].tolist(), vocab))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_149": {
                "msg": {
                    "value": "abstract: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "' '.join(data.Ids2Words(abstract_batch[0][:].tolist(), vocab))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_123": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_135": {
                "msg": {
                    "value": "No model to eval yet at %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_97": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "error_131": {
                "msg": {
                    "value": "Cannot restore checkpoint: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/textsum/seq2seq_attention_decode.py": {
        "tensorflow": {
            "DEFINE_integer_26": {
                "name": {
                    "value": "max_decode_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of decoding steps.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "decode_batches_per_ckpt",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to decode before restoring next checkpoint",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_97": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_114": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.log_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_119": {
                "msg": {
                    "value": "checkpoint path %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_state.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_122": {
                "msg": {
                    "value": "renamed checkpoint path %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, os.path.basename(ckpt_state.model_checkpoint_path))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_158": {
                "msg": {
                    "value": "article:  %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "article",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_159": {
                "msg": {
                    "value": "abstract: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "abstract",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_160": {
                "msg": {
                    "value": "decoded:  %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "decoded_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "' '.join(data.Ids2Words(output_ids, self._vocab))",
                            "Call"
                        ],
                        [
                            "decoded_output[:end_p]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_116": {
                "msg": {
                    "value": "No model to decode yet at %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.log_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_97": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/textsum/seq2seq_attention_model.py": {
        "tensorflow": {
            "argmax_51": {
                "variable": {
                    "value": "prev_symbol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(prev, output_projection[0], output_projection[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_54": {
                "variable": {
                    "value": "emb_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0001))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "prev_symbol",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(prev, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "self._articles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.enc_timesteps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "articles",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "self._abstracts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.dec_timesteps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "abstracts",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "self._targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.dec_timesteps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self._article_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "article_lens",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self._abstract_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "abstract_lens",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self._loss_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.dec_timesteps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_245": {
                "variable": {
                    "value": "self._lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "hps.min_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.train.exponential_decay(hps.lr, self.global_step, 30000, 0.98)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_249": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_254": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_296": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_49": {
                "variable": {
                    "value": "prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(prev, output_projection[0], output_projection[1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "output_projection[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "biases": {
                    "value": "output_projection[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_56": {
                "variable": {
                    "value": "emb_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, prev_symbol)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(emb_prev)",
                            "Call"
                        ]
                    ]
                }
            },
            "unpack_142": {
                "variable": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unpack_143": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unpack_144": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unpack_145": {
                "variable": {
                    "value": "loss_weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_251": {
                "variable": {
                    "value": "(grads, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self._loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "hps.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "seq2seq",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize, hps.emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.0001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.num_hidden, vsize]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.0001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_178": {
                "variable": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [hps.num_hidden, vsize], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0001))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_179": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.0001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_191": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-0.1, 0.1, seed=113)",
                    "type": "Call",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "self._enc_top_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "encoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb_encoder_inputs",
                            "Name"
                        ],
                        [
                            "[tf.reshape(x, [hps.batch_size, 1, 2 * hps.num_hidden]) for x in encoder_outputs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "exponential_decay_247": {
                "learning_rate": {
                    "value": "hps.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "30000",
                    "type": "Constant",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.98",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_250": {
                "device_name": {
                    "value": "self._get_gpu(self._num_gpus - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "a": {
                    "value": "self._articles",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "a": {
                    "value": "self._abstracts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "a": {
                    "value": "self._targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "a": {
                    "value": "self._loss_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_149": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_161": {
                "variable": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-0.1, 0.1, seed=123)",
                    "type": "Call",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_165": {
                "variable": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-0.1, 0.1, seed=113)",
                    "type": "Call",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "output_projection",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_183": {
                "device_name": {
                    "value": "self._next_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_208": {
                "device_name": {
                    "value": "self._next_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_220": {
                "variable": {
                    "value": "self._outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tf.reshape(x, [hps.batch_size, 1]) for x in best_outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "top_k_223": {
                "variable": {
                    "value": "(self._topk_log_probs, self._topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.log(tf.nn.softmax(model_outputs[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "hps.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_226": {
                "device_name": {
                    "value": "self._next_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_252": {
                "ys": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_153": {
                "params": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0001))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_155": {
                "params": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0001))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "'encoder%d' % layer_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_159": {
                "device_name": {
                    "value": "self._next_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, 1, 2 * hps.num_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "decode_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_217": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_219": {
                "msg": {
                    "value": "best_outputs%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "best_outputs[0].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_239": {
                "x": {
                    "value": "12.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_152": {
                "stddev": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_177": {
                "stddev": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_181": {
                "stddev": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_193": {
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "113",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "xw_plus_b_214": {
                "x": {
                    "value": "decoder_outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weights": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [hps.num_hidden, vsize], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0001))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('v', [vsize], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0001))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_218": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_224": {
                "x": {
                    "value": "tf.nn.softmax(model_outputs[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_228": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_230": {
                "weights": {
                    "value": "w_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(w)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('v', [vsize], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0001))",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "hps.num_softmax_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "vsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._vocab.NumIds()",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_163": {
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_167": {
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "113",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "logits": {
                    "value": "model_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/textsum/seq2seq_lib.py": {
        "tensorflow": {
            "add_n_51": {
                "variable": {
                    "value": "log_perps",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "log_perp_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_loss_by_example(inputs, targets, weights, loss_function, average_across_timesteps=average_across_timesteps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_133": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_53": {
                "variable": {
                    "value": "total_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat(1, args)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "targets[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_86": {
                "x": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(targets[0])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_130": {
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "args",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_initializer_135": {
                "value": {
                    "value": "bias_start",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/transformer/cluttered_mnist.py": {
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1600]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "x_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1600])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 40, 40, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "b_fc_loc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([[1.0, 0, 0], [0, 1.0, 0]])",
                            "Call"
                        ],
                        [
                            "initial.astype('float32')",
                            "Call"
                        ],
                        [
                            "initial.flatten()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "b_fc_loc2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_63": {
                "variable": {
                    "value": "h_fc_loc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, W_fc_loc1) + b_fc_loc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "h_fc_loc1_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_loc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(x, W_fc_loc1) + b_fc_loc1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "h_fc_loc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_fc_loc1_drop, W_fc_loc2) + b_fc_loc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "h_conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(input=h_trans, filter=W_conv1, strides=[1, 2, 2, 1], padding='SAME') + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "h_conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(input=h_conv1, filter=W_conv2, strides=[1, 2, 2, 1], padding='SAME') + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "h_conv2_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(input=h_conv1, filter=W_conv2, strides=[1, 2, 2, 1], padding='SAME') + b_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 10 * 10 * n_filters_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "h_fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_conv2_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_117": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_conv2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_125": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(y_logits, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_127": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_132": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_137": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_122": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_fc1, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight_variable([n_fc, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_126": {
                "labels": {
                    "value": "y_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_132": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_133": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_logits, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "initialize_all_variables_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_63": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1600])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc_loc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight_variable([1600, 20])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_68": {
                "a": {
                    "value": "h_fc_loc1_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_fc_loc1, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc_loc2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight_variable([20, 6])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_90": {
                "input": {
                    "value": "h_trans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer(x_tensor, h_fc_loc2, out_size)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "W_conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight_variable([filter_size, filter_size, 1, n_filters_1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "input": {
                    "value": "h_conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(input=h_trans, filter=W_conv1, strides=[1, 2, 2, 1], padding='SAME') + b_conv1)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "W_conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight_variable([filter_size, filter_size, n_filters_1, n_filters_2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "a": {
                    "value": "h_conv2_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv2, [-1, 10 * 10 * n_filters_2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight_variable([10 * 10 * n_filters_2, n_fc])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/transformer/example.py": {
        "tensorflow": {
            "placeholder_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1200, 1600, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.append(im, im, axis=0)",
                            "Call"
                        ],
                        [
                            "np.append(batch, im, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_57": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "W_fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1200 * 1600 * 3, n_fc])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fc1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "b_fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([[0.5, 0, 0], [0, 0.5, 0]])",
                            "Call"
                        ],
                        [
                            "initial.astype('float32')",
                            "Call"
                        ],
                        [
                            "initial.flatten()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "b_fc1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "spatial_transformer_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "initialize_all_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_45": {
                "shape": {
                    "value": "[1200 * 1600 * 3, n_fc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "a": {
                    "value": "tf.zeros([num_batch, 1200 * 1600 * 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([1200 * 1600 * 3, n_fc]), name='W_fc1')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "shape": {
                    "value": "[num_batch, 1200 * 1600 * 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/transformer/spatial_transformer.py": {
        "tensorflow": {
            "gather_202": {
                "variable": {
                    "value": "input_repeated",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(indices, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.pack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.pack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.pack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "height_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_72": {
                "variable": {
                    "value": "width_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_89": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_90": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_91": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_92": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.pack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_106": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.pack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_107": {
                "variable": {
                    "value": "Ia",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.pack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_108": {
                "variable": {
                    "value": "Ib",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.pack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_109": {
                "variable": {
                    "value": "Ic",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.pack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_110": {
                "variable": {
                    "value": "Id",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.pack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_113": {
                "variable": {
                    "value": "x0_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_114": {
                "variable": {
                    "value": "x1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "y0_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_116": {
                "variable": {
                    "value": "y1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_117": {
                "variable": {
                    "value": "wa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "variable": {
                    "value": "wc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_120": {
                "variable": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_121": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.pack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.pack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.pack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.pack([1, width])))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_139": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_140": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[x_t_flat, y_t_flat, ones]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(theta, (-1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.cast(theta, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_150": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(theta, (-1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.cast(theta, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_153": {
                "variable": {
                    "value": "height_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_154": {
                "variable": {
                    "value": "width_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, [x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.pack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.pack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, [x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.pack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.pack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_160": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, [x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.pack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.pack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.pack([num_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(0, [x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.pack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.pack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack([num_batch, 3, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_165": {
                "variable": {
                    "value": "x_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.batch_matmul(theta, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_166": {
                "variable": {
                    "value": "y_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.batch_matmul(theta, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "x_s_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "y_s_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_transformed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_interpolate(input_dim, x_s_flat, y_s_flat, out_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack([num_batch, out_height, out_width, num_channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SpatialTransformer'",
                            "MethodArgument"
                        ],
                        [
                            "'BatchSpatialTransformer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SpatialTransformer'",
                            "MethodArgument"
                        ],
                        [
                            "'BatchSpatialTransformer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "_interpolate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "_meshgrid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "_transform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_202": {
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[i] * num_transforms for i in xrange(num_batch)]",
                            "ListComp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_56": {
                "input": {
                    "value": "tf.ones(shape=tf.pack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_84": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_86": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_131": {
                "shape": {
                    "value": "tf.pack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_132": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_134": {
                "shape": {
                    "value": "tf.pack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_147": {
                "input": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_148": {
                "input": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_56": {
                "shape": {
                    "value": "tf.pack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_133": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_76": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_132": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/transformer/tf_utils.py": {
        "tensorflow": {
            "zeros_106": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, x.get_shape()[-1], n_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_60": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, x.get_shape()[-1], n_filters], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], n_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "initial_value": {
                    "value": "initial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros(shape)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape, mean=0.0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_119": {
                "initial_value": {
                    "value": "initial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.zeros(shape)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape, mean=0.0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'Conv2D'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_93": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], n_units], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_59": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_65": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/models/video_prediction/lstm_ops.py": {
        "tensorflow": {
            "split_92": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "init_state(inputs, list(spatial_size) + [2 * num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_93": {
                "variable": {
                    "value": "inputs_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_95": {
                "variable": {
                    "value": "i_j_f_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(3, [inputs, h])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4 * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[filter_size, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "Gates",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_102": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "i_j_f_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(inputs_h, 4 * num_channels, [filter_size, filter_size], stride=1, activation_fn=None, scope='Gates')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BasicConvLstmCell",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_41": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "x": {
                    "value": "new_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "c * tf.sigmoid(f + forget_bias) + tf.sigmoid(i) * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_105": {
                "x": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_107": {
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_104": {
                "x": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/video_prediction/prediction_input.py": {
        "tensorflow": {
            "Glob_54": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(FLAGS.data_dir, '*')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "string_input_producer_62": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "gfile.Glob(os.path.join(FLAGS.data_dir, '*'))",
                            "Call"
                        ],
                        [
                            "filenames[:index]",
                            "Subscript"
                        ],
                        [
                            "filenames[index:]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordReader_63": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_100": {
                "variable": {
                    "value": "image_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "image_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(0, image_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_78": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{image_name: tf.FixedLenFeature([1], tf.string), action_name: tf.FixedLenFeature([STATE_DIM], tf.float32), state_name: tf.FixedLenFeature([STATE_DIM], tf.float32)}",
                            "Dict"
                        ],
                        [
                            "{image_name: tf.FixedLenFeature([1], tf.string)}",
                            "Dict"
                        ],
                        [
                            "tf.parse_single_example(serialized_example, features=features)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "image_buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features[image_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_81": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(features[image_name], shape=[])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "COLOR_CHAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=COLOR_CHAN)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [1, crop_size, crop_size, COLOR_CHAN])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(image, [IMG_HEIGHT, IMG_WIDTH])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, crop_size, crop_size, COLOR_CHAN]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bicubic_90": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=COLOR_CHAN)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [1, crop_size, crop_size, COLOR_CHAN])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(image, [IMG_HEIGHT, IMG_WIDTH])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "state_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "state_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(0, state_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_104": {
                "variable": {
                    "value": "action_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "action_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(0, action_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_105": {
                "variable": {
                    "value": "[image_batch, action_batch, state_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_seq, action_seq, state_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "100 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_112": {
                "variable": {
                    "value": "image_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "100 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "zeros_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.sequence_length, STATE_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features[state_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, STATE_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features[action_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, STATE_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=COLOR_CHAN)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [1, crop_size, crop_size, COLOR_CHAN])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(image, [IMG_HEIGHT, IMG_WIDTH])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_73": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "[STATE_DIM]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[STATE_DIM]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_77": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/video_prediction/prediction_model.py": {
        "tensorflow": {
            "convert_to_tensor_240": {
                "variable": {
                    "value": "identity_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array([1.0, 0.0, 0.0, 0.0, 1.0, 0.0], np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "cdna_kerns",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cdna_kerns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.layers.fully_connected(cdna_input, DNA_KERN_SIZE * DNA_KERN_SIZE * num_masks, scope='cdna_params', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cdna_kerns, [batch_size, DNA_KERN_SIZE, DNA_KERN_SIZE, 1, num_masks])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cdna_kerns - RELU_SHIFT) + RELU_SHIFT",
                            "BinOp"
                        ],
                        [
                            "cdna_kerns / norm_factor",
                            "BinOp"
                        ],
                        [
                            "tf.tile(cdna_kerns, [1, 1, 1, color_channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.split(0, batch_size, cdna_kerns)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, DNA_KERN_SIZE, DNA_KERN_SIZE, 1, num_masks]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "variable": {
                    "value": "norm_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cdna_kerns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.layers.fully_connected(cdna_input, DNA_KERN_SIZE * DNA_KERN_SIZE * num_masks, scope='cdna_params', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cdna_kerns, [batch_size, DNA_KERN_SIZE, DNA_KERN_SIZE, 1, num_masks])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cdna_kerns - RELU_SHIFT) + RELU_SHIFT",
                            "BinOp"
                        ],
                        [
                            "cdna_kerns / norm_factor",
                            "BinOp"
                        ],
                        [
                            "tf.tile(cdna_kerns, [1, 1, 1, color_channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.split(0, batch_size, cdna_kerns)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_279": {
                "variable": {
                    "value": "cdna_kerns",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cdna_kerns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.layers.fully_connected(cdna_input, DNA_KERN_SIZE * DNA_KERN_SIZE * num_masks, scope='cdna_params', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cdna_kerns, [batch_size, DNA_KERN_SIZE, DNA_KERN_SIZE, 1, num_masks])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cdna_kerns - RELU_SHIFT) + RELU_SHIFT",
                            "BinOp"
                        ],
                        [
                            "cdna_kerns / norm_factor",
                            "BinOp"
                        ],
                        [
                            "tf.tile(cdna_kerns, [1, 1, 1, color_channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.split(0, batch_size, cdna_kerns)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, color_channels, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_280": {
                "variable": {
                    "value": "cdna_kerns",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(cdna_input.get_shape()[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "cdna_kerns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.layers.fully_connected(cdna_input, DNA_KERN_SIZE * DNA_KERN_SIZE * num_masks, scope='cdna_params', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cdna_kerns, [batch_size, DNA_KERN_SIZE, DNA_KERN_SIZE, 1, num_masks])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(cdna_kerns - RELU_SHIFT) + RELU_SHIFT",
                            "BinOp"
                        ],
                        [
                            "cdna_kerns / norm_factor",
                            "BinOp"
                        ],
                        [
                            "tf.tile(cdna_kerns, [1, 1, 1, color_channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.split(0, batch_size, cdna_kerns)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_281": {
                "variable": {
                    "value": "prev_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(cdna_input.get_shape()[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "prev_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen_images[-1]",
                            "Subscript"
                        ],
                        [
                            "scheduled_sample(image, gen_images[-1], batch_size, num_ground_truth)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "concat_291": {
                "variable": {
                    "value": "transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "transformed",
                    "type": "List",
                    "possible_values": [
                        [
                            "[tf.nn.sigmoid(enc7)]",
                            "List"
                        ],
                        [
                            "transformed + cdna_transformation(prev_image, cdna_input, num_masks, int(color_channels))",
                            "BinOp"
                        ],
                        [
                            "[dna_transformation(prev_image, enc7)]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(0, transformed)",
                            "Call"
                        ],
                        [
                            "tf.split(3, num_masks, transformed)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_292": {
                "variable": {
                    "value": "transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "transformed",
                    "type": "List",
                    "possible_values": [
                        [
                            "[tf.nn.sigmoid(enc7)]",
                            "List"
                        ],
                        [
                            "transformed + cdna_transformation(prev_image, cdna_input, num_masks, int(color_channels))",
                            "BinOp"
                        ],
                        [
                            "[dna_transformation(prev_image, enc7)]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(0, transformed)",
                            "Call"
                        ],
                        [
                            "tf.split(3, num_masks, transformed)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_306": {
                "variable": {
                    "value": "prev_image_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen_images[-1]",
                            "Subscript"
                        ],
                        [
                            "scheduled_sample(image, gen_images[-1], batch_size, num_ground_truth)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [2, 2], [2, 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_317": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(3, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_321": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel / tf.reduce_sum(kernel, [3], keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_340": {
                "variable": {
                    "value": "ground_truth_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(int(batch_size)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(num_ground_truth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_341": {
                "variable": {
                    "value": "generated_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(int(batch_size)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(num_ground_truth, int(batch_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_343": {
                "variable": {
                    "value": "ground_truth_examps",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ground_truth_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ground_truth_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(idx, tf.range(num_ground_truth))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_344": {
                "variable": {
                    "value": "generated_examps",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generated_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "generated_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(idx, tf.range(num_ground_truth, int(batch_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_81": {
                "variable": {
                    "value": "num_ground_truth",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(tf.to_float(batch_size) * (k / (k + tf.exp(iter_num / k))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_286": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(kernel)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dna_input - RELU_SHIFT) + RELU_SHIFT",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(kernel / tf.reduce_sum(kernel, [3], keep_dims=True), [4])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_324": {
                "input_tensor": {
                    "value": "kernel * inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_stitch_345": {
                "indices": {
                    "value": "[ground_truth_idx, generated_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "data": {
                    "value": "[ground_truth_examps, generated_examps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "state_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[action, current_state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "enc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen_images[-1]",
                            "Subscript"
                        ],
                        [
                            "scheduled_sample(image, gen_images[-1], batch_size, num_ground_truth)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "scale1_conv1",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "enc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "enc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "smear",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state_action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(1, [action, current_state])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(batch_size), 1, 1, int(state_action.get_shape()[1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_144": {
                "variable": {
                    "value": "smear",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "smear",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(state_action, [int(batch_size), 1, 1, int(state_action.get_shape()[1])])",
                            "Call"
                        ],
                        [
                            "tf.tile(smear, [1, int(enc2.get_shape()[1]), int(enc2.get_shape()[2]), 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, int(enc2.get_shape()[1]), int(enc2.get_shape()[2]), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_148": {
                "variable": {
                    "value": "enc3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden4, hidden4.get_shape()[3], [3, 3], stride=2, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [enc2, smear])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_154": {
                "variable": {
                    "value": "enc4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden5.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "convt1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_161": {
                "variable": {
                    "value": "hidden6",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[hidden6, enc1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_163": {
                "variable": {
                    "value": "enc5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden6, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [hidden6, enc1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden6.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "convt2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "hidden7",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[hidden7, enc0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_172": {
                "variable": {
                    "value": "enc6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden7",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden7, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [hidden7, enc0])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden7.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "convt3",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_205": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden7, hidden7.get_shape()[3], 3, stride=2, scope='convt3', normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm9'})",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_masks + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "convt7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax(tf.reshape(masks, [-1, num_masks + 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(batch_size), int(img_height), int(img_width), num_masks + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_210": {
                "variable": {
                    "value": "mask_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_masks + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(enc6, num_masks + 1, 1, stride=1, scope='convt7')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.softmax(tf.reshape(masks, [-1, num_masks + 1])), [int(batch_size), int(img_height), int(img_width), num_masks + 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_275": {
                "features": {
                    "value": "cdna_kerns - RELU_SHIFT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_288": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(kernel)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dna_input - RELU_SHIFT) + RELU_SHIFT",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(kernel / tf.reduce_sum(kernel, [3], keep_dims=True), [4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_320": {
                "features": {
                    "value": "dna_input - RELU_SHIFT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_82": {
                "x": {
                    "value": "tf.to_float(batch_size) * (k / (k + tf.exp(iter_num / k)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "enc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[enc2, smear]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_180": {
                "variable": {
                    "value": "enc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden7, hidden7.get_shape()[3], 3, stride=2, scope='convt3', normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm9'})",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "DNA_KERN_SIZE ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "convt4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_184": {
                "variable": {
                    "value": "enc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden7, hidden7.get_shape()[3], 3, stride=2, scope='convt3', normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm9'})",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "color_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "convt4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "stp_input0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm6')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(batch_size), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_290": {
                "input": {
                    "value": "preimg",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(kernel)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dna_input - RELU_SHIFT) + RELU_SHIFT",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(kernel / tf.reduce_sum(kernel, [3], keep_dims=True), [4])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_322": {
                "input_tensor": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(kernel)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(kernel, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dna_input - RELU_SHIFT) + RELU_SHIFT",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(kernel / tf.reduce_sum(kernel, [3], keep_dims=True), [4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "cdna_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm6')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(batch_size), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "logits": {
                    "value": "tf.reshape(masks, [-1, num_masks + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_314": {
                "input": {
                    "value": "tf.slice(prev_image_pad, [0, xkern, ykern, 0], [-1, image_height, image_width, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_82": {
                "x": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(cdna_input.get_shape()[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_188": {
                "x": {
                    "value": "enc7",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(enc6, DNA_KERN_SIZE ** 2, 1, stride=1, scope='convt4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d_transpose(enc6, color_channels, 1, stride=1, scope='convt4')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_208": {
                "tensor": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(enc6, num_masks + 1, 1, stride=1, scope='convt7')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.softmax(tf.reshape(masks, [-1, num_masks + 1])), [int(batch_size), int(img_height), int(img_width), num_masks + 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_masks + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_315": {
                "input_": {
                    "value": "prev_image_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(prev_image, [[0, 0], [2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, xkern, ykern, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, image_height, image_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_82": {
                "x": {
                    "value": "iter_num / k",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/models/video_prediction/prediction_train.py": {
        "tensorflow": {}
    },
    "context_gating.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "glu_37": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {}
    },
    "fusion_classification_network.py": {
        "torch": {
            "Linear_67": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_24": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc_verb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc_noun",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "base_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "base_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Conv2d_212": {
                "variable": {
                    "value": "new_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * self.new_length['Flow']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_layer.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_layer.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv_layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv_layer.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True if len(params) == 2 else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_238": {
                "variable": {
                    "value": "new_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.new_length['Spec']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_layer.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_layer.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv_layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv_layer.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True if len(params) == 2 else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "AvgPool2d_251": {
                "variable": {
                    "value": "new_avg_pooling",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "pool_layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "pool_layer.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_278": {
                "variable": {
                    "value": "new_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "new_kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_layer.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_layer.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv_layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv_layer.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True if len(params) == 2 else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "multimodal_gating.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc_h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc_h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc_h3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_23": {
                "variable": {
                    "value": "self.tanh1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_24": {
                "variable": {
                    "value": "self.tanh2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_25": {
                "variable": {
                    "value": "self.tanh3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_27": {
                "variable": {
                    "value": "self.sigm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_28": {
                "variable": {
                    "value": "self.sigm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_29": {
                "variable": {
                    "value": "self.sigm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc_z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * input_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * input_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc_z3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * input_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc_z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * input_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * input_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc_z3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * input_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "term1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[0], inputs[1] + inputs[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "term2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[1], inputs[0] + inputs[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "term3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[2], inputs[0] + inputs[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_55": {
                "input": {
                    "value": "z3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sigm3(self.fc_z3(concatenated))",
                            "Call"
                        ],
                        [
                            "self.sigm3(self.fc_z3(term3))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tanh3(self.fc_h3(inputs[2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_53": {
                "input": {
                    "value": "z1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sigm1(self.fc_z1(concatenated))",
                            "Call"
                        ],
                        [
                            "self.sigm1(self.fc_z1(term1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tanh1(self.fc_h1(inputs[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_54": {
                "input": {
                    "value": "z2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sigm2(self.fc_z2(concatenated))",
                            "Call"
                        ],
                        [
                            "self.sigm2(self.fc_z2(term2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tanh2(self.fc_h2(inputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_59": {
                "input": {
                    "value": "z3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sigm3(self.fc_z3(concatenated))",
                            "Call"
                        ],
                        [
                            "self.sigm3(self.fc_z3(term3))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tanh3(self.fc_h3(inputs[2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_58": {
                "input": {
                    "value": "z2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sigm2(self.fc_z2(concatenated))",
                            "Call"
                        ],
                        [
                            "self.sigm2(self.fc_z2(term2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tanh2(self.fc_h2(inputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_57": {
                "input": {
                    "value": "1 - z1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "h2 + h3",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ops/basic_ops.py": {
        "torch": {}
    },
    "tf_model_zoo/bninception/layer_factory.py": {
        "torch": {
            "Conv2d_37": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attr['num_output']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attr['kernel_size'] if 'kernel_size' in attr else (attr['kernel_h'], attr['kernel_w'])",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attr['stride'] if 'stride' in attr else (attr['stride_h'], attr['stride_w'])",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attr['pad'] if 'pad' in attr else (attr['pad_h'], attr['pad_w'])",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_46": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "attr['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "attr['stride']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attr['pad'] if 'pad' in attr else 0",
                            "IfExp"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "attr['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "attr['stride']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attr['pad'] if 'pad' in attr else 0",
                            "IfExp"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attr['num_output']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "p": {
                    "value": "attr['dropout_ratio']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "info['attrs'] if 'attrs' in info else list()",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/bninception/parse_caffe.py": {
        "torch": {
            "from_numpy_115": {
                "variable": {
                    "value": "blob_dict[{}.weight.format(layer_name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "blob_dict[{}.bias.format(layer_name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "self._weight_array_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "open(filename, 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "blob_dict[{}.running_mean.format(layer_name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "blob_dict[{}.running_var.format(layer_name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/bninception/pytorch_load.py": {
        "torch": {
            "squeeze_43": {
                "variable": {
                    "value": "state_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "data_dict[op[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((data_dict[x] for x in op[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tf_model_zoo/inceptionresnetv2/pytorch_load.py": {
        "torch": {
            "from_numpy_304": {
                "variable": {
                    "value": "state_dict[name_pth + .conv.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['weights'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_304": {
                "variable": {
                    "value": "state_dict[name_pth + .conv.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_306": {
                "variable": {
                    "value": "state_dict[name_pth + .bn.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[name_pth + '.conv.weight'].size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_307": {
                "variable": {
                    "value": "state_dict[name_pth + .bn.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['beta'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_308": {
                "variable": {
                    "value": "state_dict[name_pth + .bn.running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['mean'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "state_dict[name_pth + .bn.running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['var'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "state_dict[name_pth + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['weights'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_314": {
                "variable": {
                    "value": "state_dict[name_pth + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "state_dict[name_pth + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['biases'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_320": {
                "variable": {
                    "value": "state_dict[name_pth + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['weights'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_320": {
                "variable": {
                    "value": "state_dict[name_pth + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_321": {
                "variable": {
                    "value": "state_dict[name_pth + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['biases'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_411": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "299",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "299",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_427": {
                "variable": {
                    "value": "outputs_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['out'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_429": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "test(model)",
                            "Call"
                        ],
                        [
                            "model.forward(torch.autograd.Variable(inputs))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_440": {
                "variable": {
                    "value": "output_tf_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['conv_out'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_443": {
                "variable": {
                    "value": "output_tf_relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['relu_out'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_457": {
                "variable": {
                    "value": "output_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['conv_out'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[name_pth + '.conv.weight'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[name_pth + '.conv.weight'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(192, 48, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(192, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 32, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 32, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "320",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 128, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1088",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_159": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(2080, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "448",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2080",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_207": {
                "variable": {
                    "value": "self.maxpool_3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_210": {
                "variable": {
                    "value": "self.maxpool_5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.repeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block35(scale=0.17)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.repeat_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block17(scale=0.1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.repeat_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block8(scale=0.2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_261": {
                "variable": {
                    "value": "self.avgpool_1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.classif",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_526": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "InceptionResnetV2()",
                            "Call"
                        ],
                        [
                            "InceptionResnetV2()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save/inceptionresnetv2.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_527": {
                "obj": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load()",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save/inceptionresnetv2_state.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dist_434": {
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_tf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(h5f['out'][()])",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_44": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dist_448": {
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "output_tf_conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(h5f['conv_out'][()])",
                            "Call"
                        ]
                    ]
                }
            },
            "dist_451": {
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "output_tf_relu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(h5f['relu_out'][()])",
                            "Call"
                        ]
                    ]
                }
            },
            "dist_462": {
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "output_tf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(h5f['conv_out'][()])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_model_zoo/inceptionv4/pytorch_load.py": {
        "torch": {
            "from_numpy_275": {
                "variable": {
                    "value": "state_dict[name_pth + .conv.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['weights'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_275": {
                "variable": {
                    "value": "state_dict[name_pth + .conv.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_277": {
                "variable": {
                    "value": "state_dict[name_pth + .bn.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[name_pth + '.conv.weight'].size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "state_dict[name_pth + .bn.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['beta'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_279": {
                "variable": {
                    "value": "state_dict[name_pth + .bn.running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['mean'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "state_dict[name_pth + .bn.running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['var'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "state_dict[name_pth + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['weights'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_285": {
                "variable": {
                    "value": "state_dict[name_pth + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_286": {
                "variable": {
                    "value": "state_dict[name_pth + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['biases'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_380": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "299",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "299",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_381": {
                "variable": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "misc.imread('lena_299.png')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_387": {
                "variable": {
                    "value": "outputs_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['out'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_389": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "test(model)",
                            "Call"
                        ],
                        [
                            "model.forward(torch.autograd.Variable(inputs))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_396": {
                "variable": {
                    "value": "output_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h5f['relu_out'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[name_pth + '.conv.weight'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[name_pth + '.conv.weight'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(160, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(160, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_116": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_175": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1_1a, x1_1b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_3a, x2_3b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(3, 32, kernel_size=3, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.classif",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_431": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "InceptionV4()",
                            "Call"
                        ],
                        [
                            "InceptionV4()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save/inceptionv4.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_432": {
                "obj": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load()",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save/inceptionv4_state.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dist_390": {
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs_tf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(h5f['out'][()])",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_146": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_202": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_253": {
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dist_401": {
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "output_tf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(h5f['relu_out'][()])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "MultiStepLR_218": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.SGD(param_groups, args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.lr_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__350": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip_gradient",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transforms.py": {
        "torch": {
            "from_numpy_277": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_277": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}