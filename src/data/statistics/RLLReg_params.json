{
    "models/fppsr_model_fcgf.py": {
        "sklearn": {
            "KMeans_127": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_52": {
                "variable": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_91": {
                "variable": {
                    "value": "quantized_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords / self.params.voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "fcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fi for fi in f]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kmeans.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_130": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_150": {
                "input": {
                    "value": "features.feats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_276": {
                "variable": {
                    "value": "(att_sorted, ds_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_112": {
                "*size": {
                    "value": "quantized.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/fppsr_model_fpfh.py": {
        "sklearn": {
            "KMeans_67": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_96": {
                "variable": {
                    "value": "p2_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(pcd_down.points)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_96": {
                "variable": {
                    "value": "p2_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "f_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "pcd_fpfh.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "permute_98": {
                "variable": {
                    "value": "f_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "fcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fi for fi in f]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kmeans.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_69": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_159": {
                "variable": {
                    "value": "(att_sorted, ds_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "actors/reg_loss_actors.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "model.params.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "model.params.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/basedataset.py": {
        "torch": {}
    },
    "datasets/data_loaders.py": {
        "torch": {
            "eye_14": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "calib_cam0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.calib['T_cam0_velo'].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "calib_cam0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.calib['T_cam0_velo'].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose[0:3, 0:3].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose[0:3, 3:].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose[0:3, 0:3].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose[0:3, 3:].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "T[0:3, 0:3].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "T[0:3, 3:].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "velo.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "pcd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(depth_image.flatten(), axis=0) * im_coords",
                            "BinOp"
                        ],
                        [
                            "pcd[:, np.linalg.norm(pcd, axis=0) > 0]",
                            "Subscript"
                        ],
                        [
                            "pcd[:, np.linalg.norm(pcd, axis=0) < 30.0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "v[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "ndarray": {
                    "value": "v[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/data_reader.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_41": {
                "variable": {
                    "value": "t_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "inds_nn2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[n for n in range(0, point2.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "inds_nn1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inds_nn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inds_nn1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_52": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_101": {
                "tensors": {
                    "value": "[inds_nn1, inds_nn2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/eth.py": {
        "torch": {}
    },
    "datasets/minipykitti.py": {
        "torch": {
            "from_numpy_49": {
                "ndarray": {
                    "value": "T_w_cam0.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/samplers.py": {
        "torch": {
            "sqrt_89": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((pc - ps) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_182": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((pc - ps) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "(pc - ps) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "(pc - ps) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/evaluate.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "e['R_err'].flatten_out().list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "e['t_err'].flatten_out().list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "R_err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e['R_err'] for e in errors[m.params.name]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "t_err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e['t_err'] for e in errors[m.params.name]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/register_sequence.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(Vs)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/evaluation_kitti.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/evaluation_kitti_multi.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/evaluation_threedmatch.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/evaluation_threedmatch_multi.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_rll_kitti.py": {
        "torch": {
            "AdamW_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.feature_extractor.parameters(), 'lr': 0.0001}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_108": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.AdamW([{'params': model.feature_extractor.parameters(), 'lr': 0.0001}], lr=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_rll_kitti_multi.py": {
        "torch": {
            "AdamW_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.feature_extractor.parameters(), 'lr': 0.0001}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_110": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.AdamW([{'params': model.feature_extractor.parameters(), 'lr': 0.0001}], lr=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_rll_threedmatch.py": {
        "torch": {
            "AdamW_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.feature_extractor.parameters(), 'lr': 0.0001}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_112": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.AdamW([{'params': model.feature_extractor.parameters(), 'lr': 0.0001}], lr=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_rll_threedmatch_multi.py": {
        "torch": {
            "AdamW_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.feature_extractor.parameters(), 'lr': 0.0001}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_116": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.AdamW([{'params': model.feature_extractor.parameters(), 'lr': 0.0001}], lr=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "4 * step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/core/correspondence.py": {
        "torch": {}
    },
    "external/DeepGlobalRegistration/core/deep_global_registration.py": {
        "torch": {
            "load_84": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz[sel]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_155": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "npts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sel)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_176": {
                "variable": {
                    "value": "corres_idx0",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(nns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "variable": {
                    "value": "corres_idx0",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_64": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_195": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(corres_idx0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "inlier_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords0[corres_idx0], coords1[corres_idx1, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fcgf_feats0[corres_idx0], fcgf_feats1[corres_idx1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_154": {
                "input": {
                    "value": "xyz / self.voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.cos(xyz0[corres_idx0]), torch.cos(xyz1[corres_idx1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_199": {
                "input": {
                    "value": "xyz1[corres_idx1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/core/knn.py": {
        "torch": {
            "cat_44": {
                "variable": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "knn_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "knn_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_dist.detach().unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(dists)",
                            "Call"
                        ],
                        [
                            "torch.cat(dists)",
                            "Call"
                        ],
                        [
                            "np.hstack(dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "nns",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(nns)",
                            "Call"
                        ],
                        [
                            "np.hstack(nns)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_135": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_dist.detach().unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(dists)",
                            "Call"
                        ],
                        [
                            "torch.cat(dists)",
                            "Call"
                        ],
                        [
                            "np.hstack(dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_176": {
                "ndarray": {
                    "value": "nns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(nns)",
                            "Call"
                        ],
                        [
                            "np.hstack(nns)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "ndarray": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_dist.detach().unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(dists)",
                            "Call"
                        ],
                        [
                            "torch.cat(dists)",
                            "Call"
                        ],
                        [
                            "np.hstack(dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_37": {
                "start": {
                    "value": "NR",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/core/loss.py": {
        "torch": {
            "BCEWithLogitsLoss_18": {
                "variable": {
                    "value": "self.crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_29": {
                "variable": {
                    "value": "self.crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "sq_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((X - Y) / self.quantization_size) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "all_32": {
                "input": {
                    "value": "label < self.NUM_LABELS",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_36": {
                "input": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label == i",
                            "Compare"
                        ]
                    ]
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "sq_dist + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/core/metrics.py": {
        "torch": {
            "clamp_56": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt((xyz0_est - xyz0_gth).pow(2).sum(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "max_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "acos_12": {
                "input": {
                    "value": "torch.clamp((torch.trace(R) - 1) / 2, -0.9999, 0.9999)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_17": {
                "input": {
                    "value": "torch.clamp((torch.trace(torch.mm(R1.t(), R2)) - 1) / 2, -0.9999, 0.9999)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_22": {
                "input": {
                    "value": "((t1 - t2) ** 2).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_34": {
                "input": {
                    "value": "torch.clamp(side, min=-0.999, max=0.999)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_43": {
                "input": {
                    "value": "trans1 - trans2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_50": {
                "input": {
                    "value": "output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(A.unsqueeze(1) - B.unsqueeze(0)).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_12": {
                "input": {
                    "value": "(torch.trace(R) - 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.9999",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.9999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_17": {
                "input": {
                    "value": "(torch.trace(torch.mm(R1.t(), R2)) - 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.9999",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.9999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_34": {
                "input": {
                    "value": "side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(trace_r1Tr2 - 1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-0.999",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(output) > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "sqrt_56": {
                "input": {
                    "value": "(xyz0_est - xyz0_gth).pow(2).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_65": {
                "input": {
                    "value": "D2 + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "(A.unsqueeze(1) - B.unsqueeze(0)).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_12": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trace_17": {
                "input": {
                    "value": "torch.mm(R1.t(), R2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_17": {
                "input": {
                    "value": "R1.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/core/registration.py": {
        "torch": {
            "eye_82": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_99": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_107": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformation.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_164": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(transformation.parameters(), lr=0.1)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_24": {
                "variable": {
                    "value": "v_mag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(v ** 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_25": {
                "variable": {
                    "value": "v_mag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt((v ** 2).sum(1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "torch.clamp(v_mag, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_50": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(u ** 2).sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(norm2, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_119": {
                "variable": {
                    "value": "rot_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "trans_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.rot6d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "rot_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 6)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "trans_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(points).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "trans_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trans_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(trans_points).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "(i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/core/trainer.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ExponentialLR_109": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.exp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_597": {
                "variable": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ts[:, :3, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(Rs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_598": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ts[:, :3, 3]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(ts, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_599": {
                "variable": {
                    "value": "ws",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_647": {
                "variable": {
                    "value": "start_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_652": {
                "variable": {
                    "value": "cat_pred_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_pred_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_pred_pairs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_654": {
                "variable": {
                    "value": "reg_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(iC0[pred_pair_inds0], iC1[pred_pair_inds1, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_430": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_correct_correspondence(pos_pairs, pred_pairs, len_batch=len_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_430": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_494": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_549": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(config.resume)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'state_dict': self.feat_model.state_dict(), 'state_dict_inlier': self.inlier_model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler': self.scheduler.state_dict(), 'config': self.config, 'best_val': self.best_val, 'best_val_epoch': self.best_val_epoch, 'best_val_metric': self.best_val_metric}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, f'{filename}.pth')",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_618": {
                "variable": {
                    "value": "reg_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(pair_ind0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_correct_correspondence(pos_pairs, pred_pairs, len_batch=len_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_258": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_506": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_620": {
                "variable": {
                    "value": "reg_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F0[pair_ind0], F1[pair_ind1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_228": {
                "variable": {
                    "value": "weights_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.sigmoid()",
                            "Call"
                        ],
                        [
                            "weights_tmp",
                            "Name"
                        ],
                        [
                            "logits.sigmoid()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_286": {
                "variable": {
                    "value": "max_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inlier_model.final.kernel.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_286": {
                "variable": {
                    "value": "max_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_622": {
                "tensors": {
                    "value": "xyz0",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_678": {
                "tensors": {
                    "value": "nn_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_671": {
                "start": {
                    "value": "len(nns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_676": {
                "tensors": {
                    "value": "(pred_pair_ind0.cpu(), pred_pair_ind1[:, j].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_622": {
                "input": {
                    "value": "torch.cat(xyz0, 0)[pair_ind0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_623": {
                "input": {
                    "value": "torch.cat(xyz1, 0)[pair_ind1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_623": {
                "tensors": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/dataloader/base_loader.py": {
        "torch": {
            "from_numpy_54": {
                "variable": {
                    "value": "trans_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(trans)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "curr_start_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "feats_batch0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats0",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "feats_batch1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "matching_inds_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "matching_inds_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(matching_inds_batch, 0).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/dataloader/inf_sampler.py": {
        "torch": {
            "randperm_26": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ],
                        [
                            "torch.randperm(perm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "external/DeepGlobalRegistration/dataloader/transforms.py": {
        "torch": {
            "randn_56": {
                "*size": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "feats.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "feats.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/model/common.py": {
        "torch": {
            "Sequential_17": {
                "*args": {
                    "value": "ME.MinkowskiInstanceNorm(num_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/model/pyramidnet.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_norm_non(inc, inner_inc, 3, 2, dimension, region_type=self.REGION_TYPE, norm_type=self.NORM_TYPE, nonlinearity=self.NONLINEARITY)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.convtr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_tr(in_channels=inner_outc, out_channels=inner_outc, kernel_size=3, stride=2, dilation=1, has_bias=False, region_type=self.REGION_TYPE, dimension=dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_norm_non(TR_CHANNELS[0], TR_CHANNELS[0], kernel_size=3, stride=1, dimension=dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_159": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/model/residual_block.py": {
        "torch": {
            "Sequential_180": {
                "*args": {
                    "value": "conv(in_channels=inc, out_channels=outc, kernel_size=kernel_size, stride=stride, dilation=1, has_bias=False, region_type=region_type, dimension=dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/model/resunet.py": {
        "torch": {
            "Sequential_246": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, CHANNELS[1], CHANNELS[1], bn_momentum=bn_momentum, region_type=REGION_TYPE, dimension=D) for d in range(DEPTHS[1])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, CHANNELS[2], CHANNELS[2], bn_momentum=bn_momentum, region_type=REGION_TYPE, dimension=D) for d in range(DEPTHS[2])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, CHANNELS[3], CHANNELS[3], bn_momentum=bn_momentum, region_type=REGION_TYPE, dimension=D) for d in range(DEPTHS[3])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_310": {
                "variable": {
                    "value": "self.block3_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, TR_CHANNELS[3], TR_CHANNELS[3], bn_momentum=bn_momentum, region_type=REGION_TYPE, dimension=D) for d in range(DEPTHS[-3])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.block2_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, TR_CHANNELS[2], TR_CHANNELS[2], bn_momentum=bn_momentum, region_type=REGION_TYPE, dimension=D) for d in range(DEPTHS[-2])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_731": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, CHANNELS[1], CHANNELS[1], bn_momentum=bn_momentum, dimension=D) for d in range(DEPTHS[1])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_750": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, CHANNELS[2], CHANNELS[2], bn_momentum=bn_momentum, dimension=D) for d in range(DEPTHS[2])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_769": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, CHANNELS[3], CHANNELS[3], bn_momentum=bn_momentum, dimension=D) for d in range(DEPTHS[3])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_788": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, CHANNELS[4], CHANNELS[4], bn_momentum=bn_momentum, dimension=D) for d in range(DEPTHS[4])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_808": {
                "variable": {
                    "value": "self.block4_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, TR_CHANNELS[4], TR_CHANNELS[4], bn_momentum=bn_momentum, dimension=D) for d in range(DEPTHS[-4])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_828": {
                "variable": {
                    "value": "self.block3_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, TR_CHANNELS[3], TR_CHANNELS[3], bn_momentum=bn_momentum, dimension=D) for d in range(DEPTHS[-3])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_848": {
                "variable": {
                    "value": "self.block2_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[get_block(BLOCK_NORM_TYPE, TR_CHANNELS[2], TR_CHANNELS[2], bn_momentum=bn_momentum, dimension=D) for d in range(DEPTHS[-2])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "norm_187": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_404": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_645": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_934": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_1207": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/model/simpleunet.py": {
        "torch": {
            "norm_133": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_311": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_524": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "external/DeepGlobalRegistration/util/timer.py": {
        "torch": {}
    },
    "lib/plotting.py": {
        "torch": {}
    },
    "lib/tensorlist.py": {
        "torch": {
            "cat_207": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i * torch.ones((e.shape[0],), dtype=torch.long) for (i, e) in enumerate(self)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_478": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([i * torch.ones((e.shape[0],), dtype=torch.long) for (i, e) in enumerate(self)]).to(t[0].device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "isnan_212": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Name"
                        ],
                        [
                            "self",
                            "Name"
                        ]
                    ]
                }
            },
            "any_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_208": {
                "*size": {
                    "value": "(e.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {
            "zeros_151": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "farthest_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pts.size()[0], num_points_left)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_279": {
                "variable": {
                    "value": "quantized_coords1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps1.permute(1, 0) / voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_281": {
                "variable": {
                    "value": "quantized_coords2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps2.permute(1, 0) / voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "L2sqrList(Rs, R_gt)",
                            "Call"
                        ],
                        [
                            "L2sqr(Rs, R_gt)",
                            "Call"
                        ],
                        [
                            "L2sqrTransList(ts, tgt, Rs, R_gt)",
                            "Call"
                        ],
                        [
                            "L2sqrTrans(ts, tgt, Rs, R_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "L2sqrList(Rs, R_gt)",
                            "Call"
                        ],
                        [
                            "L2sqr(Rs, R_gt)",
                            "Call"
                        ],
                        [
                            "L2sqrTransList(ts, tgt, Rs, R_gt)",
                            "Call"
                        ],
                        [
                            "L2sqrTrans(ts, tgt, Rs, R_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_198": {
                "variable": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nump",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "asin_145": {
                "input": {
                    "value": "R_err / math.sqrt(8.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_148": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_149": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_158": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "(p0.unsqueeze_(1) - points) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "inds_nn2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[n for n in range(0, point2.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "inds_nn1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inds_nn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inds_nn1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_154": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_160": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_174": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_196": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nump",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_252": {
                "tensors": {
                    "value": "[inds_nn1, inds_nn2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "ndarray": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "info['correspondences']['distances']",
                            "Subscript"
                        ],
                        [
                            "point1[inds_nn[0, :]] - point2[inds_nn[1, :]]",
                            "BinOp"
                        ],
                        [
                            "(d * d).sum(dim=1).sqrt()",
                            "Call"
                        ],
                        [
                            "corrs['distances']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/visdom.py": {
        "torch": {
            "from_numpy_8": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_8": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_8": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "pcds_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pc_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.permute(1, 0) for p in pcds]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "arange_243": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "data_y.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.raw_data['c']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([c, torch.zeros((Xs.shape[0],), dtype=torch.int8) + M])",
                            "Call"
                        ],
                        [
                            "torch.cat(c).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_273": {
                "variable": {
                    "value": "pcds_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pcds_all, Xs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, torch.zeros((Xs.shape[0],), dtype=torch.int8) + M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "[255.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "(pcds[idx].shape[-1],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_274": {
                "*size": {
                    "value": "(Xs.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/visualization.py": {
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "pcds_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcds.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([c, torch.zeros((Xs.shape[0],), dtype=torch.int8) + M])",
                            "Call"
                        ],
                        [
                            "torch.stack(c).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([c, torch.zeros((Xs.shape[0],), dtype=torch.int8) + M])",
                            "Call"
                        ],
                        [
                            "torch.cat(c).contiguous()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "pcds_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pcds_all, Xs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, torch.zeros((Xs.shape[0],), dtype=torch.int8) + M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([c, torch.zeros((Xs.shape[0],), dtype=torch.int8) + M])",
                            "Call"
                        ],
                        [
                            "torch.stack(c).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([c, torch.zeros((Xs.shape[0],), dtype=torch.int8) + M])",
                            "Call"
                        ],
                        [
                            "torch.cat(c).contiguous()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_131": {
                "variable": {
                    "value": "pcds_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pcds_all, Xs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, torch.zeros((Xs.shape[0],), dtype=torch.int8) + M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_149": {
                "variable": {
                    "value": "Riter",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Riter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Riter']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(Riter).cpu().detach()",
                            "Call"
                        ],
                        [
                            "input['Riter']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(Riter).cpu().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Rinit.unsqueeze(dim=0), Riter, Rs.unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_157": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "err.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "titer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "titer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['titer']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(titer).cpu().detach()",
                            "Call"
                        ],
                        [
                            "input['titer']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(titer).cpu().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_168": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tinit.unsqueeze(dim=0), titer, ts.unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_174": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "err.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_199": {
                "variable": {
                    "value": "Riter",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Riter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Riter']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(Riter).cpu().detach()",
                            "Call"
                        ],
                        [
                            "input['Riter']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(Riter).cpu().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_201": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Rinit.unsqueeze(dim=0), Riter, Rs.unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_207": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "err.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_215": {
                "variable": {
                    "value": "titer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "titer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['titer']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(titer).cpu().detach()",
                            "Call"
                        ],
                        [
                            "input['titer']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(titer).cpu().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_217": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tinit.unsqueeze(dim=0), titer, ts.unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(err)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_223": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "err.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(err_corr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_235": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(err_corr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_236": {
                "tensors": {
                    "value": "err_corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "(Xs.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "(Xs.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/feature_extraction/fcgf/residual_block.py": {
        "torch": {}
    },
    "models/feature_extraction/fcgf/resunet.py": {
        "torch": {
            "Softplus_161": {
                "variable": {
                    "value": "self.final_att_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_216": {
                "input": {
                    "value": "out_feat.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/feature_extraction/fcgf/resunet_fcgf.py": {
        "torch": {
            "norm_190": {
                "input": {
                    "value": "out_feat.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/rll_model_fcgf.py": {
        "torch": {
            "load_54": {
                "variable": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_93": {
                "variable": {
                    "value": "quantized_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords / voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_279": {
                "variable": {
                    "value": "(att_sorted, ds_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "quantized.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "registration/dgr.py": {
        "torch": {
            "eye_37": {
                "variable": {
                    "value": "target_R",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_53": {
                "tensors": {
                    "value": "[torch.from_numpy(R).float(), target_R]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_54": {
                "tensors": {
                    "value": "[torch.from_numpy(t).float(), target_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "registration/fgr.py": {
        "torch": {
            "eye_63": {
                "variable": {
                    "value": "target_R",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_104": {
                "tensors": {
                    "value": "[torch.from_numpy(R).float(), target_R]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_105": {
                "tensors": {
                    "value": "[torch.from_numpy(t).float(), target_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_113": {
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ],
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ],
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ],
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ],
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "registration/fppsr.py": {
        "torch": {}
    },
    "registration/icp.py": {
        "torch": {
            "eye_38": {
                "variable": {
                    "value": "target_R",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_86": {
                "tensors": {
                    "value": "[torch.from_numpy(R).float(), target_R]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_87": {
                "tensors": {
                    "value": "[torch.from_numpy(t).float(), target_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_95": {
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_86": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "registration/model_initializaton.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(data[0].shape[0], num_clusters).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).to(data[0].device)",
                            "Call"
                        ],
                        [
                            "X / torch.norm(X, dim=-2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "np.random.random_sample((data[0].shape[0], num_clusters)).astype(np.float32) - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(X).to(data[0].device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(data[0].shape[0], num_clusters).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).to(data[0].device)",
                            "Call"
                        ],
                        [
                            "X / torch.norm(X, dim=-2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "np.random.random_sample((data[0].shape[0], num_clusters)).astype(np.float32) - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(X).to(data[0].device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_67": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d * d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_79": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_means",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_94": {
                "variable": {
                    "value": "init_R",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_126": {
                "variable": {
                    "value": "target_R",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_8": {
                "*size": {
                    "value": "(num_clusters, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_22": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(data[0].shape[0], num_clusters).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).to(data[0].device)",
                            "Call"
                        ],
                        [
                            "X / torch.norm(X, dim=-2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "np.random.random_sample((data[0].shape[0], num_clusters)).astype(np.float32) - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(X).to(data[0].device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_40": {
                "tensors": {
                    "value": "min_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[d.min(dim=-1)[0] for d in data]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(min_xyz).min(dim=0)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_40": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_41": {
                "tensors": {
                    "value": "max_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[d.max(dim=-1)[0] for d in data]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(max_xyz).max(dim=0)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_41": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "cluster_means.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "var_26": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "min_xyz_X - max_xyz_X",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_61": {
                "input": {
                    "value": "torch.cat([min_xyz_X, min_xyz_i], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_64": {
                "input": {
                    "value": "torch.cat([max_xyz_X, max_xyz_i], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "input": {
                    "value": "v.mean(dim=-2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[min_xyz_X, min_xyz_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "[max_xyz_X, max_xyz_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "pcl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_136": {
                "tensors": {
                    "value": "[R, target_R]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_137": {
                "tensors": {
                    "value": "[t.unsqueeze(dim=1), target_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_111": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "registration/observation_weights.py": {
        "torch": {
            "median_17": {
                "variable": {
                    "value": "(w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w[val].to(ps.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "registration/ransac.py": {
        "torch": {
            "eye_67": {
                "variable": {
                    "value": "target_R",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_107": {
                "tensors": {
                    "value": "[torch.from_numpy(R).float(), target_R]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "[torch.from_numpy(t).float(), target_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_113": {
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorListList()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ],
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ],
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ],
                        [
                            "T[0:3, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ],
                        [
                            "T[0:3, 3:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "registration/rll_reg.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.feature_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params.feature_distr_parameters.s * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "training/trainer.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path + '/checkpoint' + str(epoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "path + '/checkpoint' + str(epoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_112": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_list[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'actor_type': actor_type, 'net_type': net_type, 'actor': self.actor.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path + '/checkpoint' + str(epoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "path + '/checkpoint' + str(epoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}