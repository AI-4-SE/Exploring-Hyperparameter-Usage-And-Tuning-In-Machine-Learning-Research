{
    "cmu-long/net/model.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_enc * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "A_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_j.A_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "A_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_p.A_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "A_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_b.A_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_200": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.s1_l5(x_s1_5, self.A_j * self.emul_s1[4] + self.eadd_s1[4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "A_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_j.A_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.input_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.input_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.input_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.hidden_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.hidden_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.hidden_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.out_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.out_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.out_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_237": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_240": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "78",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "self.zero_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[5, 11, 17, 23, 45, 49, 50, 54, 55, 63, 67, 68, 72, 73]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_252": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_r(x) + self.hidden_r(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_253": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_i(x) + self.hidden_i(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_254": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_n(x) + r * self.hidden_h(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_304": {
                "variable": {
                    "value": "reses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_93": {
                "variable": {
                    "value": "self.emul_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_94": {
                "variable": {
                    "value": "self.eadd_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_95": {
                "variable": {
                    "value": "self.emul_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_96": {
                "variable": {
                    "value": "self.eadd_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_97": {
                "variable": {
                    "value": "self.emul_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_98": {
                "variable": {
                    "value": "self.eadd_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_101": {
                "variable": {
                    "value": "self.eadd_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_103": {
                "variable": {
                    "value": "self.eadd_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_105": {
                "variable": {
                    "value": "self.eadd_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.emul",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.eadd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.eadd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ins_p + n, ins_v, ins_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_215": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_216": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_219": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_297": {
                "*size": {
                    "value": "ins_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "(hidd_p, hidd_v, hidd_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_27": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "data": {
                    "value": "torch.zeros(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "data": {
                    "value": "torch.ones(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "data": {
                    "value": "torch.zeros(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "data": {
                    "value": "torch.ones(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "data": {
                    "value": "torch.zeros(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "data": {
                    "value": "torch.zeros(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "data": {
                    "value": "torch.zeros(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "data": {
                    "value": "torch.zeros(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-long/net/utils/module.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.tcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * k_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(t_dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv, kvw->nctw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A_all)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * k_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkcv,kvw->ncw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A_skl)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_109": {
                "variable": {
                    "value": "x_torso",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_110": {
                "variable": {
                    "value": "x_leftlegup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "x_leftlegdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_112": {
                "variable": {
                    "value": "x_rightlegup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "x_rightlegdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "variable": {
                    "value": "x_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_115": {
                "variable": {
                    "value": "x_leftarmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_116": {
                "variable": {
                    "value": "x_leftarmdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_117": {
                "variable": {
                    "value": "x_rightarmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_118": {
                "variable": {
                    "value": "x_rightarmdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_leftlegup, x_leftlegdown, x_rightlegup, x_rightlegdown, x_torso, x_head, x_leftarmup, x_leftarmdown, x_rightarmup, x_rightarmdown)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_135": {
                "variable": {
                    "value": "x_torso",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_136": {
                "variable": {
                    "value": "x_leftleg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_137": {
                "variable": {
                    "value": "x_rightleg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_138": {
                "variable": {
                    "value": "x_leftarm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_139": {
                "variable": {
                    "value": "x_rightarm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "x_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_leftleg, x_rightleg, x_torso, x_leftarm, x_rightarm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_152": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "x_s2_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nwv, nvd->nwd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_176": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_187": {
                "variable": {
                    "value": "x_s3_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nwv, nvd->nwd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_200": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_211": {
                "variable": {
                    "value": "x_s1_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nvw, nwd->nvd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_224": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_235": {
                "variable": {
                    "value": "x_s2_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nvw, nwd->nvd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=(stride, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "input": {
                    "value": "x_s1_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s1(x_s1, relrec_s1, relsend_s1)",
                            "Call"
                        ],
                        [
                            "self.embed_s1(x_s1, relrec_s1, relsend_s1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s2_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_160": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "input": {
                    "value": "x_s2_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s3_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_184": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "input": {
                    "value": "x_s2_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s1_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_208": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_232": {
                "input": {
                    "value": "x_s3_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s3(x_s3, relrec_s3, relsend_s3)",
                            "Call"
                        ],
                        [
                            "self.embed_s3(x_s3, relrec_s3, relsend_s3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s2_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_232": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-long/net/utils/operation.py": {
        "torch": {
            "matmul_117": {
                "variable": {
                    "value": "receivers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 26))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 26))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "senders",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_send",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 26))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 26))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_120": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[receivers, distance]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "incoming",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_rec.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 26))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 26))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid + n_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_14": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 0].unsqueeze(-1), part[:, :, :, 0].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 1].unsqueeze(-1), part[:, :, :, 1].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 2].unsqueeze(-1), part[:, :, :, 2].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 3].unsqueeze(-1), part[:, :, :, 3].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 4].unsqueeze(-1), part[:, :, :, 4].unsqueeze(-1), part[:, :, :, 4].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "x[:, :, :, self.head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 5].unsqueeze(-1), part[:, :, :, 5].unsqueeze(-1), part[:, :, :, 5].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 6].unsqueeze(-1), part[:, :, :, 6].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 7].unsqueeze(-1), part[:, :, :, 7].unsqueeze(-1), part[:, :, :, 7].unsqueeze(-1), part[:, :, :, 7].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 8].unsqueeze(-1), part[:, :, :, 8].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 9].unsqueeze(-1), part[:, :, :, 9].unsqueeze(-1), part[:, :, :, 9].unsqueeze(-1), part[:, :, :, 9].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 0:1], body[:, :, :, 0:1], body[:, :, :, 0:1], body[:, :, :, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 1:2], body[:, :, :, 1:2], body[:, :, :, 1:2], body[:, :, :, 2:3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_joint1, n_joint1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_body1, n_body1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_part1, n_part1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "(x, x_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "num_features": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_214": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-long/processor/io.py": {
        "torch": {
            "DataParallel_77": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-long/processor/processor.py": {
        "torch": {
            "ones_97": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-long/processor/recognition.py": {
        "torch": {
            "abs_83": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(pred - target).mean(-1).mean(1).mean(0)",
                            "Call"
                        ],
                        [
                            "dist * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "encoder_inputs_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_107": {
                "variable": {
                    "value": "encoder_inputs_v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_108": {
                "variable": {
                    "value": "encoder_inputs_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_110": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_111": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_112": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_113": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_56": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.arg.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__136": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_170": {
                "variable": {
                    "value": "encoder_inputs_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_171": {
                "variable": {
                    "value": "encoder_inputs_v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_172": {
                "variable": {
                    "value": "encoder_inputs_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_174": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_175": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_176": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_177": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cmu-short/net/model.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_enc * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "A_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_j.A_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "A_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_p.A_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "A_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_b.A_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_200": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.s1_l5(x_s1_5, self.A_j * self.emul_s1[4] + self.eadd_s1[4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "A_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_j.A_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.input_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.input_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.input_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.hidden_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.hidden_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.hidden_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.out_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.out_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.out_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_237": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_240": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "78",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "self.zero_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[5, 11, 17, 23, 45, 49, 50, 54, 55, 63, 67, 68, 72, 73]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_252": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_r(x) + self.hidden_r(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_253": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_i(x) + self.hidden_i(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_254": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_n(x) + r * self.hidden_h(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_304": {
                "variable": {
                    "value": "reses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_93": {
                "variable": {
                    "value": "self.emul_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_94": {
                "variable": {
                    "value": "self.eadd_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_95": {
                "variable": {
                    "value": "self.emul_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_96": {
                "variable": {
                    "value": "self.eadd_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_97": {
                "variable": {
                    "value": "self.emul_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_98": {
                "variable": {
                    "value": "self.eadd_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_101": {
                "variable": {
                    "value": "self.eadd_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_103": {
                "variable": {
                    "value": "self.eadd_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_105": {
                "variable": {
                    "value": "self.eadd_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.emul",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.eadd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.eadd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ins_p + n, ins_v, ins_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_215": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_216": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_219": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_297": {
                "*size": {
                    "value": "ins_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "(hidd_p, hidd_v, hidd_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_27": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "data": {
                    "value": "torch.zeros(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "data": {
                    "value": "torch.ones(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "data": {
                    "value": "torch.zeros(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "data": {
                    "value": "torch.ones(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "data": {
                    "value": "torch.zeros(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "data": {
                    "value": "torch.zeros(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "data": {
                    "value": "torch.zeros(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "data": {
                    "value": "torch.zeros(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-short/net/utils/module.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.tcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * k_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(t_dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv, kvw->nctw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A_all)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * k_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkcv,kvw->ncw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A_skl)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_109": {
                "variable": {
                    "value": "x_torso",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_110": {
                "variable": {
                    "value": "x_leftlegup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "x_leftlegdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_112": {
                "variable": {
                    "value": "x_rightlegup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "x_rightlegdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "variable": {
                    "value": "x_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_115": {
                "variable": {
                    "value": "x_leftarmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_116": {
                "variable": {
                    "value": "x_leftarmdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_117": {
                "variable": {
                    "value": "x_rightarmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_118": {
                "variable": {
                    "value": "x_rightarmdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_leftlegup, x_leftlegdown, x_rightlegup, x_rightlegdown, x_torso, x_head, x_leftarmup, x_leftarmdown, x_rightarmup, x_rightarmdown)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_135": {
                "variable": {
                    "value": "x_torso",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_136": {
                "variable": {
                    "value": "x_leftleg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_137": {
                "variable": {
                    "value": "x_rightleg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_138": {
                "variable": {
                    "value": "x_leftarm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_139": {
                "variable": {
                    "value": "x_rightarm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "x_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_leftleg, x_rightleg, x_torso, x_leftarm, x_rightarm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_152": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "x_s2_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nwv, nvd->nwd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_176": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_187": {
                "variable": {
                    "value": "x_s3_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nwv, nvd->nwd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_200": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_211": {
                "variable": {
                    "value": "x_s1_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nvw, nwd->nvd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_224": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_235": {
                "variable": {
                    "value": "x_s2_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nvw, nwd->nvd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=(stride, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "input": {
                    "value": "x_s1_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s1(x_s1, relrec_s1, relsend_s1)",
                            "Call"
                        ],
                        [
                            "self.embed_s1(x_s1, relrec_s1, relsend_s1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s2_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_160": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "input": {
                    "value": "x_s2_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s3_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_184": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "input": {
                    "value": "x_s2_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s1_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_208": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_232": {
                "input": {
                    "value": "x_s3_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s3(x_s3, relrec_s3, relsend_s3)",
                            "Call"
                        ],
                        [
                            "self.embed_s3(x_s3, relrec_s3, relsend_s3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s2_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_232": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-short/net/utils/operation.py": {
        "torch": {
            "matmul_117": {
                "variable": {
                    "value": "receivers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 26))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 26))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "senders",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_send",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 26))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 26))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_120": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[receivers, distance]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "incoming",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_rec.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 26))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 26))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid + n_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_14": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 0].unsqueeze(-1), part[:, :, :, 0].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 1].unsqueeze(-1), part[:, :, :, 1].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 2].unsqueeze(-1), part[:, :, :, 2].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 3].unsqueeze(-1), part[:, :, :, 3].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 4].unsqueeze(-1), part[:, :, :, 4].unsqueeze(-1), part[:, :, :, 4].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "x[:, :, :, self.head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 5].unsqueeze(-1), part[:, :, :, 5].unsqueeze(-1), part[:, :, :, 5].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 6].unsqueeze(-1), part[:, :, :, 6].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 7].unsqueeze(-1), part[:, :, :, 7].unsqueeze(-1), part[:, :, :, 7].unsqueeze(-1), part[:, :, :, 7].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 8].unsqueeze(-1), part[:, :, :, 8].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 9].unsqueeze(-1), part[:, :, :, 9].unsqueeze(-1), part[:, :, :, 9].unsqueeze(-1), part[:, :, :, 9].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 0:1], body[:, :, :, 0:1], body[:, :, :, 0:1], body[:, :, :, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 1:2], body[:, :, :, 1:2], body[:, :, :, 1:2], body[:, :, :, 2:3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_joint1, n_joint1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_body1, n_body1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_part1, n_part1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "(x, x_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "num_features": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_214": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-short/processor/io.py": {
        "torch": {
            "DataParallel_77": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-short/processor/processor.py": {
        "torch": {
            "ones_97": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cmu-short/processor/recognition.py": {
        "torch": {
            "abs_83": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(pred - target).mean(-1).mean(1).mean(0)",
                            "Call"
                        ],
                        [
                            "dist * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "encoder_inputs_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_107": {
                "variable": {
                    "value": "encoder_inputs_v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_108": {
                "variable": {
                    "value": "encoder_inputs_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_110": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_111": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_112": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_113": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_56": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.arg.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__136": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_170": {
                "variable": {
                    "value": "encoder_inputs_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_171": {
                "variable": {
                    "value": "encoder_inputs_v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_172": {
                "variable": {
                    "value": "encoder_inputs_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_174": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_175": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_176": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_177": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "h36m-short/net/model.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_enc * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "A_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_j.A_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "A_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_p.A_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "A_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_b.A_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_200": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.s1_l5(x_s1_5, self.A_j * self.emul_s1[4] + self.eadd_s1[4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "A_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph_j.A_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.input_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.input_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.input_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.hidden_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.hidden_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.hidden_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.out_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.out_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.out_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_237": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_240": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "self.zero_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[10, 11, 16, 17, 22, 23, 43, 44, 55, 56]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_252": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_r(x) + self.hidden_r(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_253": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_i(x) + self.hidden_i(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_254": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_n(x) + r * self.hidden_h(msg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_304": {
                "variable": {
                    "value": "reses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_93": {
                "variable": {
                    "value": "self.emul_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_94": {
                "variable": {
                    "value": "self.eadd_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_95": {
                "variable": {
                    "value": "self.emul_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_96": {
                "variable": {
                    "value": "self.eadd_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_97": {
                "variable": {
                    "value": "self.emul_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_98": {
                "variable": {
                    "value": "self.eadd_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_101": {
                "variable": {
                    "value": "self.eadd_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_j.size())) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_103": {
                "variable": {
                    "value": "self.eadd_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_p.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_105": {
                "variable": {
                    "value": "self.eadd_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.zeros(self.A_b.size())) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.emul",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.eadd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.eadd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ins_p + n, ins_v, ins_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_215": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_216": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_219": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_297": {
                "*size": {
                    "value": "ins_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "(hidd_p, hidd_v, hidd_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_27": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "data": {
                    "value": "torch.ones(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "data": {
                    "value": "torch.zeros(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "data": {
                    "value": "torch.ones(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "data": {
                    "value": "torch.zeros(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "data": {
                    "value": "torch.ones(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "data": {
                    "value": "torch.zeros(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "data": {
                    "value": "torch.zeros(self.A_j.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "data": {
                    "value": "torch.zeros(self.A_p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "data": {
                    "value": "torch.zeros(self.A_b.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "self.A_j.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "self.A_p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "self.A_b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "h36m-short/net/utils/module.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.tcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * k_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(t_dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv, kvw->nctw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A_all)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * k_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkcv,kvw->ncw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A_skl)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_109": {
                "variable": {
                    "value": "x_torso",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_110": {
                "variable": {
                    "value": "x_leftlegup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "x_leftlegdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_112": {
                "variable": {
                    "value": "x_rightlegup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "x_rightlegdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "variable": {
                    "value": "x_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_115": {
                "variable": {
                    "value": "x_leftarmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_116": {
                "variable": {
                    "value": "x_leftarmdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_117": {
                "variable": {
                    "value": "x_rightarmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_118": {
                "variable": {
                    "value": "x_rightarmdown",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_leftlegup, x_leftlegdown, x_rightlegup, x_rightlegdown, x_torso, x_head, x_leftarmup, x_leftarmdown, x_rightarmup, x_rightarmdown)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_135": {
                "variable": {
                    "value": "x_torso",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_136": {
                "variable": {
                    "value": "x_leftleg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_137": {
                "variable": {
                    "value": "x_rightleg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_138": {
                "variable": {
                    "value": "x_leftarm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.left_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_139": {
                "variable": {
                    "value": "x_rightarm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, self.right_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "x_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_leftleg, x_rightleg, x_torso, x_leftarm, x_rightarm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_152": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "x_s2_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nwv, nvd->nwd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_176": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_187": {
                "variable": {
                    "value": "x_s3_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nwv, nvd->nwd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_200": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_211": {
                "variable": {
                    "value": "x_s1_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nvw, nwd->nvd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_224": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_235": {
                "variable": {
                    "value": "x_s2_glb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nvw, nwd->nvd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Att, x_s3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=(stride, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "input": {
                    "value": "x_s1_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s1(x_s1, relrec_s1, relsend_s1)",
                            "Call"
                        ],
                        [
                            "self.embed_s1(x_s1, relrec_s1, relsend_s1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s2_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_160": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "input": {
                    "value": "x_s2_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s3_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_184": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "input": {
                    "value": "x_s2_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ],
                        [
                            "self.embed_s2(x_s2, relrec_s2, relsend_s2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s1_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_208": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_232": {
                "input": {
                    "value": "x_s3_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed_s3(x_s3, relrec_s3, relsend_s3)",
                            "Call"
                        ],
                        [
                            "self.embed_s3(x_s3, relrec_s3, relsend_s3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_s2_att.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_232": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "h36m-short/net/utils/operation.py": {
        "torch": {
            "matmul_102": {
                "variable": {
                    "value": "receivers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 20))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 20))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "senders",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_send",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 20))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 20))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_105": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[receivers, distance]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "variable": {
                    "value": "incoming",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_rec.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(inputs.size(0) * inputs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.cat((x, x_skip), -1))",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x) if self.out_act == True else x",
                            "IfExp"
                        ],
                        [
                            "part.new_zeros((N, d, T, 20))",
                            "Call"
                        ],
                        [
                            "body.new_zeros((N, d, T, 20))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid + n_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "do_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_14": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 0].unsqueeze(-1), part[:, :, :, 0].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 1].unsqueeze(-1), part[:, :, :, 1].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 2].unsqueeze(-1), part[:, :, :, 2].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 3].unsqueeze(-1), part[:, :, :, 3].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 4].unsqueeze(-1), part[:, :, :, 4].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x[:, :, :, self.head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 5].unsqueeze(-1), part[:, :, :, 5].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 6].unsqueeze(-1), part[:, :, :, 6].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 7].unsqueeze(-1), part[:, :, :, 7].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm_up]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 8].unsqueeze(-1), part[:, :, :, 8].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm_down]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(part[:, :, :, 9].unsqueeze(-1), part[:, :, :, 9].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "x[:, :, :, self.left_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 0:1], body[:, :, :, 0:1], body[:, :, :, 0:1], body[:, :, :, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "x[:, :, :, self.right_leg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 1:2], body[:, :, :, 1:2], body[:, :, :, 1:2], body[:, :, :, 2:3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "x[:, :, :, self.torso]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3], body[:, :, :, 2:3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "x[:, :, :, self.left_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4], body[:, :, :, 3:4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "x[:, :, :, self.right_arm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5], body[:, :, :, 4:5])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_joint1, n_joint1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_body1, n_body1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.time_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_part1, n_part1, kernel_size=(t_kernel, 1), stride=(t_stride, 1), padding=(t_padding, 0), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "x_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_node, x_node_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "(x, x_skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "n_joint1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "n_body1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "num_features": {
                    "value": "n_part1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_199": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "h36m-short/processor/io.py": {
        "torch": {
            "DataParallel_77": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "h36m-short/processor/processor.py": {
        "torch": {}
    },
    "h36m-short/processor/recognition.py": {
        "torch": {
            "abs_83": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(pred - target).mean(-1).mean(1).mean(0)",
                            "Call"
                        ],
                        [
                            "dist * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "encoder_inputs_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_107": {
                "variable": {
                    "value": "encoder_inputs_v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_108": {
                "variable": {
                    "value": "encoder_inputs_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_110": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_111": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_112": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_113": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_114": {
                "variable": {
                    "value": "downsample_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_56": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.arg.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__138": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_173": {
                "variable": {
                    "value": "encoder_inputs_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_174": {
                "variable": {
                    "value": "encoder_inputs_v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_175": {
                "variable": {
                    "value": "encoder_inputs_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_177": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_178": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "decoder_inputs_previous",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_179": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_179": {
                "variable": {
                    "value": "decoder_inputs_previous2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_180": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_181": {
                "variable": {
                    "value": "downsample_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchlight/build/lib/torchlight/gpu.py": {
        "torch": {
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchlight/build/lib/torchlight/io.py": {
        "torch": {
            "load_64": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(weights_path)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "OrderedDict([[''.join(k.split('module.')), v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(self.work_dir, name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchlight/torchlight/gpu.py": {
        "torch": {
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchlight/torchlight/io.py": {
        "torch": {
            "load_63": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(weights_path)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "OrderedDict([[''.join(k.split('module.')), v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(self.work_dir, name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}