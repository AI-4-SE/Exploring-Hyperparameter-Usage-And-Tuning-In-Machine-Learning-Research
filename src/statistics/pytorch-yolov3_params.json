{
    "coco_predict.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(test_path, img_size=img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "interpolate_110": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "layer_outputs[layer_i[0]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([layer_outputs[i] for i in layer_i], 1)",
                            "Call"
                        ],
                        [
                            "layer_outputs[-1] + layer_outputs[layer_i]",
                            "BinOp"
                        ],
                        [
                            "module[0](x, img_size)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(test_path, img_size=img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(train_path, img_size=img_size, augment=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "utils/datasets.py": {
        "torch": {
            "LoadImagesAndLabels_131": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.img_size": {
                    "value": "img_size",
                    "possible_values": [
                        [
                            "416",
                            "MethodArgument"
                        ],
                        [
                            "416",
                            "MethodArgument"
                        ],
                        [
                            "416",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.augment": {
                    "value": "augment",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "labels_out",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nL, 6)",
                    "possible_values": []
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "labels_out[:, 1:]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_226": {
                "ndarray": {
                    "value": "img",
                    "possible_values": [
                        [
                            "cv2.resize(img, new_shape, interpolation=cv2.INTER_AREA)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_233": {
                "tensors": {
                    "value": "img",
                    "possible_values": [
                        [
                            "cv2.resize(img, new_shape, interpolation=cv2.INTER_AREA)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_233": {
                "tensors": {
                    "value": "label",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "utils/torch_utils.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if cuda else cpu",
                    "possible_values": []
                }
            },
            "manual_seed_5": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_6": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_7": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_count_18": {
                "variable": {
                    "value": "ng",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_device_properties_19": {
                "device": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(1, ng)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "set_printoptions_17": {
                "linewidth": {
                    "value": "1320",
                    "possible_values": []
                },
                "precision": {
                    "value": "5",
                    "possible_values": []
                },
                "profile": {
                    "value": "long",
                    "possible_values": []
                }
            },
            "clamp_112": {
                "variable": {
                    "value": "coords[:, :4]",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, :4]",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "MSELoss_250": {
                "variable": {
                    "value": "MSE",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_251": {
                "variable": {
                    "value": "CE",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_252": {
                "variable": {
                    "value": "BCE",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_450": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "'weights/best.pt'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "zeros_like_258": {
                "variable": {
                    "value": "tconf",
                    "possible_values": []
                },
                "input": {
                    "value": "pi0[..., 0]",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "(iou, a)",
                    "possible_values": []
                },
                "tensors": {
                    "value": "iou",
                    "possible_values": [
                        [
                            "[wh_iou(x, gwh) for x in layer.anchor_vec]",
                            "ListComp"
                        ],
                        [
                            "bbox_iou(dc[0], dc[1:])",
                            "Call"
                        ],
                        [
                            "bbox_iou(dc[0], dc[1:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_298": {
                "variable": {
                    "value": "(iou, a)",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred[:, :5], class_conf.unsqueeze(1), class_pred)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "save_452": {
                "obj": {
                    "value": "a",
                    "possible_values": [
                        [
                            "torch.load(filename, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename.replace('.pt', '_lite.pt')",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.zeros(nC, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nC)",
                            "BinOp"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_96": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.zeros(nC, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nC)",
                            "BinOp"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_238": {
                "input": {
                    "value": "h1",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "det_max",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_max",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_496": {
                "input": {
                    "value": "torch.from_numpy(x)",
                    "possible_values": []
                }
            },
            "log_318": {
                "input": {
                    "value": "gwh / layer.anchor_vec[a]",
                    "possible_values": []
                }
            },
            "min_219": {
                "input": {
                    "value": "b1_x2",
                    "possible_values": []
                }
            },
            "max_219": {
                "input": {
                    "value": "b1_x1",
                    "possible_values": []
                }
            },
            "min_220": {
                "input": {
                    "value": "b1_y2",
                    "possible_values": []
                }
            },
            "max_220": {
                "input": {
                    "value": "b1_y1",
                    "possible_values": []
                }
            },
            "sigmoid_267": {
                "input": {
                    "value": "pi[..., 0:2]",
                    "possible_values": []
                }
            },
            "from_numpy_496": {
                "ndarray": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.zeros(nC, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nC)",
                            "BinOp"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}